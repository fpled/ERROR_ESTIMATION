static const nvi := 1
static const nb_nodes := 5
static const nb_vertex_nodes := 2
static const center_of_var_inter := [ 1.0/2.0 ]
#
def interpolation( var_inter, val, interpolation_base )
    if interpolation_base == "lagrange"
        return val[0]*(1+var_inter[0]*(var_inter[0]*(70.0/3.0+var_inter[0]*(32.0/3.0*var_inter[0]-80.0/3.0))-25.0/3.0))+val[1]*var_inter[0]*(16+var_inter[0]*(var_inter[0]*(96-128.0/3.0*var_inter[0])-208.0/3.0))+val[2]*var_inter[0]*(var_inter[0]*(76+var_inter[0]*(64*var_inter[0]-128))-12)+val[3]*var_inter[0]*(16.0/3.0+var_inter[0]*(var_inter[0]*(224.0/3.0-128.0/3.0*var_inter[0])-112.0/3.0))+val[4]*var_inter[0]*(var_inter[0]*(22.0/3.0+var_inter[0]*(32.0/3.0*var_inter[0]-16))-1)
    else if interpolation_base == "hierarchical"
        return val[0]*(1-var_inter[0])+val[1]*var_inter[0]*(16+var_inter[0]*(var_inter[0]*(96-128.0/3.0*var_inter[0])-208.0/3.0))+val[2]*var_inter[0]*(var_inter[0]*(76+var_inter[0]*(64*var_inter[0]-128))-12)+val[3]*var_inter[0]*(16.0/3.0+var_inter[0]*(var_inter[0]*(224.0/3.0-128.0/3.0*var_inter[0])-112.0/3.0))+var_inter[0]*val[4]

#
def generic_interpolation( var_inter, val, interpolation_base, deg ) when deg == 4
    if interpolation_base == "lagrange"
        return val[1]*var_inter[0]*(16+var_inter[0]*(var_inter[0]*(96-128.0/3.0*var_inter[0])-208.0/3.0))+val[0]*(1+var_inter[0]*(var_inter[0]*(70.0/3.0+var_inter[0]*(32.0/3.0*var_inter[0]-80.0/3.0))-25.0/3.0))+var_inter[0]*(var_inter[0]*(76+var_inter[0]*(64*var_inter[0]-128))-12)*val[2]+val[3]*var_inter[0]*(16.0/3.0+var_inter[0]*(var_inter[0]*(224.0/3.0-128.0/3.0*var_inter[0])-112.0/3.0))+var_inter[0]*(var_inter[0]*(22.0/3.0+var_inter[0]*(32.0/3.0*var_inter[0]-16))-1)*val[4]
    else if interpolation_base == "hierarchical"
        return val[3]*var_inter[0]*(16.0/3.0+var_inter[0]*(var_inter[0]*(224.0/3.0-128.0/3.0*var_inter[0])-112.0/3.0))+var_inter[0]*(var_inter[0]*(76+var_inter[0]*(64*var_inter[0]-128))-12)*val[2]+val[1]*var_inter[0]*(16+var_inter[0]*(var_inter[0]*(96-128.0/3.0*var_inter[0])-208.0/3.0))+(1-var_inter[0])*val[0]+var_inter[0]*val[4]

#
def interpolation_vertex( var_inter, val_vertex )
    return var_inter[0]*val_vertex[1]+val_vertex[0]*(1-var_inter[0])
#
def nb_children( sub_nvi ) when sub_nvi==0
    return 1
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==0
    return child_var_inter
def type_child( sub_nvi, num_child ) when sub_nvi==0
    return BarGeneric[Int32]
def node_number_child( sub_nvi, num_child ) when sub_nvi==0
    return 0 .. 5
#
def nb_children( sub_nvi ) when sub_nvi==1
    return 2
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==0
    return [0]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return [0]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==1
    return [1]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return [4]
def normal( var_inter, pos_nodes )
    res := Vec[ type_promote(var_inter[0],pos_nodes[0][0],mul), 2 ]()
    R_0 := pos_nodes[4][0]; R_1 := pos_nodes[3][0]; R_2 := pos_nodes[1][0]; R_3 := pos_nodes[0][0];
    R_4 := pos_nodes[2][0]; R_5 := pos_nodes[2][1]; R_6 := pos_nodes[1][1]; R_7 := pos_nodes[0][1];
    R_8 := pos_nodes[3][1]; R_9 := pos_nodes[4][1]; R_10 := var_inter[0]; R_11 := 256.0*R_10;
    R_11 = (-384.0)+R_11; R_11 = R_10*R_11; R_11 = 152.0+R_11; R_11 = R_10*R_11;
    R_11 = (-12.0)+R_11; R_4 = R_11*R_4; R_5 = R_11*R_5; R_11 = (-512.0/3.0)*R_10;
    R_12 := 288.0+R_11; R_12 = R_10*R_12; R_12 = (-416.0/3.0)+R_12; R_12 = R_10*R_12;
    R_12 = 16.0+R_12; R_2 = R_12*R_2; R_6 = R_12*R_6; R_11 = 224.0+R_11;
    R_11 = R_10*R_11; R_11 = (-224.0/3.0)+R_11; R_11 = R_10*R_11; R_11 = (16.0/3.0)+R_11;
    R_1 = R_1*R_11; R_11 = R_8*R_11; R_8 = (128.0/3.0)*R_10; R_12 = (-80.0)+R_8;
    R_12 = R_10*R_12; R_12 = (140.0/3.0)+R_12; R_12 = R_10*R_12; R_12 = (-25.0/3.0)+R_12;
    R_3 = R_3*R_12; R_2 = R_3+R_2; R_2 = R_4+R_2; R_1 = R_2+R_1;
    R_7 = R_12*R_7; R_6 = R_7+R_6; R_5 = R_6+R_5; R_5 = R_11+R_5;
    R_8 = (-48.0)+R_8; R_8 = R_10*R_8; R_8 = (44.0/3.0)+R_8; R_8 = R_10*R_8;
    R_8 = (-1.0)+R_8; R_0 = R_8*R_0; R_0 = R_1+R_0; R_1 = pow(R_0,2);
    R_9 = R_8*R_9; R_5 = R_9+R_5; R_9 = pow(R_5,2); R_1 = R_9+R_1;
    R_1 = rsqrt(R_1); R_0 = R_0*R_1; R_0 = (-1.0)*R_0; res[1] = R_0;
    R_1 = R_5*R_1; res[0] = R_1; 
    return res
#
def jac_mat( var_inter, pos_nodes )
    res := Mat[ type_promote(var_inter[0],pos_nodes[0][0],mul), Gen[ 1, 2 ] ]()
    R_0 := pos_nodes[2][1]; R_1 := pos_nodes[1][1]; R_2 := pos_nodes[0][1]; R_3 := pos_nodes[3][1];
    R_4 := pos_nodes[4][1]; R_5 := pos_nodes[4][0]; R_6 := pos_nodes[3][0]; R_7 := pos_nodes[1][0];
    R_8 := pos_nodes[0][0]; R_9 := pos_nodes[2][0]; R_10 := var_inter[0]; R_11 := (-512.0/3.0)*R_10;
    R_12 := 224.0+R_11; R_12 = R_10*R_12; R_12 = (-224.0/3.0)+R_12; R_12 = R_10*R_12;
    R_12 = (16.0/3.0)+R_12; R_3 = R_3*R_12; R_12 = R_6*R_12; R_11 = 288.0+R_11;
    R_11 = R_10*R_11; R_11 = (-416.0/3.0)+R_11; R_11 = R_10*R_11; R_11 = 16.0+R_11;
    R_1 = R_11*R_1; R_7 = R_11*R_7; R_11 = (128.0/3.0)*R_10; R_6 = (-48.0)+R_11;
    R_6 = R_10*R_6; R_6 = (44.0/3.0)+R_6; R_6 = R_10*R_6; R_6 = (-1.0)+R_6;
    R_4 = R_6*R_4; R_5 = R_6*R_5; R_11 = (-80.0)+R_11; R_11 = R_10*R_11;
    R_11 = (140.0/3.0)+R_11; R_11 = R_10*R_11; R_11 = (-25.0/3.0)+R_11; R_2 = R_11*R_2;
    R_1 = R_2+R_1; R_11 = R_8*R_11; R_7 = R_11+R_7; R_11 = 256.0*R_10;
    R_11 = (-384.0)+R_11; R_11 = R_10*R_11; R_11 = 152.0+R_11; R_11 = R_10*R_11;
    R_11 = (-12.0)+R_11; R_0 = R_11*R_0; R_0 = R_1+R_0; R_0 = R_3+R_0;
    R_0 = R_4+R_0; res(0,1) = R_0; R_9 = R_11*R_9; R_7 = R_9+R_7;
    R_12 = R_7+R_12; R_5 = R_12+R_5; res(0,0) = R_5; 
    return res
#
def jac( var_inter, pos_nodes )
    R_0 := pos_nodes[4][0]; R_1 := pos_nodes[3][0]; R_2 := pos_nodes[1][0]; R_3 := pos_nodes[0][0];
    R_4 := pos_nodes[2][0]; R_5 := pos_nodes[2][1]; R_6 := pos_nodes[1][1]; R_7 := pos_nodes[0][1];
    R_8 := pos_nodes[3][1]; R_9 := pos_nodes[4][1]; R_10 := var_inter[0]; R_11 := 256.0*R_10;
    R_11 = (-384.0)+R_11; R_11 = R_10*R_11; R_11 = 152.0+R_11; R_11 = R_10*R_11;
    R_11 = (-12.0)+R_11; R_4 = R_11*R_4; R_5 = R_11*R_5; R_11 = (-512.0/3.0)*R_10;
    R_12 := 288.0+R_11; R_12 = R_10*R_12; R_12 = (-416.0/3.0)+R_12; R_12 = R_10*R_12;
    R_12 = 16.0+R_12; R_2 = R_12*R_2; R_6 = R_12*R_6; R_11 = 224.0+R_11;
    R_11 = R_10*R_11; R_11 = (-224.0/3.0)+R_11; R_11 = R_10*R_11; R_11 = (16.0/3.0)+R_11;
    R_1 = R_1*R_11; R_11 = R_8*R_11; R_8 = (128.0/3.0)*R_10; R_12 = (-80.0)+R_8;
    R_12 = R_10*R_12; R_12 = (140.0/3.0)+R_12; R_12 = R_10*R_12; R_12 = (-25.0/3.0)+R_12;
    R_3 = R_3*R_12; R_2 = R_3+R_2; R_2 = R_4+R_2; R_1 = R_2+R_1;
    R_7 = R_12*R_7; R_6 = R_7+R_6; R_5 = R_6+R_5; R_5 = R_11+R_5;
    R_8 = (-48.0)+R_8; R_8 = R_10*R_8; R_8 = (44.0/3.0)+R_8; R_8 = R_10*R_8;
    R_8 = (-1.0)+R_8; R_0 = R_8*R_0; R_0 = R_1+R_0; R_0 = pow(R_0,2);
    R_9 = R_8*R_9; R_5 = R_9+R_5; R_5 = pow(R_5,2); R_0 = R_5+R_0;
    R_0 = sqrt(R_0); res := R_0; 
    return res
#
def inv_jac_mat( var_inter, pos_nodes )
    assert( 0, "inv_jac_mat() available only when nb var inter == dim" )
#
def measure( var_inter, pos_nodes )
    R_0 := pos_nodes[4][1]; R_1 := (-1.0)*R_0; R_2 := pos_nodes[0][1]; R_1 = R_1+R_2;
    R_3 := (-16.0)*R_1; R_1 = (1.0/3.0)*R_1; R_0 = R_2+R_0; R_2 = (128.0/3.0)*R_0;
    R_0 = (-4.0/3.0)*R_0; R_4 := pos_nodes[1][1]; R_5 := (-1.0)*R_4; R_6 := pos_nodes[3][1];
    R_5 = R_6+R_5; R_7 := (-32.0)*R_5; R_3 = R_7+R_3; R_7 = pow(R_3,2);
    R_5 = (8.0/3.0)*R_5; R_1 = R_5+R_1; R_5 = R_1*R_3; R_8 := pow(R_1,2);
    R_4 = R_6+R_4; R_6 = (-512.0/3.0)*R_4; R_4 = (64.0/3.0)*R_4; R_9 := pos_nodes[2][1];
    R_10 := 256.0*R_9; R_6 = R_10+R_6; R_2 = R_6+R_2; R_6 = R_1*R_2;
    R_9 = (-40.0)*R_9; R_4 = R_9+R_4; R_0 = R_4+R_0; R_2 = R_0*R_2;
    R_3 = R_0*R_3; R_1 = R_1*R_0; R_0 = pow(R_0,2); R_4 = (-1.0)*R_0;
    R_9 = pos_nodes[1][0]; R_10 = (-1.0)*R_9; R_11 := pos_nodes[3][0]; R_10 = R_11+R_10;
    R_12 := (-32.0)*R_10; R_10 = (8.0/3.0)*R_10; R_9 = R_11+R_9; R_11 = (-512.0/3.0)*R_9;
    R_9 = (64.0/3.0)*R_9; R_13 := pos_nodes[4][0]; R_14 := (-1.0)*R_13; R_15 := pos_nodes[0][0];
    R_14 = R_15+R_14; R_16 := (-16.0)*R_14; R_12 = R_16+R_12; R_16 = pow(R_12,2);
    R_7 = R_16+R_7; R_14 = (1.0/3.0)*R_14; R_10 = R_14+R_10; R_14 = R_10*R_12;
    R_5 = R_14+R_5; R_14 = (-60.0)*R_5; R_16 = 2.0*R_5; R_5 = 24.0*R_5;
    R_17 := pow(R_10,2); R_8 = R_17+R_8; R_17 = sqrt(R_8); R_18 := rsqrt(R_8);
    R_8 = 1/R_8; R_13 = R_15+R_13; R_15 = (128.0/3.0)*R_13; R_13 = (-4.0/3.0)*R_13;
    R_19 := pos_nodes[2][0]; R_20 := 256.0*R_19; R_15 = R_20+R_15; R_11 = R_15+R_11;
    R_15 = R_10*R_11; R_19 = (-40.0)*R_19; R_13 = R_19+R_13; R_9 = R_13+R_9;
    R_11 = R_9*R_11; R_2 = R_11+R_2; R_2 = 2.0*R_2; R_2 = R_7+R_2;
    R_2 = 24.0*R_2; R_12 = R_9*R_12; R_12 = R_15+R_12; R_12 = R_6+R_12;
    R_12 = R_3+R_12; R_12 = 48.0*R_12; R_10 = R_10*R_9; R_1 = R_10+R_1;
    R_10 = pow(R_1,2); R_10 = R_8*R_10; R_4 = R_10+R_4; R_3 = (-1.0)*R_10;
    R_9 = pow(R_9,2); R_6 = (-1.0)*R_9; R_6 = R_4+R_6; R_6 = 30.0*R_6;
    R_6 = R_14+R_6; R_6 = R_6*R_1; R_6 = R_6*R_8; R_12 = R_6+R_12;
    R_1 = R_12*R_1; R_1 = 2.0*R_1; R_0 = R_9+R_0; R_16 = R_0+R_16;
    R_9 = (-1.0)*R_16; R_10 = R_9+R_10; R_10 = R_10*R_18; R_10 = (-1.0/24.0)*R_10;
    R_17 = R_10+R_17; R_3 = R_0+R_3; R_3 = 12.0*R_3; R_5 = R_3+R_5;
    R_16 = R_5*R_16; R_1 = R_16+R_1; R_8 = R_1*R_8; R_8 = -0.5*R_8;
    R_2 = R_8+R_2; R_18 = R_2*R_18; R_18 = (1.0/3840.0)*R_18; R_17 = R_18+R_17;
    res := R_17; 
    return res
