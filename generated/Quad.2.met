static const nvi := 2
static const nb_nodes := 4
static const nb_vertex_nodes := 4
static const center_of_var_inter := [ 1.0/2.0, 1.0/2.0 ]
#
def interpolation( var_inter, val, interpolation_base )
    if interpolation_base == "lagrange"
        return val[3]*var_inter[1]*(1-var_inter[0])+val[0]*(1+var_inter[1]*(var_inter[0]-1)-var_inter[0])+val[1]*var_inter[0]*(1-var_inter[1])+val[2]*var_inter[1]*var_inter[0]
    else if interpolation_base == "hierarchical"
        return val[3]*var_inter[1]*(1-var_inter[0])+val[0]*(1+var_inter[1]*(var_inter[0]-1)-var_inter[0])+val[1]*var_inter[0]*(1-var_inter[1])+val[2]*var_inter[1]*var_inter[0]

#
def interpolation_deg( var_inter, val, interpolation_base, deg ) when deg == 1
    if interpolation_base == "lagrange"
        return var_inter[1]*var_inter[0]*val[3]+val[0]*(1+var_inter[1]*(var_inter[0]-1)-var_inter[0])+val[1]*var_inter[0]*(1-var_inter[1])+val[2]*var_inter[1]*(1-var_inter[0])
    else if interpolation_base == "hierarchical"
        return var_inter[1]*var_inter[0]*val[3]+val[0]*(1+var_inter[1]*(var_inter[0]-1)-var_inter[0])+val[1]*var_inter[0]*(1-var_inter[1])+val[2]*var_inter[1]*(1-var_inter[0])

#
def interpolation_deg( var_inter, val, interpolation_base, deg ) when deg == 2
    if interpolation_base == "lagrange"
        return var_inter[0]*var_inter[1]*(1+4*var_inter[1]*var_inter[0]-2*(var_inter[1]+var_inter[0]))*val[8]+var_inter[0]*var_inter[1]*(-8*var_inter[1]*(var_inter[0]-1)-4*(1-var_inter[0]))*val[7]+var_inter[1]*(4+var_inter[0]*(8*var_inter[0]-12))*(1-var_inter[1])*val[3]+var_inter[0]*(var_inter[1]*(3+var_inter[1]*(4*var_inter[0]-2)-6*var_inter[0])+2*var_inter[0]-1)*val[2]+(1+var_inter[0]*(2*var_inter[0]-3)+var_inter[1]*(2*var_inter[1]+var_inter[0]*(9+var_inter[1]*(4*var_inter[0]-6)-6*var_inter[0])-3))*val[0]+val[1]*var_inter[0]*(4*(1-var_inter[0])+var_inter[1]*(-8*var_inter[1]*(var_inter[0]-1)-12*(1-var_inter[0])))+var_inter[0]*var_inter[1]*(8*var_inter[0]-4)*(1-var_inter[1])*val[5]+var_inter[1]*(var_inter[0]*(3+var_inter[0]*(4*var_inter[1]-2)-6*var_inter[1])+2*var_inter[1]-1)*val[6]-16*var_inter[1]*var_inter[0]*(var_inter[0]+var_inter[1]*(1-var_inter[0])-1)*val[4]
    else if interpolation_base == "hierarchical"
        return 4*val[7]*var_inter[1]*var_inter[0]*(1-var_inter[0])+val[6]*var_inter[1]*(1-var_inter[0])+4*val[5]*var_inter[1]*var_inter[0]*(1-var_inter[1])+4*val[3]*var_inter[1]*(1+var_inter[0]*(var_inter[1]-1)-var_inter[1])+val[0]*(1+var_inter[1]*(var_inter[0]-1)-var_inter[0])+4*var_inter[0]*(1+var_inter[0]*(var_inter[1]-1)-var_inter[1])*val[1]+val[2]*var_inter[0]*(1-var_inter[1])+var_inter[1]*var_inter[0]*val[8]-16*var_inter[1]*var_inter[0]*(var_inter[0]+var_inter[1]*(1-var_inter[0])-1)*val[4]

#
def interpolation_deg( var_inter, val, interpolation_base, deg ) when deg == 3
    if interpolation_base == "lagrange"
        return val[15]*var_inter[1]*var_inter[0]*(1+var_inter[1]*(81.0/4.0*var_inter[0]*(1+var_inter[0]*(var_inter[1]-1)-var_inter[1])-9.0/2.0*(1-var_inter[1]))-9.0/2.0*var_inter[0]*(1-var_inter[0]))+val[13]*var_inter[0]*var_inter[1]*(9+var_inter[1]*(var_inter[0]*(405.0/4.0-243.0/4.0*var_inter[0])-81.0/2.0)*(1-var_inter[1])+var_inter[0]*(27.0/2.0*var_inter[0]-45.0/2.0))+val[12]*var_inter[1]*(1+var_inter[0]*(var_inter[0]*(9+var_inter[1]*(81.0/4.0*var_inter[0]-81.0/2.0)*(1-var_inter[1])-9.0/2.0*var_inter[0])-11.0/2.0-99.0/4.0*var_inter[1]*(var_inter[1]-1))-9.0/2.0*var_inter[1]*(1-var_inter[1]))+val[8]*var_inter[1]*(var_inter[0]*(99.0/4.0+var_inter[0]*(81.0/4.0*var_inter[0]-81.0/2.0)+var_inter[1]*(297.0/4.0*var_inter[1]+var_inter[0]*(162+var_inter[1]*(243.0/4.0*var_inter[0]-243.0/2.0)-81*var_inter[0])-99))+var_inter[1]*(18-27.0/2.0*var_inter[1])-9.0/2.0)+val[5]*var_inter[0]*var_inter[1]*(81+var_inter[1]*(243.0/2.0*var_inter[1]-405.0/2.0)+var_inter[0]*(243.0/2.0*var_inter[0]+var_inter[1]*(2025.0/4.0+729.0/4.0*var_inter[1]*var_inter[0]-1215.0/4.0*(var_inter[1]+var_inter[0]))-405.0/2.0))+val[4]*var_inter[1]*(9+var_inter[1]*(27.0/2.0*var_inter[1]-45.0/2.0)+var_inter[0]*(var_inter[0]*(81-81.0/2.0*var_inter[0])+var_inter[1]*(495.0/4.0+var_inter[0]*(405.0/4.0*var_inter[0]+var_inter[1]*(243.0/2.0-243.0/4.0*var_inter[0])-405.0/2.0)-297.0/4.0*var_inter[1])-99.0/2.0))+var_inter[0]*(1+var_inter[1]*(var_inter[1]*(9-9.0/2.0*var_inter[1])+var_inter[0]*(1-var_inter[0])*(99.0/4.0+var_inter[1]*(81.0/4.0*var_inter[1]-81.0/2.0))-11.0/2.0)-9.0/2.0*var_inter[0]*(1-var_inter[0]))*val[3]+val[2]*var_inter[0]*(var_inter[1]*(99.0/4.0+var_inter[0]*(297.0/4.0*var_inter[0]-99)+var_inter[1]*(81.0/4.0*var_inter[1]+var_inter[0]*(162+var_inter[1]*(243.0/4.0*var_inter[0]-81)-243.0/2.0*var_inter[0])-81.0/2.0))+var_inter[0]*(18-27.0/2.0*var_inter[0])-9.0/2.0)+val[0]*(1+var_inter[1]*(var_inter[1]*(9-9.0/2.0*var_inter[1])-11.0/2.0)+var_inter[0]*(var_inter[0]*(9-9.0/2.0*var_inter[0])+var_inter[1]*(121.0/4.0+var_inter[1]*(var_inter[0]*(81+var_inter[1]*(81.0/4.0*var_inter[0]-81.0/2.0)-81.0/2.0*var_inter[0])+99.0/4.0*var_inter[1]-99.0/2.0)+var_inter[0]*(99.0/4.0*var_inter[0]-99.0/2.0))-11.0/2.0))+var_inter[0]*(9+var_inter[0]*(27.0/2.0*var_inter[0]-45.0/2.0)+var_inter[1]*(var_inter[1]*(81+var_inter[0]*(243.0/2.0*var_inter[0]+var_inter[1]*(405.0/4.0-243.0/4.0*var_inter[0])-405.0/2.0)-81.0/2.0*var_inter[1])+var_inter[0]*(495.0/4.0-297.0/4.0*var_inter[0])-99.0/2.0))*val[1]+val[6]*var_inter[0]*var_inter[1]*(var_inter[0]*(162-243.0/2.0*var_inter[0])+var_inter[1]*(405.0/4.0+var_inter[0]*(1215.0/4.0*var_inter[0]+var_inter[1]*(243-729.0/4.0*var_inter[0])-405)-243.0/4.0*var_inter[1])-81.0/2.0)+val[7]*var_inter[0]*var_inter[1]*(9+var_inter[0]*(var_inter[1]*(405.0/4.0*(1-var_inter[0])+243.0/4.0*var_inter[1]*(var_inter[0]-1))-81.0/2.0*(1-var_inter[0]))+var_inter[1]*(27.0/2.0*var_inter[1]-45.0/2.0))+val[9]*var_inter[0]*var_inter[1]*(var_inter[1]*(162-243.0/2.0*var_inter[1])+var_inter[0]*(405.0/4.0+var_inter[1]*(243*var_inter[0]+var_inter[1]*(1215.0/4.0-729.0/4.0*var_inter[0])-405)-243.0/4.0*var_inter[0])-81.0/2.0)+var_inter[0]*var_inter[1]*(81.0/4.0+var_inter[0]*(243.0/4.0*var_inter[0]-81)+var_inter[1]*(243.0/4.0*var_inter[1]+var_inter[0]*(324+var_inter[1]*(729.0/4.0*var_inter[0]-243)-243*var_inter[0])-81))*val[10]+var_inter[0]*var_inter[1]*(81.0/4.0*var_inter[0]*(1-var_inter[0])+var_inter[1]*(18+var_inter[0]*(1-var_inter[0])*(243.0/4.0*var_inter[1]-81)-27.0/2.0*var_inter[1])-9.0/2.0)*val[11]+val[14]*var_inter[1]*var_inter[0]*(var_inter[0]*(18-27.0/2.0*var_inter[0])+var_inter[1]*(81.0/4.0+var_inter[0]*(243.0/4.0*var_inter[0]-81))*(1-var_inter[1])-9.0/2.0)
    else if interpolation_base == "hierarchical"
        return val[14]*var_inter[1]*var_inter[0]*(var_inter[0]*(18-27.0/2.0*var_inter[0])-9.0/2.0)+val[13]*var_inter[1]*var_inter[0]*(9+var_inter[0]*(27.0/2.0*var_inter[0]-45.0/2.0))+var_inter[0]*var_inter[1]*(81.0/4.0+var_inter[1]*(243.0/4.0*var_inter[1]-81)+var_inter[0]*(var_inter[1]*(324+729.0/4.0*var_inter[1]*var_inter[0]-243*(var_inter[1]+var_inter[0]))+243.0/4.0*var_inter[0]-81))*val[10]+val[8]*var_inter[1]*(var_inter[1]*(18*(1-var_inter[0])+27.0/2.0*var_inter[1]*(var_inter[0]-1))-9.0/2.0*(1-var_inter[0]))+val[5]*var_inter[0]*var_inter[1]*(81+var_inter[0]*(243.0/2.0*var_inter[0]-405.0/2.0)+var_inter[1]*(var_inter[0]*(2025.0/4.0+729.0/4.0*var_inter[1]*var_inter[0]-1215.0/4.0*(var_inter[1]+var_inter[0]))+243.0/2.0*var_inter[1]-405.0/2.0))+val[2]*var_inter[0]*(var_inter[0]*(18-27.0/2.0*var_inter[0])-9.0/2.0)*(1-var_inter[1])+val[1]*var_inter[0]*(var_inter[0]*(-27.0/2.0*var_inter[0]*(var_inter[1]-1)-45.0/2.0*(1-var_inter[1]))+9*(1-var_inter[1]))+val[0]*(1+var_inter[1]*(var_inter[0]-1)-var_inter[0])+val[3]*var_inter[0]*(1-var_inter[1])+val[4]*var_inter[1]*(9*(1-var_inter[0])+var_inter[1]*(-45.0/2.0*(1-var_inter[0])-27.0/2.0*var_inter[1]*(var_inter[0]-1)))+val[6]*var_inter[0]*var_inter[1]*(var_inter[0]*(162-243.0/2.0*var_inter[0])+var_inter[1]*(405.0/4.0+var_inter[0]*(1215.0/4.0*var_inter[0]+var_inter[1]*(243-729.0/4.0*var_inter[0])-405)-243.0/4.0*var_inter[1])-81.0/2.0)+val[7]*var_inter[0]*var_inter[1]*(9+var_inter[1]*(27.0/2.0*var_inter[1]-45.0/2.0))+val[9]*var_inter[0]*var_inter[1]*(var_inter[1]*(162-243.0/2.0*var_inter[1])+var_inter[0]*(405.0/4.0+var_inter[1]*(243*var_inter[0]+var_inter[1]*(1215.0/4.0-729.0/4.0*var_inter[0])-405)-243.0/4.0*var_inter[0])-81.0/2.0)+var_inter[0]*var_inter[1]*(var_inter[1]*(18-27.0/2.0*var_inter[1])-9.0/2.0)*val[11]+val[12]*var_inter[1]*(1-var_inter[0])+var_inter[1]*var_inter[0]*val[15]

#
def interpolation_deg( var_inter, val, interpolation_base, deg ) when deg == 4
    if interpolation_base == "lagrange"
        return val[24]*var_inter[1]*var_inter[0]*(1+var_inter[0]*(var_inter[0]*(16-32.0/3.0*var_inter[0])-22.0/3.0)+var_inter[1]*(var_inter[1]*(16-32.0/3.0*var_inter[1])+var_inter[0]*(484.0/9.0+var_inter[0]*(704.0/9.0*var_inter[0]-352.0/3.0)+var_inter[1]*(704.0/9.0*var_inter[1]+var_inter[0]*(256+1024.0/9.0*var_inter[1]*var_inter[0]-512.0/3.0*(var_inter[1]+var_inter[0]))-352.0/3.0))-22.0/3.0))+val[23]*var_inter[1]*var_inter[0]*(var_inter[0]*(112.0/3.0+var_inter[0]*(128.0/3.0*var_inter[0]-224.0/3.0))+var_inter[1]*(352.0/9.0+var_inter[1]*(512.0/9.0*var_inter[1]-256.0/3.0)+var_inter[0]*(var_inter[0]*(4928.0/9.0-2816.0/9.0*var_inter[0])+var_inter[1]*(1792.0/3.0+var_inter[0]*(2048.0/3.0*var_inter[0]+var_inter[1]*(7168.0/9.0-4096.0/9.0*var_inter[0])-3584.0/3.0)-3584.0/9.0*var_inter[1])-2464.0/9.0))-16.0/3.0)+val[22]*var_inter[1]*var_inter[0]*(12+var_inter[1]*(var_inter[1]*(192-128*var_inter[1])-88)+var_inter[0]*(var_inter[0]*(128-64*var_inter[0])+var_inter[1]*(1672.0/3.0+var_inter[0]*(1408.0/3.0*var_inter[0]+var_inter[1]*(2048+var_inter[1]*(2048.0/3.0*var_inter[0]-4096.0/3.0)-1024*var_inter[0])-2816.0/3.0)+var_inter[1]*(2432.0/3.0*var_inter[1]-1216))-76))+var_inter[1]*var_inter[0]*(256.0/9.0+var_inter[0]*(var_inter[0]*(3584.0/9.0-2048.0/9.0*var_inter[0])-1792.0/9.0)+var_inter[1]*(var_inter[1]*(3584.0/9.0-2048.0/9.0*var_inter[1])+var_inter[0]*(12544.0/9.0+var_inter[0]*(14336.0/9.0*var_inter[0]-25088.0/9.0)+var_inter[1]*(14336.0/9.0*var_inter[1]+var_inter[0]*(50176.0/9.0+16384.0/9.0*var_inter[1]*var_inter[0]-28672.0/9.0*(var_inter[1]+var_inter[0]))-25088.0/9.0))-1792.0/9.0))*val[18]+var_inter[0]*var_inter[1]*(var_inter[0]*(1216.0/3.0+var_inter[0]*(1024.0/3.0*var_inter[0]-2048.0/3.0))+var_inter[1]*(448+var_inter[1]*(512*var_inter[1]-896)+var_inter[0]*(var_inter[1]*(17024.0/3.0+var_inter[0]*(14336.0/3.0*var_inter[0]+var_inter[1]*(16384.0/3.0-8192.0/3.0*var_inter[0])-28672.0/3.0)-9728.0/3.0*var_inter[1])+var_inter[0]*(14336.0/3.0-7168.0/3.0*var_inter[0])-8512.0/3.0))-64)*val[17]+var_inter[1]*(16.0/3.0+var_inter[0]*(var_inter[0]*(1120.0/9.0+var_inter[0]*(512.0/9.0*var_inter[0]-1280.0/9.0))+var_inter[1]*(2800.0/9.0+var_inter[1]*(3200.0/9.0*var_inter[1]-5600.0/9.0)+var_inter[0]*(var_inter[1]*(15680.0/9.0+var_inter[0]*(7168.0/9.0*var_inter[0]+var_inter[1]*(10240.0/9.0-4096.0/9.0*var_inter[0])-17920.0/9.0)-8960.0/9.0*var_inter[1])+var_inter[0]*(8960.0/9.0-3584.0/9.0*var_inter[0])-7840.0/9.0))-400.0/9.0)+var_inter[1]*(var_inter[1]*(224.0/3.0-128.0/3.0*var_inter[1])-112.0/3.0))*val[15]+var_inter[0]*(var_inter[1]*(25.0/3.0+var_inter[1]*(var_inter[1]*(80.0/3.0-32.0/3.0*var_inter[1])-70.0/3.0)+var_inter[0]*(var_inter[0]*(400.0/3.0-800.0/9.0*var_inter[0])+var_inter[1]*(1540.0/9.0+var_inter[1]*(704.0/9.0*var_inter[1]-1760.0/9.0)+var_inter[0]*(var_inter[1]*(1280.0/3.0+var_inter[1]*(1024.0/9.0*var_inter[0]-512.0/3.0)-2560.0/9.0*var_inter[0])+2240.0/9.0*var_inter[0]-1120.0/3.0))-550.0/9.0))+var_inter[0]*(22.0/3.0+var_inter[0]*(32.0/3.0*var_inter[0]-16))-1)*val[4]+val[2]*var_inter[0]*(var_inter[1]*(100+var_inter[1]*(var_inter[1]*(320-128*var_inter[1])+var_inter[0]*(5320.0/3.0+var_inter[1]*(2432.0/3.0*var_inter[1]-6080.0/3.0)+var_inter[0]*(4480.0/3.0*var_inter[0]+var_inter[1]*(10240.0/3.0+var_inter[0]*(2048.0/3.0*var_inter[1]-5120.0/3.0)-4096.0/3.0*var_inter[1])-8960.0/3.0))-280)+var_inter[0]*(var_inter[0]*(3200.0/3.0-1600.0/3.0*var_inter[0])-1900.0/3.0))+var_inter[0]*(76+var_inter[0]*(64*var_inter[0]-128))-12)+var_inter[0]*(16+var_inter[1]*(var_inter[0]*(5200.0/9.0+var_inter[0]*(3200.0/9.0*var_inter[0]-800)+var_inter[1]*(var_inter[1]*(16640.0/9.0+var_inter[0]*(10240.0/9.0*var_inter[0]+var_inter[1]*(1024-4096.0/9.0*var_inter[0])-2560)-6656.0/9.0*var_inter[1])+var_inter[0]*(2240-8960.0/9.0*var_inter[0])-14560.0/9.0))+var_inter[1]*(1120.0/3.0+var_inter[1]*(512.0/3.0*var_inter[1]-1280.0/3.0))-400.0/3.0)+var_inter[0]*(var_inter[0]*(96-128.0/3.0*var_inter[0])-208.0/3.0))*val[1]+val[0]*(1+var_inter[1]*(var_inter[1]*(70.0/3.0+var_inter[1]*(32.0/3.0*var_inter[1]-80.0/3.0))-25.0/3.0)+var_inter[0]*(var_inter[1]*(625.0/9.0+var_inter[0]*(var_inter[0]*(2000.0/9.0-800.0/9.0*var_inter[0])+var_inter[1]*(4900.0/9.0+var_inter[0]*(2240.0/9.0*var_inter[0]-5600.0/9.0)+var_inter[1]*(2240.0/9.0*var_inter[1]+var_inter[0]*(6400.0/9.0+var_inter[1]*(1024.0/9.0*var_inter[0]-2560.0/9.0)-2560.0/9.0*var_inter[0])-5600.0/9.0))-1750.0/9.0)+var_inter[1]*(var_inter[1]*(2000.0/9.0-800.0/9.0*var_inter[1])-1750.0/9.0))+var_inter[0]*(70.0/3.0+var_inter[0]*(32.0/3.0*var_inter[0]-80.0/3.0))-25.0/3.0))+val[3]*var_inter[0]*(16.0/3.0+var_inter[0]*(var_inter[0]*(224.0/3.0-128.0/3.0*var_inter[0])-112.0/3.0)+var_inter[1]*(var_inter[1]*(1120.0/9.0+var_inter[1]*(512.0/9.0*var_inter[1]-1280.0/9.0))+var_inter[0]*(2800.0/9.0+var_inter[1]*(var_inter[1]*(8960.0/9.0+var_inter[0]*(7168.0/9.0*var_inter[1]+var_inter[0]*(10240.0/9.0-4096.0/9.0*var_inter[1])-17920.0/9.0)-3584.0/9.0*var_inter[1])+var_inter[0]*(15680.0/9.0-8960.0/9.0*var_inter[0])-7840.0/9.0)+var_inter[0]*(3200.0/9.0*var_inter[0]-5600.0/9.0))-400.0/9.0))+val[5]*var_inter[1]*(16+var_inter[1]*(var_inter[1]*(96-128.0/3.0*var_inter[1])-208.0/3.0)+var_inter[0]*(var_inter[1]*(5200.0/9.0+var_inter[1]*(3200.0/9.0*var_inter[1]-800))+var_inter[0]*(1120.0/3.0+var_inter[0]*(512.0/3.0*var_inter[0]-1280.0/3.0)+var_inter[1]*(var_inter[0]*(16640.0/9.0+var_inter[1]*(10240.0/9.0*var_inter[1]+var_inter[0]*(1024-4096.0/9.0*var_inter[1])-2560)-6656.0/9.0*var_inter[0])+var_inter[1]*(2240-8960.0/9.0*var_inter[1])-14560.0/9.0))-400.0/3.0))+val[6]*var_inter[0]*var_inter[1]*(256+var_inter[0]*(var_inter[0]*(1536-2048.0/3.0*var_inter[0])-3328.0/3.0)+var_inter[1]*(var_inter[1]*(1536-2048.0/3.0*var_inter[1])+var_inter[0]*(43264.0/9.0+var_inter[0]*(26624.0/9.0*var_inter[0]-6656)+var_inter[1]*(26624.0/9.0*var_inter[1]+var_inter[0]*(9216+16384.0/9.0*var_inter[1]*var_inter[0]-4096*(var_inter[1]+var_inter[0]))-6656))-3328.0/3.0))+val[7]*var_inter[0]*var_inter[1]*(var_inter[0]*(1216+var_inter[0]*(1024*var_inter[0]-2048))+var_inter[1]*(832+var_inter[1]*(512*var_inter[1]-1152)+var_inter[0]*(var_inter[1]*(7296-9728.0/3.0*var_inter[1])+var_inter[0]*(26624.0/3.0+var_inter[1]*(16384.0/3.0*var_inter[1]+var_inter[0]*(6144-8192.0/3.0*var_inter[1])-12288)-13312.0/3.0*var_inter[0])-15808.0/3.0))-192)+val[8]*var_inter[0]*var_inter[1]*(256.0/3.0+var_inter[1]*(var_inter[1]*(512-2048.0/9.0*var_inter[1])-3328.0/9.0)+var_inter[0]*(var_inter[0]*(3584.0/3.0-2048.0/3.0*var_inter[0])+var_inter[1]*(23296.0/9.0+var_inter[1]*(14336.0/9.0*var_inter[1]-3584)+var_inter[0]*(26624.0/9.0*var_inter[0]+var_inter[1]*(7168+var_inter[1]*(16384.0/9.0*var_inter[0]-28672.0/9.0)-4096*var_inter[0])-46592.0/9.0))-1792.0/3.0))+val[9]*var_inter[0]*var_inter[1]*(var_inter[0]*(352.0/3.0+var_inter[0]*(512.0/3.0*var_inter[0]-256))+var_inter[1]*(208.0/3.0+var_inter[1]*(128.0/3.0*var_inter[1]-96)+var_inter[0]*(var_inter[0]*(3328.0/3.0-6656.0/9.0*var_inter[0])+var_inter[1]*(704+var_inter[0]*(var_inter[1]*(2048.0/3.0-4096.0/9.0*var_inter[0])+1024*var_inter[0]-1536)-2816.0/9.0*var_inter[1])-4576.0/9.0))-16)+var_inter[1]*(var_inter[1]*(76+var_inter[1]*(64*var_inter[1]-128))+var_inter[0]*(100+var_inter[0]*(var_inter[0]*(320-128*var_inter[0])-280)+var_inter[1]*(var_inter[1]*(3200.0/3.0-1600.0/3.0*var_inter[1])+var_inter[0]*(5320.0/3.0+var_inter[1]*(4480.0/3.0*var_inter[1]-8960.0/3.0)+var_inter[0]*(2432.0/3.0*var_inter[0]+var_inter[1]*(10240.0/3.0+var_inter[0]*(2048.0/3.0*var_inter[1]-4096.0/3.0)-5120.0/3.0*var_inter[1])-6080.0/3.0))-1900.0/3.0))-12)*val[10]+val[11]*var_inter[0]*var_inter[1]*(var_inter[1]*(1216+var_inter[1]*(1024*var_inter[1]-2048))+var_inter[0]*(832+var_inter[0]*(512*var_inter[0]-1152)+var_inter[1]*(var_inter[1]*(26624.0/3.0-13312.0/3.0*var_inter[1])+var_inter[0]*(7296+var_inter[1]*(6144*var_inter[1]+var_inter[0]*(16384.0/3.0-8192.0/3.0*var_inter[1])-12288)-9728.0/3.0*var_inter[0])-15808.0/3.0))-192)+var_inter[0]*var_inter[1]*(144+var_inter[1]*(var_inter[1]*(1536-768*var_inter[1])-912)+var_inter[0]*(var_inter[0]*(1536-768*var_inter[0])+var_inter[1]*(5776+var_inter[0]*(4864*var_inter[0]-9728)+var_inter[1]*(4864*var_inter[1]+var_inter[0]*(16384+4096*var_inter[1]*var_inter[0]-8192*(var_inter[1]+var_inter[0]))-9728))-912))*val[12]+val[13]*var_inter[1]*var_inter[0]*(var_inter[0]*(448+var_inter[0]*(512*var_inter[0]-896))+var_inter[1]*(1216.0/3.0+var_inter[1]*(1024.0/3.0*var_inter[1]-2048.0/3.0)+var_inter[0]*(var_inter[1]*(14336.0/3.0-7168.0/3.0*var_inter[1])+var_inter[0]*(17024.0/3.0+var_inter[1]*(16384.0/3.0*var_inter[0]+var_inter[1]*(14336.0/3.0-8192.0/3.0*var_inter[0])-28672.0/3.0)-9728.0/3.0*var_inter[0])-8512.0/3.0))-64)+var_inter[1]*var_inter[0]*(12+var_inter[1]*(var_inter[1]*(128-64*var_inter[1])-76)+var_inter[0]*(var_inter[0]*(192-128*var_inter[0])+var_inter[1]*(1672.0/3.0+var_inter[1]*(1408.0/3.0*var_inter[1]-2816.0/3.0)+var_inter[0]*(2432.0/3.0*var_inter[0]+var_inter[1]*(2048+var_inter[1]*(2048.0/3.0*var_inter[0]-1024)-4096.0/3.0*var_inter[0])-1216))-88))*val[14]+val[16]*var_inter[0]*var_inter[1]*(256.0/3.0+var_inter[0]*(var_inter[0]*(512-2048.0/9.0*var_inter[0])-3328.0/9.0)+var_inter[1]*(var_inter[0]*(23296.0/9.0+var_inter[1]*(26624.0/9.0*var_inter[1]-46592.0/9.0)+var_inter[0]*(14336.0/9.0*var_inter[0]+var_inter[1]*(7168+var_inter[1]*(16384.0/9.0*var_inter[0]-4096)-28672.0/9.0*var_inter[0])-3584))+var_inter[1]*(3584.0/3.0-2048.0/3.0*var_inter[1])-1792.0/3.0))+var_inter[0]*var_inter[1]*(var_inter[0]*(352.0/9.0+var_inter[0]*(512.0/9.0*var_inter[0]-256.0/3.0))+var_inter[1]*(112.0/3.0+var_inter[1]*(128.0/3.0*var_inter[1]-224.0/3.0)+var_inter[0]*(var_inter[1]*(4928.0/9.0-2816.0/9.0*var_inter[1])+var_inter[0]*(1792.0/3.0+var_inter[1]*(var_inter[1]*(2048.0/3.0-4096.0/9.0*var_inter[0])+7168.0/9.0*var_inter[0]-3584.0/3.0)-3584.0/9.0*var_inter[0])-2464.0/9.0))-16.0/3.0)*val[19]+var_inter[1]*(var_inter[1]*(22.0/3.0+var_inter[1]*(32.0/3.0*var_inter[1]-16))+var_inter[0]*(25.0/3.0+var_inter[1]*(var_inter[1]*(400.0/3.0-800.0/9.0*var_inter[1])+var_inter[0]*(1540.0/9.0+var_inter[1]*(2240.0/9.0*var_inter[1]-1120.0/3.0)+var_inter[0]*(704.0/9.0*var_inter[0]+var_inter[1]*(1280.0/3.0+var_inter[1]*(1024.0/9.0*var_inter[0]-2560.0/9.0)-512.0/3.0*var_inter[0])-1760.0/9.0))-550.0/9.0)+var_inter[0]*(var_inter[0]*(80.0/3.0-32.0/3.0*var_inter[0])-70.0/3.0))-1)*val[20]+val[21]*var_inter[1]*var_inter[0]*(var_inter[1]*(352.0/3.0+var_inter[1]*(512.0/3.0*var_inter[1]-256)+var_inter[0]*(var_inter[1]*(3328.0/3.0-6656.0/9.0*var_inter[1])+var_inter[0]*(704+var_inter[1]*(var_inter[1]*(1024-4096.0/9.0*var_inter[0])+2048.0/3.0*var_inter[0]-1536)-2816.0/9.0*var_inter[0])-4576.0/9.0))+var_inter[0]*(208.0/3.0+var_inter[0]*(128.0/3.0*var_inter[0]-96))-16)
    else if interpolation_base == "hierarchical"
        return var_inter[1]*var_inter[0]*val[24]+val[23]*var_inter[1]*var_inter[0]*(16.0/3.0+var_inter[0]*(var_inter[0]*(224.0/3.0-128.0/3.0*var_inter[0])-112.0/3.0))+val[21]*var_inter[1]*var_inter[0]*(16+var_inter[0]*(var_inter[0]*(96-128.0/3.0*var_inter[0])-208.0/3.0))+val[16]*var_inter[0]*var_inter[1]*(256.0/3.0+var_inter[0]*(var_inter[0]*(512-2048.0/9.0*var_inter[0])-3328.0/9.0)+var_inter[1]*(var_inter[0]*(23296.0/9.0+var_inter[1]*(26624.0/9.0*var_inter[1]-46592.0/9.0)+var_inter[0]*(14336.0/9.0*var_inter[0]+var_inter[1]*(7168+var_inter[1]*(16384.0/9.0*var_inter[0]-4096)-28672.0/9.0*var_inter[0])-3584))+var_inter[1]*(3584.0/3.0-2048.0/3.0*var_inter[1])-1792.0/3.0))+val[13]*var_inter[1]*var_inter[0]*(var_inter[0]*(448+var_inter[0]*(512*var_inter[0]-896))+var_inter[1]*(1216.0/3.0+var_inter[1]*(1024.0/3.0*var_inter[1]-2048.0/3.0)+var_inter[0]*(var_inter[1]*(14336.0/3.0-7168.0/3.0*var_inter[1])+var_inter[0]*(17024.0/3.0+var_inter[1]*(16384.0/3.0*var_inter[0]+var_inter[1]*(14336.0/3.0-8192.0/3.0*var_inter[0])-28672.0/3.0)-9728.0/3.0*var_inter[0])-8512.0/3.0))-64)+var_inter[0]*var_inter[1]*(144+var_inter[1]*(var_inter[1]*(1536-768*var_inter[1])-912)+var_inter[0]*(var_inter[0]*(1536-768*var_inter[0])+var_inter[1]*(5776+var_inter[0]*(4864*var_inter[0]-9728)+var_inter[1]*(4864*var_inter[1]+var_inter[0]*(16384+var_inter[1]*(4096*var_inter[0]-8192)-8192*var_inter[0])-9728))-912))*val[12]+val[7]*var_inter[0]*var_inter[1]*(var_inter[1]*(832+var_inter[1]*(512*var_inter[1]-1152))+var_inter[0]*(1216+var_inter[0]*(1024*var_inter[0]-2048)+var_inter[1]*(var_inter[0]*(26624.0/3.0-13312.0/3.0*var_inter[0])+var_inter[1]*(7296+var_inter[0]*(var_inter[1]*(16384.0/3.0-8192.0/3.0*var_inter[0])+6144*var_inter[0]-12288)-9728.0/3.0*var_inter[1])-15808.0/3.0))-192)+val[6]*var_inter[0]*var_inter[1]*(256+var_inter[0]*(var_inter[0]*(1536-2048.0/3.0*var_inter[0])-3328.0/3.0)+var_inter[1]*(var_inter[1]*(1536-2048.0/3.0*var_inter[1])+var_inter[0]*(43264.0/9.0+var_inter[0]*(26624.0/9.0*var_inter[0]+var_inter[1]*(9216+16384.0/9.0*var_inter[1]*var_inter[0]-4096*(var_inter[1]+var_inter[0]))-6656)+var_inter[1]*(26624.0/9.0*var_inter[1]-6656))-3328.0/3.0))+var_inter[1]*(1-var_inter[0])*(16+var_inter[1]*(var_inter[1]*(96-128.0/3.0*var_inter[1])-208.0/3.0))*val[5]+val[4]*var_inter[0]*(1-var_inter[1])+val[2]*var_inter[0]*(var_inter[0]*(76+var_inter[0]*(64*var_inter[0]-128))-12)*(1-var_inter[1])+var_inter[0]*(16+var_inter[0]*(var_inter[0]*(96-128.0/3.0*var_inter[0])-208.0/3.0))*(1-var_inter[1])*val[1]+val[0]*(1+var_inter[1]*(var_inter[0]-1)-var_inter[0])+var_inter[0]*(16.0/3.0+var_inter[0]*(var_inter[0]*(224.0/3.0-128.0/3.0*var_inter[0])-112.0/3.0))*(1-var_inter[1])*val[3]+val[8]*var_inter[0]*var_inter[1]*(256.0/3.0+var_inter[1]*(var_inter[1]*(512-2048.0/9.0*var_inter[1])+var_inter[0]*(23296.0/9.0+var_inter[1]*(14336.0/9.0*var_inter[1]-3584)+var_inter[0]*(26624.0/9.0*var_inter[0]+var_inter[1]*(7168+var_inter[1]*(16384.0/9.0*var_inter[0]-28672.0/9.0)-4096*var_inter[0])-46592.0/9.0))-3328.0/9.0)+var_inter[0]*(var_inter[0]*(3584.0/3.0-2048.0/3.0*var_inter[0])-1792.0/3.0))+val[9]*var_inter[1]*var_inter[0]*(16+var_inter[1]*(var_inter[1]*(96-128.0/3.0*var_inter[1])-208.0/3.0))+val[10]*var_inter[1]*(1-var_inter[0])*(var_inter[1]*(76+var_inter[1]*(64*var_inter[1]-128))-12)+val[11]*var_inter[0]*var_inter[1]*(var_inter[1]*(1216+var_inter[1]*(1024*var_inter[1]-2048))+var_inter[0]*(832+var_inter[0]*(512*var_inter[0]-1152)+var_inter[1]*(var_inter[1]*(26624.0/3.0+var_inter[0]*(16384.0/3.0*var_inter[0]+var_inter[1]*(6144-8192.0/3.0*var_inter[0])-12288)-13312.0/3.0*var_inter[1])+var_inter[0]*(7296-9728.0/3.0*var_inter[0])-15808.0/3.0))-192)+val[14]*var_inter[1]*var_inter[0]*(var_inter[1]*(76+var_inter[1]*(64*var_inter[1]-128))-12)+var_inter[1]*(1-var_inter[0])*(16.0/3.0+var_inter[1]*(var_inter[1]*(224.0/3.0-128.0/3.0*var_inter[1])-112.0/3.0))*val[15]+val[17]*var_inter[0]*var_inter[1]*(var_inter[1]*(448+var_inter[1]*(512*var_inter[1]-896))+var_inter[0]*(1216.0/3.0+var_inter[0]*(1024.0/3.0*var_inter[0]-2048.0/3.0)+var_inter[1]*(var_inter[0]*(14336.0/3.0+var_inter[1]*(14336.0/3.0*var_inter[0]+var_inter[1]*(16384.0/3.0-8192.0/3.0*var_inter[0])-28672.0/3.0)-7168.0/3.0*var_inter[0])+var_inter[1]*(17024.0/3.0-9728.0/3.0*var_inter[1])-8512.0/3.0))-64)+val[18]*var_inter[1]*var_inter[0]*(256.0/9.0+var_inter[1]*(var_inter[1]*(3584.0/9.0-2048.0/9.0*var_inter[1])-1792.0/9.0)+var_inter[0]*(var_inter[0]*(3584.0/9.0-2048.0/9.0*var_inter[0])+var_inter[1]*(12544.0/9.0+var_inter[0]*(14336.0/9.0*var_inter[0]-25088.0/9.0)+var_inter[1]*(14336.0/9.0*var_inter[1]+var_inter[0]*(50176.0/9.0+16384.0/9.0*var_inter[1]*var_inter[0]-28672.0/9.0*(var_inter[1]+var_inter[0]))-25088.0/9.0))-1792.0/9.0))+var_inter[0]*var_inter[1]*(16.0/3.0+var_inter[1]*(var_inter[1]*(224.0/3.0-128.0/3.0*var_inter[1])-112.0/3.0))*val[19]+val[20]*var_inter[1]*(1-var_inter[0])+val[22]*var_inter[1]*var_inter[0]*(var_inter[0]*(76+var_inter[0]*(64*var_inter[0]-128))-12)

#
def interpolation_vertex( var_inter, val_vertex )
    return val_vertex[1]*var_inter[0]*(1-var_inter[1])+val_vertex[0]*(1+var_inter[1]*(var_inter[0]-1)-var_inter[0])+val_vertex[2]*var_inter[1]*var_inter[0]+val_vertex[3]*var_inter[1]*(1-var_inter[0])
#
def nb_children( sub_nvi ) when sub_nvi==0
    return 1
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==0
    return child_var_inter
def type_child( sub_nvi, num_child ) when sub_nvi==0
    return Quad
def node_number_child( sub_nvi, num_child ) when sub_nvi==0
    return 0 .. 4
#
def nb_children( sub_nvi ) when sub_nvi==1
    return 4
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==0
    return [child_var_inter[0],0]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return Bar
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return [0,1]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==1
    return [1,child_var_inter[0]]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return Bar
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return [1,2]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==2
    return [1-child_var_inter[0],1]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==2
    return Bar
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==2
    return [2,3]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==3
    return [0,1-child_var_inter[0]]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==3
    return Bar
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==3
    return [3,0]
#
def nb_children( sub_nvi ) when sub_nvi==2
    return 4
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==2 and num_child==0
    return [0,0]
def type_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==0
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==0
    return [0]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==2 and num_child==1
    return [1,0]
def type_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==1
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==1
    return [1]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==2 and num_child==2
    return [1,1]
def type_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==2
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==2
    return [2]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==2 and num_child==3
    return [0,1]
def type_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==3
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==3
    return [3]
def normal( var_inter, pos_nodes )
    assert( 0, "normal is defined only for nb_dim == nvi + 1" )
#
def jac_mat( var_inter, pos_nodes )
    res := Mat[ type_promote(var_inter[0],pos_nodes[0][0],mul), Gen[ 2, 2 ] ]()
    R_0 := var_inter[0]; R_1 := (-1.0)*R_0; R_1 = 1.0+R_1; R_2 := (-1.0)+R_0;
    R_3 := pos_nodes[2][1]; R_4 := R_0*R_3; R_5 := pos_nodes[0][1]; R_6 := R_5*R_2;
    R_7 := pos_nodes[1][1]; R_8 := R_0*R_7; R_8 = (-1.0)*R_8; R_6 = R_8+R_6;
    R_4 = R_6+R_4; R_6 = pos_nodes[3][1]; R_8 = R_6*R_1; R_8 = R_4+R_8;
    res(1,1) = R_8; R_8 = pos_nodes[0][0]; R_2 = R_8*R_2; R_4 = pos_nodes[1][0];
    R_9 := R_0*R_4; R_9 = (-1.0)*R_9; R_9 = R_2+R_9; R_2 = pos_nodes[2][0];
    R_0 = R_0*R_2; R_9 = R_0+R_9; R_0 = pos_nodes[3][0]; R_1 = R_0*R_1;
    R_1 = R_9+R_1; res(1,0) = R_1; R_1 = var_inter[1]; R_3 = R_1*R_3;
    R_6 = R_1*R_6; R_6 = (-1.0)*R_6; R_9 = (-1.0)+R_1; R_5 = R_5*R_9;
    R_9 = R_8*R_9; R_8 = (-1.0)*R_1; R_8 = 1.0+R_8; R_7 = R_7*R_8;
    R_5 = R_7+R_5; R_3 = R_5+R_3; R_3 = R_6+R_3; res(0,1) = R_3;
    R_8 = R_4*R_8; R_9 = R_8+R_9; R_2 = R_1*R_2; R_9 = R_2+R_9;
    R_0 = R_1*R_0; R_0 = (-1.0)*R_0; R_9 = R_0+R_9; res(0,0) = R_9;
    return res
#
def jac( var_inter, pos_nodes )
    R_0 := pos_nodes[3][1]; R_1 := (-1.0)*R_0; R_2 := pos_nodes[2][1]; R_1 = R_2+R_1;
    R_3 := pos_nodes[0][1]; R_4 := var_inter[1]; R_1 = R_4*R_1; R_5 := (-1.0)+R_4;
    R_6 := R_3*R_5; R_7 := (-1.0)*R_4; R_7 = 1.0+R_7; R_8 := pos_nodes[1][1];
    R_9 := (-1.0)*R_8; R_9 = R_2+R_9; R_8 = R_8*R_7; R_6 = R_8+R_6;
    R_1 = R_6+R_1; R_6 = pos_nodes[1][0]; R_7 = R_6*R_7; R_6 = (-1.0)*R_6;
    R_8 = pos_nodes[2][0]; R_6 = R_8+R_6; R_2 = pos_nodes[3][0]; R_10 := (-1.0)*R_2;
    R_10 = R_8+R_10; R_10 = R_4*R_10; R_4 = var_inter[0]; R_9 = R_4*R_9;
    R_6 = R_4*R_6; R_8 = (-1.0)*R_4; R_8 = 1.0+R_8; R_0 = R_0*R_8;
    R_8 = R_2*R_8; R_4 = (-1.0)+R_4; R_3 = R_3*R_4; R_0 = R_3+R_0;
    R_9 = R_0+R_9; R_0 = pos_nodes[0][0]; R_5 = R_0*R_5; R_5 = R_7+R_5;
    R_5 = R_10+R_5; R_9 = R_5*R_9; R_4 = R_0*R_4; R_8 = R_4+R_8;
    R_6 = R_8+R_6; R_1 = R_6*R_1; R_1 = (-1.0)*R_1; R_9 = R_1+R_9;
    res := R_9; 
    return res
#
def inv_jac_mat( var_inter, pos_nodes )
    res := Mat[ type_promote(var_inter[0],pos_nodes[0][0],mul), Gen[ 2, 2 ] ]()
    R_0 := var_inter[1]; R_1 := (-1.0)+R_0; R_2 := (-1.0)*R_0; R_2 = 1.0+R_2;
    R_3 := pos_nodes[1][0]; R_4 := R_3*R_2; R_3 = (-1.0)*R_3; R_5 := pos_nodes[2][0];
    R_3 = R_5+R_3; R_6 := pos_nodes[3][0]; R_7 := (-1.0)*R_6; R_7 = R_5+R_7;
    R_7 = R_0*R_7; R_5 = pos_nodes[0][0]; R_8 := R_5*R_1; R_8 = R_4+R_8;
    R_8 = R_7+R_8; R_7 = pos_nodes[1][1]; R_2 = R_7*R_2; R_7 = (-1.0)*R_7;
    R_4 = pos_nodes[2][1]; R_7 = R_4+R_7; R_9 := pos_nodes[3][1]; R_10 := (-1.0)*R_9;
    R_10 = R_4+R_10; R_10 = R_0*R_10; R_0 = var_inter[0]; R_3 = R_0*R_3;
    R_7 = R_0*R_7; R_4 = (-1.0)*R_0; R_4 = 1.0+R_4; R_6 = R_6*R_4;
    R_4 = R_9*R_4; R_0 = (-1.0)+R_0; R_5 = R_5*R_0; R_6 = R_5+R_6;
    R_3 = R_6+R_3; R_6 = pos_nodes[0][1]; R_1 = R_6*R_1; R_1 = R_2+R_1;
    R_10 = R_1+R_10; R_1 = R_3*R_10; R_1 = (-1.0)*R_1; R_0 = R_6*R_0;
    R_4 = R_0+R_4; R_7 = R_4+R_7; R_4 = R_8*R_7; R_4 = R_1+R_4;
    R_4 = 1/R_4; R_8 = R_8*R_4; res(1,1) = R_8; R_3 = R_3*R_4;
    R_3 = (-1.0)*R_3; res(1,0) = R_3; R_10 = R_10*R_4; R_10 = (-1.0)*R_10;
    res(0,1) = R_10; R_4 = R_7*R_4; res(0,0) = R_4; 
    return res
#
def measure( var_inter, pos_nodes )
    R_0 := pos_nodes[1][1]; R_1 := (-1.0)*R_0; R_2 := pos_nodes[2][1]; R_0 = R_0+R_2;
    R_1 = R_2+R_1; R_1 = (-1.0)*R_1; R_2 = pos_nodes[3][1]; R_2 = (-1.0)*R_2;
    R_0 = R_2+R_0; R_3 := pos_nodes[0][1]; R_4 := (-1.0)*R_3; R_0 = R_4+R_0;
    R_2 = R_3+R_2; R_1 = R_2+R_1; R_2 = pos_nodes[2][0]; R_3 = pos_nodes[1][0];
    R_4 = (-1.0)*R_3; R_4 = R_2+R_4; R_4 = (-1.0)*R_4; R_2 = R_3+R_2;
    R_3 = pos_nodes[3][0]; R_3 = (-1.0)*R_3; R_2 = R_3+R_2; R_5 := pos_nodes[0][0];
    R_3 = R_5+R_3; R_4 = R_3+R_4; R_4 = R_0*R_4; R_4 = (-1.0)*R_4;
    R_5 = (-1.0)*R_5; R_2 = R_5+R_2; R_1 = R_2*R_1; R_4 = R_1+R_4;
    R_4 = -0.25*R_4; res := R_4; 
    return res
#
def barycenter( var_inter, pos_nodes )
    res := Vec[ type_promote(var_inter[0],pos_nodes[0][0],mul), 2 ]()
    R_0 := pos_nodes[3][0]; R_1 := (-1.0)*R_0; R_2 := pos_nodes[2][0]; R_3 := R_2+R_1;
    R_4 := R_2+R_0; R_5 := pos_nodes[1][0]; R_6 := R_5+R_2; R_7 := R_1+R_6;
    R_8 := (-1.0)*R_5; R_9 := R_2+R_8; R_4 = R_8+R_4; R_10 := pos_nodes[0][0];
    R_11 := R_10+R_0; R_11 = (-1.0)*R_11; R_11 = R_6+R_11; R_5 = R_10+R_5;
    R_5 = R_2+R_5; R_5 = R_0+R_5; R_8 = R_10+R_8; R_8 = R_3+R_8;
    R_1 = R_10+R_1; R_1 = R_9+R_1; R_10 = (-1.0)*R_10; R_7 = R_10+R_7;
    R_4 = R_10+R_4; R_10 = pos_nodes[2][1]; R_9 = pos_nodes[1][1]; R_3 = (-1.0)*R_9;
    R_0 = R_10+R_3; R_2 = R_9+R_10; R_6 = pos_nodes[3][1]; R_12 := R_10+R_6;
    R_12 = R_3+R_12; R_13 := (-1.0)*R_6; R_14 := R_10+R_13; R_15 := R_13+R_2;
    R_16 := pos_nodes[0][1]; R_17 := R_16+R_6; R_17 = (-1.0)*R_17; R_17 = R_2+R_17;
    R_9 = R_16+R_9; R_9 = R_10+R_9; R_9 = R_6+R_9; R_3 = R_16+R_3;
    R_3 = R_14+R_3; R_14 = R_3*R_4; R_6 = (-1.0)*R_14; R_3 = R_3*R_1;
    R_3 = (-1.0)*R_3; R_13 = R_16+R_13; R_13 = R_0+R_13; R_0 = R_7*R_13;
    R_10 = (-1.0)*R_0; R_2 = R_13*R_8; R_3 = R_2+R_3; R_13 = R_13*R_3;
    R_13 = (-1.0/144.0)*R_13; R_3 = R_1*R_3; R_3 = (-1.0/144.0)*R_3; R_16 = (-1.0)*R_16;
    R_12 = R_16+R_12; R_8 = R_12*R_8; R_2 = (-1.0)*R_8; R_2 = R_14+R_2;
    R_2 = R_12*R_2; R_2 = (-1.0)*R_2; R_6 = R_8+R_6; R_6 = R_4*R_6;
    R_12 = R_7*R_12; R_7 = (-1.0)*R_12; R_15 = R_16+R_15; R_1 = R_15*R_1;
    R_16 = (-1.0)*R_1; R_16 = R_0+R_16; R_16 = R_17*R_16; R_2 = R_16+R_2;
    R_2 = (-1.0/48.0)*R_2; R_10 = R_1+R_10; R_10 = R_11*R_10; R_10 = (-1.0)*R_10;
    R_10 = R_6+R_10; R_10 = (-1.0/48.0)*R_10; R_4 = R_15*R_4; R_15 = (-1.0)*R_4;
    R_15 = R_12+R_15; R_9 = R_9*R_15; R_9 = (-1.0/16.0)*R_9; R_9 = R_13+R_9;
    R_2 = R_9+R_2; R_15 = 1/R_15; R_2 = R_15*R_2; R_2 = (-4.0)*R_2;
    res[1] = R_2; R_7 = R_4+R_7; R_5 = R_5*R_7; R_5 = (1.0/16.0)*R_5;
    R_5 = R_3+R_5; R_10 = R_5+R_10; R_7 = 1/R_7; R_10 = R_7*R_10;
    R_10 = 4.0*R_10; res[0] = R_10; 
    return res
#
def inertia_operator_for_barycenter( var_inter, pos_nodes )
    R_0 := pos_nodes[1][1]; R_1 := (-1.0)*R_0; R_2 := pos_nodes[2][1]; R_3 := R_0+R_2;
    R_4 := R_2+R_1; R_5 := (-1.0)*R_4; R_6 := pos_nodes[3][1]; R_7 := R_2+R_6;
    R_7 = R_1+R_7; R_8 := (-1.0)*R_6; R_9 := R_2+R_8; R_10 := R_8+R_3;
    R_11 := pos_nodes[0][1]; R_12 := R_11+R_6; R_12 = (-1.0)*R_12; R_12 = R_3+R_12;
    R_3 = pow(R_12,2); R_0 = R_11+R_0; R_0 = R_2+R_0; R_0 = R_6+R_0;
    R_6 = 0.25*R_0; R_1 = R_11+R_1; R_1 = R_9+R_1; R_9 = (-1.0)*R_11;
    R_7 = R_9+R_7; R_10 = R_9+R_10; R_8 = R_11+R_8; R_4 = R_4+R_8;
    R_11 = pow(R_4,2); R_9 = R_4*R_12; R_5 = R_8+R_5; R_8 = R_5*R_12;
    R_8 = (-1.0)*R_8; R_2 = R_5*R_4; R_2 = (-1.0)*R_2; R_13 := pow(R_5,2);
    R_14 := pos_nodes[3][0]; R_15 := (-1.0)*R_14; R_16 := pos_nodes[2][0]; R_17 := R_16+R_15;
    R_18 := R_16+R_14; R_19 := pos_nodes[1][0]; R_20 := R_19+R_16; R_21 := R_15+R_20;
    R_22 := (-1.0)*R_19; R_23 := R_16+R_22; R_18 = R_22+R_18; R_24 := pos_nodes[0][0];
    R_25 := R_24+R_14; R_25 = (-1.0)*R_25; R_25 = R_20+R_25; R_20 = pow(R_25,2);
    R_3 = R_20+R_3; R_3 = -0.125*R_3; R_22 = R_24+R_22; R_22 = R_17+R_22;
    R_17 = R_5*R_22; R_20 = R_7*R_22; R_26 := (-1.0)*R_20; R_22 = R_4*R_22;
    R_15 = R_24+R_15; R_15 = R_23+R_15; R_23 = pow(R_15,2); R_11 = R_23+R_11;
    R_11 = (-1.0/24.0)*R_11; R_11 = R_3+R_11; R_3 = R_25*R_15; R_9 = R_3+R_9;
    R_3 = R_10*R_15; R_23 = (-1.0)*R_3; R_27 := R_1*R_15; R_27 = (-1.0)*R_27;
    R_27 = R_22+R_27; R_22 = R_4*R_27; R_22 = (-1.0/144.0)*R_22; R_28 := R_15*R_27;
    R_28 = (-1.0/144.0)*R_28; R_19 = R_24+R_19; R_19 = R_16+R_19; R_19 = R_14+R_19;
    R_14 = 0.25*R_19; R_24 = (-1.0)*R_24; R_21 = R_24+R_21; R_16 = R_21*R_5;
    R_29 := R_21*R_4; R_23 = R_29+R_23; R_23 = R_12*R_23; R_29 = (-1.0)*R_29;
    R_29 = R_3+R_29; R_3 = R_25*R_29; R_3 = (-1.0)*R_3; R_21 = R_21*R_7;
    R_30 := (-1.0)*R_21; R_18 = R_24+R_18; R_24 = R_25*R_18; R_8 = R_24+R_8;
    R_8 = 0.25*R_8; R_24 = R_15*R_18; R_2 = R_24+R_2; R_2 = R_29*R_2;
    R_1 = R_1*R_18; R_17 = R_1+R_17; R_9 = R_17*R_9; R_2 = R_9+R_2;
    R_2 = (-1.0/12.0)*R_2; R_26 = R_1+R_26; R_26 = R_7*R_26; R_26 = (-1.0)*R_26;
    R_26 = R_23+R_26; R_26 = (-1.0/48.0)*R_26; R_1 = (-1.0)*R_1; R_1 = R_20+R_1;
    R_1 = R_18*R_1; R_3 = R_1+R_3; R_3 = (-1.0/48.0)*R_3; R_10 = R_10*R_18;
    R_16 = R_16+R_10; R_11 = R_11*R_16; R_1 = (-1.0)*R_10; R_1 = R_21+R_1;
    R_0 = R_0*R_1; R_0 = (-1.0/16.0)*R_0; R_0 = R_22+R_0; R_26 = R_0+R_26;
    R_1 = 1/R_1; R_26 = R_1*R_26; R_26 = 4.0*R_26; R_26 = R_6+R_26;
    R_4 = R_4*R_26; R_12 = R_12*R_26; R_5 = R_5*R_26; R_5 = (-1.0)*R_5;
    R_26 = pow(R_26,2); R_30 = R_10+R_30; R_19 = R_19*R_30; R_19 = (1.0/16.0)*R_19;
    R_19 = R_28+R_19; R_3 = R_19+R_3; R_30 = 1/R_30; R_3 = R_30*R_3;
    R_3 = (-4.0)*R_3; R_3 = R_14+R_3; R_15 = R_15*R_3; R_4 = R_15+R_4;
    R_8 = R_4+R_8; R_8 = R_27*R_8; R_8 = (1.0/3.0)*R_8; R_25 = R_25*R_3;
    R_12 = R_25+R_12; R_12 = R_29*R_12; R_12 = (-1.0)*R_12; R_8 = R_12+R_8;
    R_11 = R_8+R_11; R_11 = R_2+R_11; R_11 = (1.0/24.0)*R_11; R_2 = R_18*R_3;
    R_5 = R_2+R_5; R_5 = R_17*R_5; R_5 = (-1.0/12.0)*R_5; R_3 = pow(R_3,2);
    R_26 = R_3+R_26; R_26 = -0.5*R_26; R_18 = pow(R_18,2); R_13 = R_18+R_13;
    R_13 = (-1.0/96.0)*R_13; R_26 = R_13+R_26; R_16 = R_26*R_16; R_5 = R_16+R_5;
    R_5 = 0.5*R_5; R_11 = R_5+R_11; res := R_11; 
    return res
