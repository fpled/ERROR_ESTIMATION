static const nvi := 1
static const nb_nodes := 4
static const nb_vertex_nodes := 2
static const center_of_var_inter := [ 1.0/2.0 ]
#
def interpolation( var_inter, val, interpolation_base )
    if interpolation_base == "lagrange"
        return (1+(var_inter[0]*(9-9.0/2.0*var_inter[0])-11.0/2.0)*var_inter[0])*val[0]+val[1]*(1+9.0/2.0*(var_inter[0]-1)*var_inter[0])*var_inter[0]+val[2]*(9+(27.0/2.0*var_inter[0]-45.0/2.0)*var_inter[0])*var_inter[0]+val[3]*((18-27.0/2.0*var_inter[0])*var_inter[0]-9.0/2.0)*var_inter[0]
    else if interpolation_base == "hierarchical"
        return val[3]*((18-27.0/2.0*var_inter[0])*var_inter[0]-9.0/2.0)*var_inter[0]+(1-var_inter[0])*val[0]+val[1]*var_inter[0]+val[2]*(9+(27.0/2.0*var_inter[0]-45.0/2.0)*var_inter[0])*var_inter[0]

#
def generic_interpolation( var_inter, val, interpolation_base, deg ) when deg == 3
    if interpolation_base == "lagrange"
        return (9+(27.0/2.0*var_inter[0]-45.0/2.0)*var_inter[0])*var_inter[0]*val[1]+(1+(var_inter[0]*(9-9.0/2.0*var_inter[0])-11.0/2.0)*var_inter[0])*val[0]+((18-27.0/2.0*var_inter[0])*var_inter[0]-9.0/2.0)*var_inter[0]*val[2]+(1+9.0/2.0*(var_inter[0]-1)*var_inter[0])*var_inter[0]*val[3]
    else if interpolation_base == "hierarchical"
        return ((18-27.0/2.0*var_inter[0])*var_inter[0]-9.0/2.0)*var_inter[0]*val[2]+(9+(27.0/2.0*var_inter[0]-45.0/2.0)*var_inter[0])*var_inter[0]*val[1]+(1-var_inter[0])*val[0]+var_inter[0]*val[3]

#
def generic_interpolation( var_inter, val, interpolation_base, deg ) when deg == 4
    if interpolation_base == "lagrange"
        return val[3]*var_inter[0]*(16.0/3.0+var_inter[0]*(var_inter[0]*(224.0/3.0-128.0/3.0*var_inter[0])-112.0/3.0))+val[2]*var_inter[0]*(var_inter[0]*(76+var_inter[0]*(64*var_inter[0]-128))-12)+val[0]*(1+var_inter[0]*(var_inter[0]*(70.0/3.0+var_inter[0]*(32.0/3.0*var_inter[0]-80.0/3.0))-25.0/3.0))+val[1]*var_inter[0]*(16+var_inter[0]*(var_inter[0]*(96-128.0/3.0*var_inter[0])-208.0/3.0))+val[4]*var_inter[0]*(var_inter[0]*(22.0/3.0+var_inter[0]*(32.0/3.0*var_inter[0]-16))-1)
    else if interpolation_base == "hierarchical"
        return val[3]*var_inter[0]*(16.0/3.0+var_inter[0]*(var_inter[0]*(224.0/3.0-128.0/3.0*var_inter[0])-112.0/3.0))+val[2]*var_inter[0]*(var_inter[0]*(76+var_inter[0]*(64*var_inter[0]-128))-12)+(1-var_inter[0])*val[0]+val[1]*var_inter[0]*(16+var_inter[0]*(var_inter[0]*(96-128.0/3.0*var_inter[0])-208.0/3.0))+var_inter[0]*val[4]

#
def generic_interpolation( var_inter, val, interpolation_base, deg ) when deg == 5
    if interpolation_base == "lagrange"
        return val[4]*var_inter[0]*(var_inter[0]*(1525.0/24.0+var_inter[0]*(var_inter[0]*(6875.0/24.0-3125.0/24.0*var_inter[0])-5125.0/24.0))-25.0/4.0)+val[0]*(1+((375.0/8.0+((625.0/8.0-625.0/24.0*var_inter[0])*var_inter[0]-2125.0/24.0)*var_inter[0])*var_inter[0]-137.0/12.0)*var_inter[0])+val[1]*(25+((8875.0/24.0+(3125.0/24.0*var_inter[0]-4375.0/12.0)*var_inter[0])*var_inter[0]-1925.0/12.0)*var_inter[0])*var_inter[0]+val[2]*((2675.0/12.0+((8125.0/12.0-3125.0/12.0*var_inter[0])*var_inter[0]-7375.0/12.0)*var_inter[0])*var_inter[0]-25)*var_inter[0]+val[3]*(50.0/3.0+var_inter[0]*(var_inter[0]*(6125.0/12.0+var_inter[0]*(3125.0/12.0*var_inter[0]-625))-325.0/2.0))*var_inter[0]+val[5]*var_inter[0]*(1+var_inter[0]*(var_inter[0]*(875.0/24.0+var_inter[0]*(625.0/24.0*var_inter[0]-625.0/12.0))-125.0/12.0))
    else if interpolation_base == "hierarchical"
        return val[5]*var_inter[0]+val[4]*var_inter[0]*(var_inter[0]*(1525.0/24.0+var_inter[0]*(var_inter[0]*(6875.0/24.0-3125.0/24.0*var_inter[0])-5125.0/24.0))-25.0/4.0)+val[1]*(25+((8875.0/24.0+(3125.0/24.0*var_inter[0]-4375.0/12.0)*var_inter[0])*var_inter[0]-1925.0/12.0)*var_inter[0])*var_inter[0]+(1-var_inter[0])*val[0]+val[2]*((2675.0/12.0+((8125.0/12.0-3125.0/12.0*var_inter[0])*var_inter[0]-7375.0/12.0)*var_inter[0])*var_inter[0]-25)*var_inter[0]+val[3]*(50.0/3.0+var_inter[0]*(var_inter[0]*(6125.0/12.0+var_inter[0]*(3125.0/12.0*var_inter[0]-625))-325.0/2.0))*var_inter[0]

#
def generic_interpolation( var_inter, val, interpolation_base, deg ) when deg == 6
    if interpolation_base == "lagrange"
        return val[5]*var_inter[0]*(36.0/5.0+var_inter[0]*(var_inter[0]*(468+var_inter[0]*(var_inter[0]*(5184.0/5.0-1944.0/5.0*var_inter[0])-1026))-486.0/5.0))+val[4]*var_inter[0]*(var_inter[0]*(297+var_inter[0]*(var_inter[0]*(2889+var_inter[0]*(972*var_inter[0]-2754))-2763.0/2.0))-45.0/2.0)+val[2]*var_inter[0]*(var_inter[0]*(1053.0/2.0+var_inter[0]*(var_inter[0]*(3699+var_inter[0]*(972*var_inter[0]-3078))-4149.0/2.0))-45)+val[0]*(1+var_inter[0]*(var_inter[0]*(406.0/5.0+((315+(324.0/5.0*var_inter[0]-1134.0/5.0)*var_inter[0])*var_inter[0]-441.0/2.0)*var_inter[0])-147.0/10.0))+val[1]*var_inter[0]*(36+var_inter[0]*(var_inter[0]*(1044+var_inter[0]*(var_inter[0]*(1296-1944.0/5.0*var_inter[0])-1674))-1566.0/5.0))+val[3]*var_inter[0]*(40+var_inter[0]*(var_inter[0]*(2232+var_inter[0]*(var_inter[0]*(3888-1296*var_inter[0])-4356))-508))+val[6]*var_inter[0]*(var_inter[0]*(137.0/10.0+var_inter[0]*(var_inter[0]*(153+var_inter[0]*(324.0/5.0*var_inter[0]-162))-135.0/2.0))-1)
    else if interpolation_base == "hierarchical"
        return val[4]*var_inter[0]*(var_inter[0]*(297+var_inter[0]*(var_inter[0]*(2889+var_inter[0]*(972*var_inter[0]-2754))-2763.0/2.0))-45.0/2.0)+val[2]*var_inter[0]*(var_inter[0]*(1053.0/2.0+var_inter[0]*(var_inter[0]*(3699+var_inter[0]*(972*var_inter[0]-3078))-4149.0/2.0))-45)+val[1]*var_inter[0]*(36+var_inter[0]*(var_inter[0]*(1044+var_inter[0]*(var_inter[0]*(1296-1944.0/5.0*var_inter[0])-1674))-1566.0/5.0))+(1-var_inter[0])*val[0]+val[3]*var_inter[0]*(40+var_inter[0]*(var_inter[0]*(2232+var_inter[0]*(var_inter[0]*(3888-1296*var_inter[0])-4356))-508))+val[5]*var_inter[0]*(36.0/5.0+var_inter[0]*(var_inter[0]*(468+var_inter[0]*(var_inter[0]*(5184.0/5.0-1944.0/5.0*var_inter[0])-1026))-486.0/5.0))+var_inter[0]*val[6]

#
def interpolation_vertex( var_inter, val_vertex )
    return val_vertex[0]*(1-var_inter[0])+val_vertex[1]*var_inter[0]
#
def nb_children( sub_nvi ) when sub_nvi==0
    return 1
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==0
    return child_var_inter
def type_child( sub_nvi, num_child ) when sub_nvi==0
    return Bar_4
def node_number_child( sub_nvi, num_child ) when sub_nvi==0
    return 0 .. 4
#
def nb_children( sub_nvi ) when sub_nvi==1
    return 2
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==0
    return [0]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return [0]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==1
    return [1]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return [1]
def normal( var_inter, pos_nodes )
    assert( 0, "normal is defined only for nb_dim == nvi + 1" )
#
def jac_mat( var_inter, pos_nodes )
    res := Mat[ type_promote(var_inter[0],pos_nodes[0][0],mul), Gen[ 1, 1 ] ]()
    R_0 := pos_nodes[3][0]; R_1 := pos_nodes[1][0]; R_2 := pos_nodes[0][0]; R_3 := var_inter[0];
    R_4 := -40.5*R_3; R_4 = 36.0+R_4; R_4 = R_3*R_4; R_4 = -4.5+R_4;
    R_4 = R_0*R_4; R_0 = (-3.0)*R_3; R_0 = 2.0+R_0; R_0 = R_3*R_0;
    R_0 = -4.5*R_0; R_0 = 1.0+R_0; R_0 = R_1*R_0; R_1 = -13.5*R_3;
    R_1 = 18.0+R_1; R_1 = R_1*R_3; R_1 = -5.5+R_1; R_1 = R_2*R_1;
    R_0 = R_1+R_0; R_1 = 40.5*R_3; R_1 = (-45.0)+R_1; R_1 = R_3*R_1;
    R_1 = 9.0+R_1; R_3 = pos_nodes[2][0]; R_1 = R_3*R_1; R_0 = R_1+R_0;
    R_4 = R_0+R_4; res(0,0) = R_4; 
    return res
#
def jac( var_inter, pos_nodes )
    R_0 := pos_nodes[3][0]; R_1 := pos_nodes[1][0]; R_2 := pos_nodes[0][0]; R_3 := var_inter[0];
    R_4 := -40.5*R_3; R_4 = 36.0+R_4; R_4 = R_3*R_4; R_4 = -4.5+R_4;
    R_4 = R_0*R_4; R_0 = (-3.0)*R_3; R_0 = 2.0+R_0; R_0 = R_3*R_0;
    R_0 = -4.5*R_0; R_0 = 1.0+R_0; R_0 = R_1*R_0; R_1 = -13.5*R_3;
    R_1 = 18.0+R_1; R_1 = R_1*R_3; R_1 = -5.5+R_1; R_1 = R_2*R_1;
    R_0 = R_1+R_0; R_1 = 40.5*R_3; R_1 = (-45.0)+R_1; R_1 = R_3*R_1;
    R_1 = 9.0+R_1; R_3 = pos_nodes[2][0]; R_1 = R_3*R_1; R_0 = R_1+R_0;
    R_4 = R_0+R_4; res := R_4; 
    return res
#
def inv_jac_mat( var_inter, pos_nodes )
    res := Mat[ type_promote(var_inter[0],pos_nodes[0][0],mul), Gen[ 1, 1 ] ]()
    R_0 := pos_nodes[3][0]; R_1 := pos_nodes[1][0]; R_2 := pos_nodes[0][0]; R_3 := var_inter[0];
    R_4 := -40.5*R_3; R_4 = 36.0+R_4; R_4 = R_3*R_4; R_4 = -4.5+R_4;
    R_4 = R_0*R_4; R_0 = (-3.0)*R_3; R_0 = 2.0+R_0; R_0 = R_3*R_0;
    R_0 = -4.5*R_0; R_0 = 1.0+R_0; R_0 = R_1*R_0; R_1 = -13.5*R_3;
    R_1 = 18.0+R_1; R_1 = R_1*R_3; R_1 = -5.5+R_1; R_1 = R_2*R_1;
    R_0 = R_1+R_0; R_1 = 40.5*R_3; R_1 = (-45.0)+R_1; R_1 = R_3*R_1;
    R_1 = 9.0+R_1; R_3 = pos_nodes[2][0]; R_1 = R_3*R_1; R_0 = R_1+R_0;
    R_4 = R_0+R_4; R_4 = 1/R_4; res(0,0) = R_4; 
    return res
#
def measure( var_inter, pos_nodes )
    R_0 := pos_nodes[0][0]; R_0 = (-1.0)*R_0; R_1 := pos_nodes[1][0]; R_0 = R_1+R_0;
    res := R_0; 
    return res
#
def barycenter( var_inter, pos_nodes )
    res := Vec[ type_promote(var_inter[0],pos_nodes[0][0],mul), 1 ]()
    R_0 := pos_nodes[2][0]; R_1 := (-1.0)*R_0; R_2 := pos_nodes[3][0]; R_3 := R_2+R_1;
    R_3 = (-81.0/160.0)*R_3; R_4 := (-1.0)*R_2; R_5 := R_0+R_4; R_5 = (81.0/160.0)*R_5;
    R_0 = R_2+R_0; R_2 = (9.0/16.0)*R_0; R_6 := pos_nodes[0][0]; R_7 := (-1.0)*R_6;
    R_8 := pos_nodes[1][0]; R_9 := R_8+R_7; R_9 = (-33.0/160.0)*R_9; R_9 = R_3+R_9;
    R_3 = (-1.0)*R_8; R_0 = R_3+R_0; R_0 = R_7+R_0; R_0 = R_9*R_0;
    R_3 = R_6+R_3; R_9 = 1/R_3; R_7 = (-57.0/160.0)*R_3; R_7 = R_5+R_7;
    R_6 = R_8+R_6; R_4 = R_4+R_6; R_4 = R_1+R_4; R_4 = R_7*R_4;
    R_0 = R_4+R_0; R_0 = (-1.0)*R_0; R_6 = (-1.0/16.0)*R_6; R_2 = R_6+R_2;
    R_3 = R_2*R_3; R_0 = R_3+R_0; R_9 = R_0*R_9; res[0] = R_9;
    return res
#
def inertia_operator_for_barycenter( var_inter, pos_nodes )
    R_0 := pos_nodes[0][0]; R_1 := (-1.0)*R_0; R_2 := pos_nodes[1][0]; R_3 := R_2+R_1;
    R_3 = (-33.0/160.0)*R_3; R_4 := (-1.0)*R_2; R_5 := R_0+R_4; R_6 := -4.5*R_5;
    R_7 := 0.125*R_5; R_8 := -13.5*R_5; R_9 := 1/R_5; R_10 := (-57.0/160.0)*R_5;
    R_0 = R_2+R_0; R_2 = (-1.0/16.0)*R_0; R_11 := pos_nodes[2][0]; R_12 := (-1.0)*R_11;
    R_13 := pos_nodes[3][0]; R_14 := R_13+R_12; R_15 := -13.5*R_14; R_15 = R_6+R_15;
    R_6 = 3.375*R_14; R_6 = R_6+R_7; R_16 := -40.5*R_14; R_16 = R_8+R_16;
    R_14 = (-81.0/160.0)*R_14; R_3 = R_14+R_3; R_14 = (-1.0)*R_13; R_0 = R_14+R_0;
    R_0 = R_12+R_0; R_12 = pow(R_0,2); R_12 = (81.0/16.0)*R_12; R_14 = R_11+R_14;
    R_8 = -3.375*R_14; R_8 = R_7+R_8; R_7 = R_8*R_0; R_7 = 4.5*R_7;
    R_17 := R_8*R_15; R_17 = 2.0*R_17; R_17 = R_12+R_17; R_17 = R_6*R_17;
    R_12 = pow(R_8,2); R_14 = (81.0/160.0)*R_14; R_10 = R_14+R_10; R_10 = R_10*R_0;
    R_11 = R_13+R_11; R_4 = R_4+R_11; R_4 = R_1+R_4; R_8 = R_8*R_4;
    R_8 = (-9.0)*R_8; R_3 = R_3*R_4; R_3 = R_10+R_3; R_3 = (-1.0)*R_3;
    R_11 = (9.0/16.0)*R_11; R_10 = R_2+R_11; R_5 = R_10*R_5; R_3 = R_5+R_3;
    R_9 = R_3*R_9; R_9 = (-1.0)*R_9; R_2 = R_9+R_2; R_2 = R_11+R_2;
    R_15 = R_2*R_15; R_15 = 2.0*R_15; R_15 = R_7+R_15; R_15 = R_4*R_15;
    R_15 = -4.5*R_15; R_15 = R_17+R_15; R_17 = pow(R_2,2); R_17 = R_6*R_17;
    R_0 = R_0*R_2; R_0 = 4.5*R_0; R_0 = R_12+R_0; R_12 = R_0*R_16;
    R_15 = R_12+R_15; R_15 = (1.0/80.0)*R_15; R_0 = R_6*R_0; R_16 = R_2*R_16;
    R_8 = R_16+R_8; R_2 = R_8*R_2; R_0 = R_2+R_0; R_0 = (1.0/12.0)*R_0;
    R_17 = R_0+R_17; R_15 = R_17+R_15; res := R_15; 
    return res
