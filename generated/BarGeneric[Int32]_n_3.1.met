static const nvi := 1
static const nb_nodes := 4
static const nb_vertex_nodes := 2
static const center_of_var_inter := [ 1.0/2.0 ]
#
def interpolation( var_inter, val, interpolation_base )
    if interpolation_base == "lagrange"
        return ((18-27.0/2.0*var_inter[0])*var_inter[0]-9.0/2.0)*var_inter[0]*val[2]+(1+((9-9.0/2.0*var_inter[0])*var_inter[0]-11.0/2.0)*var_inter[0])*val[0]+(9+(27.0/2.0*var_inter[0]-45.0/2.0)*var_inter[0])*var_inter[0]*val[1]+val[3]*(1+9.0/2.0*(var_inter[0]-1)*var_inter[0])*var_inter[0]
    else if interpolation_base == "hierarchical"
        return ((18-27.0/2.0*var_inter[0])*var_inter[0]-9.0/2.0)*var_inter[0]*val[2]+(9+(27.0/2.0*var_inter[0]-45.0/2.0)*var_inter[0])*var_inter[0]*val[1]+(1-var_inter[0])*val[0]+val[3]*var_inter[0]

#
def generic_interpolation( var_inter, val, interpolation_base, deg ) when deg == 3
    if interpolation_base == "lagrange"
        return (9+(27.0/2.0*var_inter[0]-45.0/2.0)*var_inter[0])*var_inter[0]*val[1]+(1+((9-9.0/2.0*var_inter[0])*var_inter[0]-11.0/2.0)*var_inter[0])*val[0]+((18-27.0/2.0*var_inter[0])*var_inter[0]-9.0/2.0)*var_inter[0]*val[2]+val[3]*var_inter[0]*(1-9.0/2.0*(1-var_inter[0])*var_inter[0])
    else if interpolation_base == "hierarchical"
        return (9+(27.0/2.0*var_inter[0]-45.0/2.0)*var_inter[0])*var_inter[0]*val[1]+(1-var_inter[0])*val[0]+((18-27.0/2.0*var_inter[0])*var_inter[0]-9.0/2.0)*var_inter[0]*val[2]+val[3]*var_inter[0]

#
def interpolation_vertex( var_inter, val_vertex )
    return val_vertex[0]*(1-var_inter[0])+val_vertex[1]*var_inter[0]
#
def nb_children( sub_nvi ) when sub_nvi==0
    return 1
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==0
    return child_var_inter
def type_child( sub_nvi, num_child ) when sub_nvi==0
    return BarGeneric[Int32]
def node_number_child( sub_nvi, num_child ) when sub_nvi==0
    return 0 .. 4
#
def nb_children( sub_nvi ) when sub_nvi==1
    return 2
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==0
    return [0]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return [0]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==1
    return [1]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return [3]
def normal( var_inter, pos_nodes )
    assert( 0, "normal is defined only for nb_dim == nvi + 1" )
#
def jac_mat( var_inter, pos_nodes )
    res := Mat[ type_promote(var_inter[0],pos_nodes[0][0],mul), Gen[ 1, 1 ] ]()
    R_0 := pos_nodes[3][0]; R_1 := pos_nodes[1][0]; R_2 := pos_nodes[0][0]; R_3 := var_inter[0];
    R_4 := (-3.0)*R_3; R_4 = 2.0+R_4; R_4 = R_3*R_4; R_4 = -4.5*R_4;
    R_4 = 1.0+R_4; R_4 = R_0*R_4; R_0 = 40.5*R_3; R_0 = (-45.0)+R_0;
    R_0 = R_3*R_0; R_0 = 9.0+R_0; R_0 = R_1*R_0; R_1 = -13.5*R_3;
    R_1 = 18.0+R_1; R_1 = R_1*R_3; R_1 = -5.5+R_1; R_1 = R_2*R_1;
    R_0 = R_1+R_0; R_1 = -40.5*R_3; R_1 = 36.0+R_1; R_1 = R_3*R_1;
    R_1 = -4.5+R_1; R_3 = pos_nodes[2][0]; R_1 = R_3*R_1; R_0 = R_1+R_0;
    R_4 = R_0+R_4; res(0,0) = R_4; 
    return res
#
def jac( var_inter, pos_nodes )
    R_0 := pos_nodes[3][0]; R_1 := pos_nodes[1][0]; R_2 := pos_nodes[0][0]; R_3 := var_inter[0];
    R_4 := (-3.0)*R_3; R_4 = 2.0+R_4; R_4 = R_3*R_4; R_4 = -4.5*R_4;
    R_4 = 1.0+R_4; R_4 = R_0*R_4; R_0 = 40.5*R_3; R_0 = (-45.0)+R_0;
    R_0 = R_3*R_0; R_0 = 9.0+R_0; R_0 = R_1*R_0; R_1 = -13.5*R_3;
    R_1 = 18.0+R_1; R_1 = R_1*R_3; R_1 = -5.5+R_1; R_1 = R_2*R_1;
    R_0 = R_1+R_0; R_1 = -40.5*R_3; R_1 = 36.0+R_1; R_1 = R_3*R_1;
    R_1 = -4.5+R_1; R_3 = pos_nodes[2][0]; R_1 = R_3*R_1; R_0 = R_1+R_0;
    R_4 = R_0+R_4; res := R_4; 
    return res
#
def inv_jac_mat( var_inter, pos_nodes )
    res := Mat[ type_promote(var_inter[0],pos_nodes[0][0],mul), Gen[ 1, 1 ] ]()
    R_0 := pos_nodes[3][0]; R_1 := pos_nodes[1][0]; R_2 := pos_nodes[0][0]; R_3 := var_inter[0];
    R_4 := (-3.0)*R_3; R_4 = 2.0+R_4; R_4 = R_3*R_4; R_4 = -4.5*R_4;
    R_4 = 1.0+R_4; R_4 = R_0*R_4; R_0 = 40.5*R_3; R_0 = (-45.0)+R_0;
    R_0 = R_3*R_0; R_0 = 9.0+R_0; R_0 = R_1*R_0; R_1 = -13.5*R_3;
    R_1 = 18.0+R_1; R_1 = R_1*R_3; R_1 = -5.5+R_1; R_1 = R_2*R_1;
    R_0 = R_1+R_0; R_1 = -40.5*R_3; R_1 = 36.0+R_1; R_1 = R_3*R_1;
    R_1 = -4.5+R_1; R_3 = pos_nodes[2][0]; R_1 = R_3*R_1; R_0 = R_1+R_0;
    R_4 = R_0+R_4; R_4 = 1/R_4; res(0,0) = R_4; 
    return res
#
def measure( var_inter, pos_nodes )
    R_0 := pos_nodes[0][0]; R_0 = (-1.0)*R_0; R_1 := pos_nodes[3][0]; R_0 = R_1+R_0;
    res := R_0; 
    return res
