static const nvi := 1
static const nb_nodes := 6
static const nb_vertex_nodes := 2
static const center_of_var_inter := [ 1.0/2.0 ]
#
def interpolation( var_inter, val, interpolation_base )
    if interpolation_base == "lagrange"
        return ((1525.0/24.0+((6875.0/24.0-3125.0/24.0*var_inter[0])*var_inter[0]-5125.0/24.0)*var_inter[0])*var_inter[0]-25.0/4.0)*var_inter[0]*val[5]+(50.0/3.0+var_inter[0]*(var_inter[0]*(6125.0/12.0+var_inter[0]*(3125.0/12.0*var_inter[0]-625))-325.0/2.0))*var_inter[0]*val[4]+(1+((375.0/8.0+((625.0/8.0-625.0/24.0*var_inter[0])*var_inter[0]-2125.0/24.0)*var_inter[0])*var_inter[0]-137.0/12.0)*var_inter[0])*val[0]+val[1]*var_inter[0]*(1+var_inter[0]*(var_inter[0]*(875.0/24.0+var_inter[0]*(625.0/24.0*var_inter[0]-625.0/12.0))-125.0/12.0))+val[2]*var_inter[0]*(25+var_inter[0]*(var_inter[0]*(8875.0/24.0+var_inter[0]*(3125.0/24.0*var_inter[0]-4375.0/12.0))-1925.0/12.0))+val[3]*var_inter[0]*(var_inter[0]*(2675.0/12.0+var_inter[0]*(var_inter[0]*(8125.0/12.0-3125.0/12.0*var_inter[0])-7375.0/12.0))-25)
    else if interpolation_base == "hierarchical"
        return ((1525.0/24.0+((6875.0/24.0-3125.0/24.0*var_inter[0])*var_inter[0]-5125.0/24.0)*var_inter[0])*var_inter[0]-25.0/4.0)*var_inter[0]*val[5]+(50.0/3.0+var_inter[0]*(var_inter[0]*(6125.0/12.0+var_inter[0]*(3125.0/12.0*var_inter[0]-625))-325.0/2.0))*var_inter[0]*val[4]+var_inter[0]*val[1]+(1-var_inter[0])*val[0]+val[2]*var_inter[0]*(25+var_inter[0]*(var_inter[0]*(8875.0/24.0+var_inter[0]*(3125.0/24.0*var_inter[0]-4375.0/12.0))-1925.0/12.0))+val[3]*var_inter[0]*(var_inter[0]*(2675.0/12.0+var_inter[0]*(var_inter[0]*(8125.0/12.0-3125.0/12.0*var_inter[0])-7375.0/12.0))-25)

#
def interpolation_deg( var_inter, val, interpolation_base, deg ) when deg == 5
    if interpolation_base == "lagrange"
        return val[1]*var_inter[0]*(25+var_inter[0]*(var_inter[0]*(8875.0/24.0+var_inter[0]*(3125.0/24.0*var_inter[0]-4375.0/12.0))-1925.0/12.0))+(1+((375.0/8.0+((625.0/8.0-625.0/24.0*var_inter[0])*var_inter[0]-2125.0/24.0)*var_inter[0])*var_inter[0]-137.0/12.0)*var_inter[0])*val[0]+val[2]*var_inter[0]*(var_inter[0]*(2675.0/12.0+var_inter[0]*(var_inter[0]*(8125.0/12.0-3125.0/12.0*var_inter[0])-7375.0/12.0))-25)+(50.0/3.0+var_inter[0]*(var_inter[0]*(6125.0/12.0+var_inter[0]*(3125.0/12.0*var_inter[0]-625))-325.0/2.0))*var_inter[0]*val[3]+((1525.0/24.0+((6875.0/24.0-3125.0/24.0*var_inter[0])*var_inter[0]-5125.0/24.0)*var_inter[0])*var_inter[0]-25.0/4.0)*var_inter[0]*val[4]+val[5]*var_inter[0]*(1+var_inter[0]*(var_inter[0]*(875.0/24.0+var_inter[0]*(625.0/24.0*var_inter[0]-625.0/12.0))-125.0/12.0))
    else if interpolation_base == "hierarchical"
        return ((1525.0/24.0+((6875.0/24.0-3125.0/24.0*var_inter[0])*var_inter[0]-5125.0/24.0)*var_inter[0])*var_inter[0]-25.0/4.0)*var_inter[0]*val[4]+(50.0/3.0+var_inter[0]*(var_inter[0]*(6125.0/12.0+var_inter[0]*(3125.0/12.0*var_inter[0]-625))-325.0/2.0))*var_inter[0]*val[3]+val[2]*var_inter[0]*(var_inter[0]*(2675.0/12.0+var_inter[0]*(var_inter[0]*(8125.0/12.0-3125.0/12.0*var_inter[0])-7375.0/12.0))-25)+val[1]*var_inter[0]*(25+var_inter[0]*(var_inter[0]*(8875.0/24.0+var_inter[0]*(3125.0/24.0*var_inter[0]-4375.0/12.0))-1925.0/12.0))+(1-var_inter[0])*val[0]+var_inter[0]*val[5]

#
def interpolation_deg( var_inter, val, interpolation_base, deg ) when deg == 6
    if interpolation_base == "lagrange"
        return val[4]*var_inter[0]*(var_inter[0]*(297+var_inter[0]*(var_inter[0]*(2889+var_inter[0]*(972*var_inter[0]-2754))-2763.0/2.0))-45.0/2.0)+val[0]*(1+var_inter[0]*(var_inter[0]*(406.0/5.0+var_inter[0]*(var_inter[0]*(315+var_inter[0]*(324.0/5.0*var_inter[0]-1134.0/5.0))-441.0/2.0))-147.0/10.0))+val[1]*var_inter[0]*(36+var_inter[0]*(var_inter[0]*(1044+var_inter[0]*(var_inter[0]*(1296-1944.0/5.0*var_inter[0])-1674))-1566.0/5.0))+val[2]*var_inter[0]*(var_inter[0]*(1053.0/2.0+var_inter[0]*(var_inter[0]*(3699+var_inter[0]*(972*var_inter[0]-3078))-4149.0/2.0))-45)+val[3]*var_inter[0]*(40+var_inter[0]*(var_inter[0]*(2232+var_inter[0]*(var_inter[0]*(3888-1296*var_inter[0])-4356))-508))+val[5]*var_inter[0]*(36.0/5.0+var_inter[0]*(var_inter[0]*(468+var_inter[0]*(var_inter[0]*(5184.0/5.0-1944.0/5.0*var_inter[0])-1026))-486.0/5.0))+val[6]*var_inter[0]*(var_inter[0]*(137.0/10.0+var_inter[0]*(var_inter[0]*(153+var_inter[0]*(324.0/5.0*var_inter[0]-162))-135.0/2.0))-1)
    else if interpolation_base == "hierarchical"
        return (1-var_inter[0])*val[0]+val[1]*var_inter[0]*(36+var_inter[0]*(var_inter[0]*(1044+var_inter[0]*(var_inter[0]*(1296-1944.0/5.0*var_inter[0])-1674))-1566.0/5.0))+val[2]*var_inter[0]*(var_inter[0]*(1053.0/2.0+var_inter[0]*(var_inter[0]*(3699+var_inter[0]*(972*var_inter[0]-3078))-4149.0/2.0))-45)+val[3]*var_inter[0]*(40+var_inter[0]*(var_inter[0]*(2232+var_inter[0]*(var_inter[0]*(3888-1296*var_inter[0])-4356))-508))+val[4]*var_inter[0]*(var_inter[0]*(297+var_inter[0]*(var_inter[0]*(2889+var_inter[0]*(972*var_inter[0]-2754))-2763.0/2.0))-45.0/2.0)+val[5]*var_inter[0]*(36.0/5.0+var_inter[0]*(var_inter[0]*(468+var_inter[0]*(var_inter[0]*(5184.0/5.0-1944.0/5.0*var_inter[0])-1026))-486.0/5.0))+var_inter[0]*val[6]

#
def interpolation_deg( var_inter, val, interpolation_base, deg ) when deg == 7
    if interpolation_base == "lagrange"
        return val[7]*var_inter[0]*(1+var_inter[0]*(var_inter[0]*(9947.0/90.0+var_inter[0]*(var_inter[0]*(84035.0/144.0+var_inter[0]*(117649.0/720.0*var_inter[0]-117649.0/240.0))-16807.0/48.0))-343.0/20.0))+val[6]*var_inter[0]*(var_inter[0]*(49931.0/360.0+var_inter[0]*(var_inter[0]*(98441.0/36.0+var_inter[0]*(var_inter[0]*(1294139.0/360.0-823543.0/720.0*var_inter[0])-319333.0/72.0))-634207.0/720.0))-49.0/6.0)+val[1]*var_inter[0]*(49+((109417.0/45.0+((991613.0/144.0+(823543.0/720.0*var_inter[0]-352947.0/80.0)*var_inter[0])*var_inter[0]-88837.0/16.0)*var_inter[0])*var_inter[0]-10927.0/20.0)*var_inter[0])+val[0]*(1+var_inter[0]*(var_inter[0]*(22981.0/180.0+var_inter[0]*(var_inter[0]*(16807.0/18.0+var_inter[0]*(var_inter[0]*(117649.0/180.0-117649.0/720.0*var_inter[0])-386561.0/360.0))-331681.0/720.0))-363.0/20.0))+((43071.0/40.0+((170471.0/12.0+((1529437.0/120.0-823543.0/240.0*var_inter[0])*var_inter[0]-151263.0/8.0)*var_inter[0])*var_inter[0]-1347647.0/240.0)*var_inter[0])*var_inter[0]-147.0/2.0)*var_inter[0]*val[2]+(245.0/3.0+((133427.0/18.0+(var_inter[0]*(4151329.0/144.0+(823543.0/144.0*var_inter[0]-2941225.0/144.0)*var_inter[0])-2926819.0/144.0)*var_inter[0])*var_inter[0]-46501.0/36.0)*var_inter[0])*var_inter[0]*val[3]+((2009.0/2.0+var_inter[0]*(var_inter[0]*(52822.0/3.0+var_inter[0]*(var_inter[0]*(117649.0/6.0-823543.0/144.0*var_inter[0])-1899191.0/72.0))-872935.0/144.0))*var_inter[0]-245.0/4.0)*var_inter[0]*val[4]+val[5]*var_inter[0]*(147.0/5.0+var_inter[0]*(var_inter[0]*(45962.0/15.0+var_inter[0]*(var_inter[0]*(1159683.0/80.0+var_inter[0]*(823543.0/240.0*var_inter[0]-2705927.0/240.0))-444185.0/48.0))-9849.0/20.0))
    else if interpolation_base == "hierarchical"
        return ((2009.0/2.0+var_inter[0]*(var_inter[0]*(52822.0/3.0+var_inter[0]*(var_inter[0]*(117649.0/6.0-823543.0/144.0*var_inter[0])-1899191.0/72.0))-872935.0/144.0))*var_inter[0]-245.0/4.0)*var_inter[0]*val[4]+(245.0/3.0+((133427.0/18.0+(var_inter[0]*(4151329.0/144.0+(823543.0/144.0*var_inter[0]-2941225.0/144.0)*var_inter[0])-2926819.0/144.0)*var_inter[0])*var_inter[0]-46501.0/36.0)*var_inter[0])*var_inter[0]*val[3]+((43071.0/40.0+((170471.0/12.0+((1529437.0/120.0-823543.0/240.0*var_inter[0])*var_inter[0]-151263.0/8.0)*var_inter[0])*var_inter[0]-1347647.0/240.0)*var_inter[0])*var_inter[0]-147.0/2.0)*var_inter[0]*val[2]+val[1]*var_inter[0]*(49+((109417.0/45.0+((991613.0/144.0+(823543.0/720.0*var_inter[0]-352947.0/80.0)*var_inter[0])*var_inter[0]-88837.0/16.0)*var_inter[0])*var_inter[0]-10927.0/20.0)*var_inter[0])+(1-var_inter[0])*val[0]+val[5]*var_inter[0]*(147.0/5.0+var_inter[0]*(var_inter[0]*(45962.0/15.0+var_inter[0]*(var_inter[0]*(1159683.0/80.0+var_inter[0]*(823543.0/240.0*var_inter[0]-2705927.0/240.0))-444185.0/48.0))-9849.0/20.0))+val[6]*var_inter[0]*(var_inter[0]*(49931.0/360.0+var_inter[0]*(var_inter[0]*(98441.0/36.0+var_inter[0]*(var_inter[0]*(1294139.0/360.0-823543.0/720.0*var_inter[0])-319333.0/72.0))-634207.0/720.0))-49.0/6.0)+val[7]*var_inter[0]

#
def interpolation_deg( var_inter, val, interpolation_base, deg ) when deg == 8
    if interpolation_base == "lagrange"
        return val[6]*((34288.0/45.0+var_inter[0]*(var_inter[0]*(358784.0/15.0+var_inter[0]*(var_inter[0]*(999424.0/15.0+(524288.0/45.0*var_inter[0]-131072.0/3.0)*var_inter[0])-53248))-5984))*var_inter[0]-112.0/3.0)*var_inter[0]+val[1]*(64+var_inter[0]*(var_inter[0]*(44672.0/9.0+var_inter[0]*(var_inter[0]*(235520.0/9.0+var_inter[0]*(var_inter[0]*(131072.0/9.0-1048576.0/315.0*var_inter[0])-1196032.0/45.0))-673792.0/45.0))-30784.0/35.0))*var_inter[0]+val[0]*(1+var_inter[0]*(var_inter[0]*(59062.0/315.0+var_inter[0]*(var_inter[0]*(34208.0/15.0+var_inter[0]*(var_inter[0]*(53248.0/15.0+var_inter[0]*(131072.0/315.0*var_inter[0]-65536.0/35.0))-18432.0/5.0))-4272.0/5.0))-761.0/35.0))+var_inter[0]*(var_inter[0]*(9936.0/5.0+var_inter[0]*(var_inter[0]*(1956992.0/45.0+var_inter[0]*(var_inter[0]*(3915776.0/45.0+var_inter[0]*(524288.0/45.0*var_inter[0]-2228224.0/45.0))-733184.0/9.0))-587296.0/45.0))-112)*val[2]+var_inter[0]*(448.0/3.0+var_inter[0]*(var_inter[0]*(102016.0/5.0+var_inter[0]*(var_inter[0]*(145408+var_inter[0]*(var_inter[0]*(1441792.0/15.0-1048576.0/45.0*var_inter[0])-2441216.0/15.0))-1097728.0/15.0))-128192.0/45.0))*val[3]+var_inter[0]*(var_inter[0]*(2764+var_inter[0]*(var_inter[0]*(703552.0/9.0+var_inter[0]*(var_inter[0]*(1712128.0/9.0+var_inter[0]*(262144.0/9.0*var_inter[0]-1048576.0/9.0))-1466368.0/9.0))-186496.0/9.0))-140)*val[4]+val[5]*var_inter[0]*(448.0/5.0+var_inter[0]*(var_inter[0]*(626048.0/45.0+var_inter[0]*(var_inter[0]*(5285888.0/45.0+var_inter[0]*(var_inter[0]*(4063232.0/45.0-1048576.0/45.0*var_inter[0])-6406144.0/45.0))-2443264.0/45.0))-9024.0/5.0))+var_inter[0]*(64.0/7.0+var_inter[0]*(var_inter[0]*(67456.0/45.0+var_inter[0]*(var_inter[0]*(124928.0/9.0+var_inter[0]*(var_inter[0]*(3801088.0/315.0-1048576.0/315.0*var_inter[0])-802816.0/45.0))-274432.0/45.0))-6592.0/35.0))*val[7]+var_inter[0]*(var_inter[0]*(726.0/35.0+var_inter[0]*(var_inter[0]*(30944.0/45.0+var_inter[0]*(var_inter[0]*(94208.0/45.0+var_inter[0]*(131072.0/315.0*var_inter[0]-65536.0/45.0))-14336.0/9.0))-7504.0/45.0))-1)*val[8]
    else if interpolation_base == "hierarchical"
        return var_inter[0]*val[8]+val[6]*((34288.0/45.0+var_inter[0]*(var_inter[0]*(358784.0/15.0+var_inter[0]*(var_inter[0]*(999424.0/15.0+(524288.0/45.0*var_inter[0]-131072.0/3.0)*var_inter[0])-53248))-5984))*var_inter[0]-112.0/3.0)*var_inter[0]+var_inter[0]*(var_inter[0]*(2764+var_inter[0]*(var_inter[0]*(703552.0/9.0+var_inter[0]*(var_inter[0]*(1712128.0/9.0+var_inter[0]*(262144.0/9.0*var_inter[0]-1048576.0/9.0))-1466368.0/9.0))-186496.0/9.0))-140)*val[4]+var_inter[0]*(448.0/3.0+var_inter[0]*(var_inter[0]*(102016.0/5.0+var_inter[0]*(var_inter[0]*(145408+var_inter[0]*(var_inter[0]*(1441792.0/15.0-1048576.0/45.0*var_inter[0])-2441216.0/15.0))-1097728.0/15.0))-128192.0/45.0))*val[3]+var_inter[0]*(var_inter[0]*(9936.0/5.0+var_inter[0]*(var_inter[0]*(1956992.0/45.0+var_inter[0]*(var_inter[0]*(3915776.0/45.0+var_inter[0]*(524288.0/45.0*var_inter[0]-2228224.0/45.0))-733184.0/9.0))-587296.0/45.0))-112)*val[2]+val[1]*(64+var_inter[0]*(var_inter[0]*(44672.0/9.0+var_inter[0]*(var_inter[0]*(235520.0/9.0+var_inter[0]*(var_inter[0]*(131072.0/9.0-1048576.0/315.0*var_inter[0])-1196032.0/45.0))-673792.0/45.0))-30784.0/35.0))*var_inter[0]+val[0]*(1-var_inter[0])+val[5]*var_inter[0]*(448.0/5.0+var_inter[0]*(var_inter[0]*(626048.0/45.0+var_inter[0]*(var_inter[0]*(5285888.0/45.0+var_inter[0]*(var_inter[0]*(4063232.0/45.0-1048576.0/45.0*var_inter[0])-6406144.0/45.0))-2443264.0/45.0))-9024.0/5.0))+var_inter[0]*(64.0/7.0+var_inter[0]*(var_inter[0]*(67456.0/45.0+var_inter[0]*(var_inter[0]*(124928.0/9.0+var_inter[0]*(var_inter[0]*(3801088.0/315.0-1048576.0/315.0*var_inter[0])-802816.0/45.0))-274432.0/45.0))-6592.0/35.0))*val[7]

#
def interpolation_vertex( var_inter, val_vertex )
    return val_vertex[1]*var_inter[0]+(1-var_inter[0])*val_vertex[0]
#
def nb_children( sub_nvi ) when sub_nvi==0
    return 1
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==0
    return child_var_inter
def type_child( sub_nvi, num_child ) when sub_nvi==0
    return Bar_6
def node_number_child( sub_nvi, num_child ) when sub_nvi==0
    return 0 .. 6
#
def nb_children( sub_nvi ) when sub_nvi==1
    return 2
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==0
    return [0]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return [0]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==1
    return [1]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return [1]
def normal( var_inter, pos_nodes )
    assert( 0, "normal is defined only for nb_dim == nvi + 1" )
#
def jac_mat( var_inter, pos_nodes )
    res := Mat[ type_promote(var_inter[0],pos_nodes[0][0],mul), Gen[ 1, 1 ] ]()
    R_0 := pos_nodes[5][0]; R_1 := pos_nodes[4][0]; R_2 := pos_nodes[3][0]; R_3 := pos_nodes[2][0];
    R_4 := pos_nodes[1][0]; R_5 := var_inter[0]; R_6 := (-15625.0/24.0)*R_5; R_6 = (6875.0/6.0)+R_6;
    R_6 = R_5*R_6; R_6 = -640.625+R_6; R_6 = R_5*R_6; R_6 = (1525.0/12.0)+R_6;
    R_6 = R_5*R_6; R_6 = -6.25+R_6; R_6 = R_0*R_6; R_0 = (15625.0/12.0)*R_5;
    R_0 = (-2500.0)+R_0; R_0 = R_5*R_0; R_0 = 1531.25+R_0; R_0 = R_5*R_0;
    R_0 = (-325.0)+R_0; R_0 = R_5*R_0; R_0 = (50.0/3.0)+R_0; R_0 = R_1*R_0;
    R_1 = (-15625.0/12.0)*R_5; R_1 = (8125.0/3.0)+R_1; R_1 = R_5*R_1; R_1 = -1843.75+R_1;
    R_1 = R_5*R_1; R_1 = (2675.0/6.0)+R_1; R_1 = R_5*R_1; R_1 = (-25.0)+R_1;
    R_1 = R_2*R_1; R_2 = (15625.0/24.0)*R_5; R_2 = (-4375.0/3.0)+R_2; R_2 = R_5*R_2;
    R_2 = 1109.38+R_2; R_2 = R_5*R_2; R_2 = (-1925.0/6.0)+R_2; R_2 = R_5*R_2;
    R_2 = 25.0+R_2; R_2 = R_3*R_2; R_3 = (3125.0/24.0)*R_5; R_3 = (-625.0/3.0)+R_3;
    R_3 = R_5*R_3; R_3 = 109.375+R_3; R_3 = R_5*R_3; R_3 = (-125.0/6.0)+R_3;
    R_3 = R_5*R_3; R_3 = 1.0+R_3; R_3 = R_4*R_3; R_4 = (-3125.0/24.0)*R_5;
    R_4 = 312.5+R_4; R_4 = R_5*R_4; R_4 = -265.625+R_4; R_4 = R_5*R_4;
    R_4 = 93.75+R_4; R_4 = R_5*R_4; R_4 = (-137.0/12.0)+R_4; R_5 = pos_nodes[0][0];
    R_4 = R_5*R_4; R_3 = R_4+R_3; R_2 = R_3+R_2; R_1 = R_2+R_1;
    R_0 = R_1+R_0; R_6 = R_0+R_6; res(0,0) = R_6; 
    return res
#
def jac( var_inter, pos_nodes )
    R_0 := pos_nodes[5][0]; R_1 := pos_nodes[4][0]; R_2 := pos_nodes[3][0]; R_3 := pos_nodes[2][0];
    R_4 := pos_nodes[1][0]; R_5 := var_inter[0]; R_6 := (-15625.0/24.0)*R_5; R_6 = (6875.0/6.0)+R_6;
    R_6 = R_5*R_6; R_6 = -640.625+R_6; R_6 = R_5*R_6; R_6 = (1525.0/12.0)+R_6;
    R_6 = R_5*R_6; R_6 = -6.25+R_6; R_6 = R_0*R_6; R_0 = (15625.0/12.0)*R_5;
    R_0 = (-2500.0)+R_0; R_0 = R_5*R_0; R_0 = 1531.25+R_0; R_0 = R_5*R_0;
    R_0 = (-325.0)+R_0; R_0 = R_5*R_0; R_0 = (50.0/3.0)+R_0; R_0 = R_1*R_0;
    R_1 = (-15625.0/12.0)*R_5; R_1 = (8125.0/3.0)+R_1; R_1 = R_5*R_1; R_1 = -1843.75+R_1;
    R_1 = R_5*R_1; R_1 = (2675.0/6.0)+R_1; R_1 = R_5*R_1; R_1 = (-25.0)+R_1;
    R_1 = R_2*R_1; R_2 = (15625.0/24.0)*R_5; R_2 = (-4375.0/3.0)+R_2; R_2 = R_5*R_2;
    R_2 = 1109.38+R_2; R_2 = R_5*R_2; R_2 = (-1925.0/6.0)+R_2; R_2 = R_5*R_2;
    R_2 = 25.0+R_2; R_2 = R_3*R_2; R_3 = (3125.0/24.0)*R_5; R_3 = (-625.0/3.0)+R_3;
    R_3 = R_5*R_3; R_3 = 109.375+R_3; R_3 = R_5*R_3; R_3 = (-125.0/6.0)+R_3;
    R_3 = R_5*R_3; R_3 = 1.0+R_3; R_3 = R_4*R_3; R_4 = (-3125.0/24.0)*R_5;
    R_4 = 312.5+R_4; R_4 = R_5*R_4; R_4 = -265.625+R_4; R_4 = R_5*R_4;
    R_4 = 93.75+R_4; R_4 = R_5*R_4; R_4 = (-137.0/12.0)+R_4; R_5 = pos_nodes[0][0];
    R_4 = R_5*R_4; R_3 = R_4+R_3; R_2 = R_3+R_2; R_1 = R_2+R_1;
    R_0 = R_1+R_0; R_6 = R_0+R_6; res := R_6; 
    return res
#
def inv_jac_mat( var_inter, pos_nodes )
    res := Mat[ type_promote(var_inter[0],pos_nodes[0][0],mul), Gen[ 1, 1 ] ]()
    R_0 := pos_nodes[5][0]; R_1 := pos_nodes[4][0]; R_2 := pos_nodes[3][0]; R_3 := pos_nodes[2][0];
    R_4 := pos_nodes[1][0]; R_5 := var_inter[0]; R_6 := (-15625.0/24.0)*R_5; R_6 = (6875.0/6.0)+R_6;
    R_6 = R_5*R_6; R_6 = -640.625+R_6; R_6 = R_5*R_6; R_6 = (1525.0/12.0)+R_6;
    R_6 = R_5*R_6; R_6 = -6.25+R_6; R_6 = R_0*R_6; R_0 = (15625.0/12.0)*R_5;
    R_0 = (-2500.0)+R_0; R_0 = R_5*R_0; R_0 = 1531.25+R_0; R_0 = R_5*R_0;
    R_0 = (-325.0)+R_0; R_0 = R_5*R_0; R_0 = (50.0/3.0)+R_0; R_0 = R_1*R_0;
    R_1 = (-15625.0/12.0)*R_5; R_1 = (8125.0/3.0)+R_1; R_1 = R_5*R_1; R_1 = -1843.75+R_1;
    R_1 = R_5*R_1; R_1 = (2675.0/6.0)+R_1; R_1 = R_5*R_1; R_1 = (-25.0)+R_1;
    R_1 = R_2*R_1; R_2 = (15625.0/24.0)*R_5; R_2 = (-4375.0/3.0)+R_2; R_2 = R_5*R_2;
    R_2 = 1109.38+R_2; R_2 = R_5*R_2; R_2 = (-1925.0/6.0)+R_2; R_2 = R_5*R_2;
    R_2 = 25.0+R_2; R_2 = R_3*R_2; R_3 = (3125.0/24.0)*R_5; R_3 = (-625.0/3.0)+R_3;
    R_3 = R_5*R_3; R_3 = 109.375+R_3; R_3 = R_5*R_3; R_3 = (-125.0/6.0)+R_3;
    R_3 = R_5*R_3; R_3 = 1.0+R_3; R_3 = R_4*R_3; R_4 = (-3125.0/24.0)*R_5;
    R_4 = 312.5+R_4; R_4 = R_5*R_4; R_4 = -265.625+R_4; R_4 = R_5*R_4;
    R_4 = 93.75+R_4; R_4 = R_5*R_4; R_4 = (-137.0/12.0)+R_4; R_5 = pos_nodes[0][0];
    R_4 = R_5*R_4; R_3 = R_4+R_3; R_2 = R_3+R_2; R_1 = R_2+R_1;
    R_0 = R_1+R_0; R_6 = R_0+R_6; R_6 = 1/R_6; res(0,0) = R_6;
    return res
#
def measure( var_inter, pos_nodes )
    R_0 := pos_nodes[0][0]; R_0 = (-1.0)*R_0; R_1 := pos_nodes[1][0]; R_0 = R_1+R_0;
    res := R_0; 
    return res
#
def barycenter( var_inter, pos_nodes )
    res := Vec[ type_promote(var_inter[0],pos_nodes[0][0],mul), 1 ]()
    R_0 := pos_nodes[1][0]; R_1 := (-1.0)*R_0; R_2 := pos_nodes[0][0]; R_3 := (-1.0)*R_2;
    R_3 = R_0+R_3; R_4 := (3.0/128.0)*R_3; R_3 = (-125.0/16.0)*R_3; R_0 = R_2+R_0;
    R_5 := (3.0/256.0)*R_0; R_6 := (625.0/12.0)*R_0; R_7 := (625.0/48.0)*R_0; R_8 := (-125.0/48.0)*R_0;
    R_0 = (-125.0/96.0)*R_0; R_1 = R_2+R_1; R_2 = 1/R_1; R_9 := (125.0/48.0)*R_1;
    R_10 := (-3.0/128.0)*R_1; R_11 := pos_nodes[3][0]; R_12 := (-1.0)*R_11; R_13 := pos_nodes[4][0];
    R_14 := (-1.0)*R_13; R_14 = R_11+R_14; R_15 := 265.625*R_14; R_15 = R_3+R_15;
    R_14 = (-375.0/64.0)*R_14; R_3 = R_10+R_14; R_11 = R_11+R_13; R_16 := (75.0/128.0)*R_11;
    R_17 := (625.0/6.0)*R_11; R_6 = R_17+R_6; R_17 = (625.0/24.0)*R_11; R_17 = R_7+R_17;
    R_7 = (-425.0/24.0)*R_11; R_7 = R_8+R_7; R_11 = (-425.0/48.0)*R_11; R_12 = R_13+R_12;
    R_13 = (-2125.0/24.0)*R_12; R_13 = R_9+R_13; R_12 = (375.0/64.0)*R_12; R_9 = pos_nodes[2][0];
    R_8 = (-1.0)*R_9; R_18 := pos_nodes[5][0]; R_19 := (-1.0)*R_18; R_19 = R_9+R_19;
    R_20 := (125.0/384.0)*R_19; R_20 = R_3+R_20; R_19 = (-1625.0/16.0)*R_19; R_19 = R_15+R_19;
    R_9 = R_18+R_9; R_15 = (-25.0/256.0)*R_9; R_5 = R_15+R_5; R_5 = R_16+R_5;
    R_5 = R_1*R_5; R_1 = -156.25*R_9; R_1 = R_6+R_1; R_1 = R_20*R_1;
    R_20 = (-625.0/16.0)*R_9; R_20 = R_17+R_20; R_17 = (325.0/16.0)*R_9; R_17 = R_7+R_17;
    R_9 = (325.0/32.0)*R_9; R_0 = R_9+R_0; R_11 = R_0+R_11; R_19 = R_11*R_19;
    R_8 = R_18+R_8; R_18 = (1625.0/48.0)*R_8; R_18 = R_13+R_18; R_18 = R_17*R_18;
    R_18 = R_19+R_18; R_8 = (-125.0/384.0)*R_8; R_19 = R_8+R_14; R_4 = R_19+R_4;
    R_20 = R_4*R_20; R_20 = R_18+R_20; R_1 = R_20+R_1; R_1 = (-1.0/80.0)*R_1;
    R_5 = R_1+R_5; R_1 = R_8+R_10; R_14 = R_1+R_14; R_14 = R_17*R_14;
    R_12 = R_8+R_12; R_10 = R_12+R_10; R_11 = R_10*R_11; R_14 = R_11+R_14;
    R_14 = (-1.0/12.0)*R_14; R_5 = R_14+R_5; R_2 = R_5*R_2; res[0] = R_2;
    return res
#
def inertia_operator_for_barycenter( var_inter, pos_nodes )
    R_0 := pos_nodes[1][0]; R_1 := (-1.0)*R_0; R_2 := pos_nodes[0][0]; R_3 := (-1.0)*R_2;
    R_3 = R_0+R_3; R_4 := (3125.0/24.0)*R_3; R_5 := (3.0/128.0)*R_3; R_3 = (-125.0/16.0)*R_3;
    R_0 = R_2+R_0; R_6 := (-125.0/24.0)*R_0; R_7 := (625.0/12.0)*R_0; R_8 := (625.0/48.0)*R_0;
    R_9 := (-125.0/48.0)*R_0; R_10 := (-125.0/96.0)*R_0; R_0 = (3.0/256.0)*R_0; R_1 = R_2+R_1;
    R_2 = 1/R_1; R_11 := (125.0/48.0)*R_1; R_12 := (-3.0/128.0)*R_1; R_13 := pos_nodes[3][0];
    R_14 := (-1.0)*R_13; R_15 := pos_nodes[4][0]; R_16 := (-1.0)*R_15; R_16 = R_13+R_16;
    R_17 := (-15625.0/12.0)*R_16; R_18 := 265.625*R_16; R_18 = R_3+R_18; R_16 = (-375.0/64.0)*R_16;
    R_3 = R_12+R_16; R_13 = R_13+R_15; R_19 := (-425.0/12.0)*R_13; R_20 := (625.0/6.0)*R_13;
    R_7 = R_20+R_7; R_20 = (625.0/24.0)*R_13; R_20 = R_8+R_20; R_8 = (-425.0/24.0)*R_13;
    R_8 = R_9+R_8; R_9 = (-425.0/48.0)*R_13; R_21 := R_10+R_9; R_13 = (75.0/128.0)*R_13;
    R_14 = R_15+R_14; R_15 = (-2125.0/24.0)*R_14; R_15 = R_11+R_15; R_14 = (375.0/64.0)*R_14;
    R_11 = pos_nodes[2][0]; R_22 := (-1.0)*R_11; R_23 := pos_nodes[5][0]; R_24 := (-1.0)*R_23;
    R_24 = R_11+R_24; R_25 := (125.0/384.0)*R_24; R_25 = R_3+R_25; R_3 = pow(R_25,2);
    R_24 = (-1625.0/16.0)*R_24; R_24 = R_18+R_24; R_11 = R_23+R_11; R_26 := 40.625*R_11;
    R_6 = R_26+R_6; R_19 = R_6+R_19; R_19 = R_19*R_25; R_6 = -156.25*R_11;
    R_6 = R_7+R_6; R_7 = R_25*R_6; R_26 = (-625.0/16.0)*R_11; R_26 = R_20+R_26;
    R_20 = (325.0/16.0)*R_11; R_20 = R_8+R_20; R_8 = (325.0/32.0)*R_11; R_21 = R_8+R_21;
    R_27 := R_21*R_25; R_28 := pow(R_21,2); R_10 = R_8+R_10; R_9 = R_10+R_9;
    R_24 = R_9*R_24; R_11 = (-25.0/256.0)*R_11; R_0 = R_11+R_0; R_11 = R_13+R_0;
    R_11 = R_1*R_11; R_22 = R_23+R_22; R_23 = (-15625.0/24.0)*R_22; R_17 = R_23+R_17;
    R_4 = R_17+R_4; R_17 = (1625.0/16.0)*R_22; R_18 = R_17+R_18; R_17 = (1625.0/48.0)*R_22;
    R_17 = R_15+R_17; R_15 = R_17*R_25; R_23 = R_20*R_17; R_23 = R_24+R_23;
    R_22 = (-125.0/384.0)*R_22; R_24 = R_22+R_16; R_5 = R_24+R_5; R_5 = R_5*R_26;
    R_5 = R_23+R_5; R_7 = R_5+R_7; R_7 = (-1.0/80.0)*R_7; R_11 = R_7+R_11;
    R_7 = R_22+R_12; R_16 = R_7+R_16; R_16 = R_20*R_16; R_14 = R_22+R_14;
    R_12 = R_14+R_12; R_9 = R_12*R_9; R_16 = R_9+R_16; R_16 = (-1.0/12.0)*R_16;
    R_11 = R_16+R_11; R_2 = R_11*R_2; R_2 = (-1.0)*R_2; R_2 = R_0+R_2;
    R_2 = R_13+R_2; R_25 = R_2*R_25; R_6 = R_25*R_6; R_17 = R_2*R_17;
    R_27 = R_17+R_27; R_27 = R_20*R_27; R_6 = R_27+R_6; R_6 = 2.0*R_6;
    R_26 = R_2*R_26; R_26 = R_15+R_26; R_26 = 2.0*R_26; R_28 = R_26+R_28;
    R_28 = R_12*R_28; R_26 = R_18*R_2; R_26 = R_19+R_26; R_26 = R_26*R_2;
    R_21 = R_2*R_21; R_21 = 2.0*R_21; R_21 = R_3+R_21; R_18 = R_18*R_21;
    R_18 = R_28+R_18; R_21 = R_12*R_21; R_26 = R_21+R_26; R_26 = (1.0/12.0)*R_26;
    R_2 = pow(R_2,2); R_4 = R_4*R_2; R_4 = R_18+R_4; R_6 = R_4+R_6;
    R_6 = (1.0/80.0)*R_6; R_2 = R_12*R_2; R_26 = R_2+R_26; R_6 = R_26+R_6;
    res := R_6; 
    return res
