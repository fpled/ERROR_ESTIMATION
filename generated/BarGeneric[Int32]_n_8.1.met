static const nvi := 1
static const nb_nodes := 9
static const nb_vertex_nodes := 2
static const center_of_var_inter := [ 1.0/2.0 ]
#
def interpolation( var_inter, val, interpolation_base )
    if interpolation_base == "lagrange"
        return (1+((59062.0/315.0+((34208.0/15.0+((53248.0/15.0+(131072.0/315.0*var_inter[0]-65536.0/35.0)*var_inter[0])*var_inter[0]-18432.0/5.0)*var_inter[0])*var_inter[0]-4272.0/5.0)*var_inter[0])*var_inter[0]-761.0/35.0)*var_inter[0])*val[0]+(64+((44672.0/9.0+((235520.0/9.0+((131072.0/9.0-1048576.0/315.0*var_inter[0])*var_inter[0]-1196032.0/45.0)*var_inter[0])*var_inter[0]-673792.0/45.0)*var_inter[0])*var_inter[0]-30784.0/35.0)*var_inter[0])*var_inter[0]*val[1]+val[2]*((9936.0/5.0+((1956992.0/45.0+((3915776.0/45.0+(524288.0/45.0*var_inter[0]-2228224.0/45.0)*var_inter[0])*var_inter[0]-733184.0/9.0)*var_inter[0])*var_inter[0]-587296.0/45.0)*var_inter[0])*var_inter[0]-112)*var_inter[0]+val[3]*(448.0/3.0+((102016.0/5.0+((145408+((1441792.0/15.0-1048576.0/45.0*var_inter[0])*var_inter[0]-2441216.0/15.0)*var_inter[0])*var_inter[0]-1097728.0/15.0)*var_inter[0])*var_inter[0]-128192.0/45.0)*var_inter[0])*var_inter[0]+val[4]*((2764+((703552.0/9.0+((1712128.0/9.0+(262144.0/9.0*var_inter[0]-1048576.0/9.0)*var_inter[0])*var_inter[0]-1466368.0/9.0)*var_inter[0])*var_inter[0]-186496.0/9.0)*var_inter[0])*var_inter[0]-140)*var_inter[0]+val[5]*(448.0/5.0+((626048.0/45.0+((5285888.0/45.0+((4063232.0/45.0-1048576.0/45.0*var_inter[0])*var_inter[0]-6406144.0/45.0)*var_inter[0])*var_inter[0]-2443264.0/45.0)*var_inter[0])*var_inter[0]-9024.0/5.0)*var_inter[0])*var_inter[0]+val[6]*((34288.0/45.0+((358784.0/15.0+((999424.0/15.0+(524288.0/45.0*var_inter[0]-131072.0/3.0)*var_inter[0])*var_inter[0]-53248)*var_inter[0])*var_inter[0]-5984)*var_inter[0])*var_inter[0]-112.0/3.0)*var_inter[0]+val[7]*(64.0/7.0+((67456.0/45.0+((124928.0/9.0+((3801088.0/315.0-1048576.0/315.0*var_inter[0])*var_inter[0]-802816.0/45.0)*var_inter[0])*var_inter[0]-274432.0/45.0)*var_inter[0])*var_inter[0]-6592.0/35.0)*var_inter[0])*var_inter[0]+val[8]*((726.0/35.0+((30944.0/45.0+((94208.0/45.0+(131072.0/315.0*var_inter[0]-65536.0/45.0)*var_inter[0])*var_inter[0]-14336.0/9.0)*var_inter[0])*var_inter[0]-7504.0/45.0)*var_inter[0])*var_inter[0]-1)*var_inter[0]
    else if interpolation_base == "hierarchical"
        return val[8]*var_inter[0]+val[7]*(64.0/7.0+((67456.0/45.0+((124928.0/9.0+((3801088.0/315.0-1048576.0/315.0*var_inter[0])*var_inter[0]-802816.0/45.0)*var_inter[0])*var_inter[0]-274432.0/45.0)*var_inter[0])*var_inter[0]-6592.0/35.0)*var_inter[0])*var_inter[0]+val[4]*((2764+((703552.0/9.0+((1712128.0/9.0+(262144.0/9.0*var_inter[0]-1048576.0/9.0)*var_inter[0])*var_inter[0]-1466368.0/9.0)*var_inter[0])*var_inter[0]-186496.0/9.0)*var_inter[0])*var_inter[0]-140)*var_inter[0]+val[3]*(448.0/3.0+((102016.0/5.0+((145408+((1441792.0/15.0-1048576.0/45.0*var_inter[0])*var_inter[0]-2441216.0/15.0)*var_inter[0])*var_inter[0]-1097728.0/15.0)*var_inter[0])*var_inter[0]-128192.0/45.0)*var_inter[0])*var_inter[0]+val[0]*(1-var_inter[0])+(64+((44672.0/9.0+((235520.0/9.0+((131072.0/9.0-1048576.0/315.0*var_inter[0])*var_inter[0]-1196032.0/45.0)*var_inter[0])*var_inter[0]-673792.0/45.0)*var_inter[0])*var_inter[0]-30784.0/35.0)*var_inter[0])*var_inter[0]*val[1]+val[2]*((9936.0/5.0+((1956992.0/45.0+((3915776.0/45.0+(524288.0/45.0*var_inter[0]-2228224.0/45.0)*var_inter[0])*var_inter[0]-733184.0/9.0)*var_inter[0])*var_inter[0]-587296.0/45.0)*var_inter[0])*var_inter[0]-112)*var_inter[0]+val[5]*(448.0/5.0+((626048.0/45.0+((5285888.0/45.0+((4063232.0/45.0-1048576.0/45.0*var_inter[0])*var_inter[0]-6406144.0/45.0)*var_inter[0])*var_inter[0]-2443264.0/45.0)*var_inter[0])*var_inter[0]-9024.0/5.0)*var_inter[0])*var_inter[0]+val[6]*((34288.0/45.0+((358784.0/15.0+((999424.0/15.0+(524288.0/45.0*var_inter[0]-131072.0/3.0)*var_inter[0])*var_inter[0]-53248)*var_inter[0])*var_inter[0]-5984)*var_inter[0])*var_inter[0]-112.0/3.0)*var_inter[0]

#
def generic_interpolation( var_inter, val, interpolation_base, deg ) when deg == 8
    if interpolation_base == "lagrange"
        return (64.0/7.0+((67456.0/45.0+((124928.0/9.0+((3801088.0/315.0-1048576.0/315.0*var_inter[0])*var_inter[0]-802816.0/45.0)*var_inter[0])*var_inter[0]-274432.0/45.0)*var_inter[0])*var_inter[0]-6592.0/35.0)*var_inter[0])*var_inter[0]*val[7]+val[5]*(448.0/5.0+((626048.0/45.0+((5285888.0/45.0+((4063232.0/45.0-1048576.0/45.0*var_inter[0])*var_inter[0]-6406144.0/45.0)*var_inter[0])*var_inter[0]-2443264.0/45.0)*var_inter[0])*var_inter[0]-9024.0/5.0)*var_inter[0])*var_inter[0]+(448.0/3.0+((102016.0/5.0+((145408+((1441792.0/15.0-1048576.0/45.0*var_inter[0])*var_inter[0]-2441216.0/15.0)*var_inter[0])*var_inter[0]-1097728.0/15.0)*var_inter[0])*var_inter[0]-128192.0/45.0)*var_inter[0])*var_inter[0]*val[3]+(1+((59062.0/315.0+((34208.0/15.0+((53248.0/15.0+(131072.0/315.0*var_inter[0]-65536.0/35.0)*var_inter[0])*var_inter[0]-18432.0/5.0)*var_inter[0])*var_inter[0]-4272.0/5.0)*var_inter[0])*var_inter[0]-761.0/35.0)*var_inter[0])*val[0]+(64+((44672.0/9.0+((235520.0/9.0+((131072.0/9.0-1048576.0/315.0*var_inter[0])*var_inter[0]-1196032.0/45.0)*var_inter[0])*var_inter[0]-673792.0/45.0)*var_inter[0])*var_inter[0]-30784.0/35.0)*var_inter[0])*var_inter[0]*val[1]+((9936.0/5.0+((1956992.0/45.0+((3915776.0/45.0+(524288.0/45.0*var_inter[0]-2228224.0/45.0)*var_inter[0])*var_inter[0]-733184.0/9.0)*var_inter[0])*var_inter[0]-587296.0/45.0)*var_inter[0])*var_inter[0]-112)*var_inter[0]*val[2]+val[4]*((2764+((703552.0/9.0+((1712128.0/9.0+(262144.0/9.0*var_inter[0]-1048576.0/9.0)*var_inter[0])*var_inter[0]-1466368.0/9.0)*var_inter[0])*var_inter[0]-186496.0/9.0)*var_inter[0])*var_inter[0]-140)*var_inter[0]+val[6]*((34288.0/45.0+((358784.0/15.0+((999424.0/15.0+(524288.0/45.0*var_inter[0]-131072.0/3.0)*var_inter[0])*var_inter[0]-53248)*var_inter[0])*var_inter[0]-5984)*var_inter[0])*var_inter[0]-112.0/3.0)*var_inter[0]+val[8]*((726.0/35.0+((30944.0/45.0+((94208.0/45.0+(131072.0/315.0*var_inter[0]-65536.0/45.0)*var_inter[0])*var_inter[0]-14336.0/9.0)*var_inter[0])*var_inter[0]-7504.0/45.0)*var_inter[0])*var_inter[0]-1)*var_inter[0]
    else if interpolation_base == "hierarchical"
        return (64.0/7.0+((67456.0/45.0+((124928.0/9.0+((3801088.0/315.0-1048576.0/315.0*var_inter[0])*var_inter[0]-802816.0/45.0)*var_inter[0])*var_inter[0]-274432.0/45.0)*var_inter[0])*var_inter[0]-6592.0/35.0)*var_inter[0])*var_inter[0]*val[7]+val[6]*((34288.0/45.0+((358784.0/15.0+((999424.0/15.0+(524288.0/45.0*var_inter[0]-131072.0/3.0)*var_inter[0])*var_inter[0]-53248)*var_inter[0])*var_inter[0]-5984)*var_inter[0])*var_inter[0]-112.0/3.0)*var_inter[0]+val[5]*(448.0/5.0+((626048.0/45.0+((5285888.0/45.0+((4063232.0/45.0-1048576.0/45.0*var_inter[0])*var_inter[0]-6406144.0/45.0)*var_inter[0])*var_inter[0]-2443264.0/45.0)*var_inter[0])*var_inter[0]-9024.0/5.0)*var_inter[0])*var_inter[0]+(448.0/3.0+((102016.0/5.0+((145408+((1441792.0/15.0-1048576.0/45.0*var_inter[0])*var_inter[0]-2441216.0/15.0)*var_inter[0])*var_inter[0]-1097728.0/15.0)*var_inter[0])*var_inter[0]-128192.0/45.0)*var_inter[0])*var_inter[0]*val[3]+((9936.0/5.0+((1956992.0/45.0+((3915776.0/45.0+(524288.0/45.0*var_inter[0]-2228224.0/45.0)*var_inter[0])*var_inter[0]-733184.0/9.0)*var_inter[0])*var_inter[0]-587296.0/45.0)*var_inter[0])*var_inter[0]-112)*var_inter[0]*val[2]+val[0]*(1-var_inter[0])+(64+((44672.0/9.0+((235520.0/9.0+((131072.0/9.0-1048576.0/315.0*var_inter[0])*var_inter[0]-1196032.0/45.0)*var_inter[0])*var_inter[0]-673792.0/45.0)*var_inter[0])*var_inter[0]-30784.0/35.0)*var_inter[0])*var_inter[0]*val[1]+val[4]*((2764+((703552.0/9.0+((1712128.0/9.0+(262144.0/9.0*var_inter[0]-1048576.0/9.0)*var_inter[0])*var_inter[0]-1466368.0/9.0)*var_inter[0])*var_inter[0]-186496.0/9.0)*var_inter[0])*var_inter[0]-140)*var_inter[0]+val[8]*var_inter[0]

#
def interpolation_vertex( var_inter, val_vertex )
    return val_vertex[0]*(1-var_inter[0])+val_vertex[1]*var_inter[0]
#
def nb_children( sub_nvi ) when sub_nvi==0
    return 1
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==0
    return child_var_inter
def type_child( sub_nvi, num_child ) when sub_nvi==0
    return BarGeneric[Int32]
def node_number_child( sub_nvi, num_child ) when sub_nvi==0
    return 0 .. 9
#
def nb_children( sub_nvi ) when sub_nvi==1
    return 2
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==0
    return [0]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return [0]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==1
    return [1]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return [8]
def normal( var_inter, pos_nodes )
    assert( 0, "normal is defined only for nb_dim == nvi + 1" )
#
def jac_mat( var_inter, pos_nodes )
    res := Mat[ type_promote(var_inter[0],pos_nodes[0][0],mul), Gen[ 1, 1 ] ]()
    R_0 := pos_nodes[8][0]; R_1 := pos_nodes[7][0]; R_2 := pos_nodes[4][0]; R_3 := pos_nodes[2][0];
    R_4 := pos_nodes[1][0]; R_5 := pos_nodes[0][0]; R_6 := pos_nodes[3][0]; R_7 := pos_nodes[5][0];
    R_8 := var_inter[0]; R_9 := (2097152.0/9.0)*R_8; R_9 = (-7340032.0/9.0)+R_9; R_9 = R_8*R_9;
    R_9 = (3424256.0/3.0)+R_9; R_9 = R_8*R_9; R_9 = (-7331840.0/9.0)+R_9; R_9 = R_8*R_9;
    R_9 = (2814208.0/9.0)+R_9; R_9 = R_8*R_9; R_9 = (-186496.0/3.0)+R_9; R_9 = R_8*R_9;
    R_9 = 5528.0+R_9; R_9 = R_8*R_9; R_9 = (-140.0)+R_9; R_9 = R_2*R_9;
    R_2 = (-8388608.0/315.0)*R_8; R_10 := (3801088.0/45.0)+R_2; R_10 = R_8*R_10; R_10 = (-1605632.0/15.0)+R_10;
    R_10 = R_8*R_10; R_10 = (624640.0/9.0)+R_10; R_10 = R_8*R_10; R_10 = (-1097728.0/45.0)+R_10;
    R_10 = R_8*R_10; R_10 = (67456.0/15.0)+R_10; R_10 = R_8*R_10; R_10 = (-13184.0/35.0)+R_10;
    R_10 = R_8*R_10; R_10 = (64.0/7.0)+R_10; R_10 = R_1*R_10; R_2 = (917504.0/9.0)+R_2;
    R_2 = R_8*R_2; R_2 = (-2392064.0/15.0)+R_2; R_2 = R_8*R_2; R_2 = (1177600.0/9.0)+R_2;
    R_2 = R_8*R_2; R_2 = (-2695168.0/45.0)+R_2; R_2 = R_8*R_2; R_2 = (44672.0/3.0)+R_2;
    R_2 = R_8*R_2; R_2 = (-61568.0/35.0)+R_2; R_2 = R_8*R_2; R_2 = 64.0+R_2;
    R_2 = R_4*R_2; R_4 = (1048576.0/315.0)*R_8; R_1 = (-458752.0/45.0)+R_4; R_1 = R_8*R_1;
    R_1 = (188416.0/15.0)+R_1; R_1 = R_8*R_1; R_1 = (-71680.0/9.0)+R_1; R_1 = R_8*R_1;
    R_1 = (123776.0/45.0)+R_1; R_1 = R_8*R_1; R_1 = (-7504.0/15.0)+R_1; R_1 = R_8*R_1;
    R_1 = (1452.0/35.0)+R_1; R_1 = R_8*R_1; R_1 = (-1.0)+R_1; R_1 = R_0*R_1;
    R_4 = (-65536.0/5.0)+R_4; R_4 = R_8*R_4; R_4 = (106496.0/5.0)+R_4; R_4 = R_8*R_4;
    R_4 = (-18432.0)+R_4; R_4 = R_8*R_4; R_4 = (136832.0/15.0)+R_4; R_4 = R_8*R_4;
    R_4 = (-12816.0/5.0)+R_4; R_4 = R_8*R_4; R_4 = (118124.0/315.0)+R_4; R_4 = R_8*R_4;
    R_4 = (-761.0/35.0)+R_4; R_4 = R_5*R_4; R_2 = R_4+R_2; R_4 = (-8388608.0/45.0)*R_8;
    R_5 = (10092544.0/15.0)+R_4; R_5 = R_8*R_5; R_5 = (-4882432.0/5.0)+R_5; R_5 = R_8*R_5;
    R_5 = 727040.0+R_5; R_5 = R_8*R_5; R_5 = (-4390912.0/15.0)+R_5; R_5 = R_8*R_5;
    R_5 = (306048.0/5.0)+R_5; R_5 = R_8*R_5; R_5 = (-256384.0/45.0)+R_5; R_5 = R_8*R_5;
    R_5 = (448.0/3.0)+R_5; R_5 = R_6*R_5; R_4 = (28442624.0/45.0)+R_4; R_4 = R_8*R_4;
    R_4 = (-12812288.0/15.0)+R_4; R_4 = R_8*R_4; R_4 = (5285888.0/9.0)+R_4; R_4 = R_8*R_4;
    R_4 = (-9773056.0/45.0)+R_4; R_4 = R_8*R_4; R_4 = (626048.0/15.0)+R_4; R_4 = R_8*R_4;
    R_4 = (-18048.0/5.0)+R_4; R_4 = R_8*R_4; R_4 = (448.0/5.0)+R_4; R_4 = R_7*R_4;
    R_7 = (4194304.0/45.0)*R_8; R_6 = (-15597568.0/45.0)+R_7; R_6 = R_8*R_6; R_6 = (7831552.0/15.0)+R_6;
    R_6 = R_8*R_6; R_6 = (-3665920.0/9.0)+R_6; R_6 = R_8*R_6; R_6 = (7827968.0/45.0)+R_6;
    R_6 = R_8*R_6; R_6 = (-587296.0/15.0)+R_6; R_6 = R_8*R_6; R_6 = (19872.0/5.0)+R_6;
    R_6 = R_8*R_6; R_6 = (-112.0)+R_6; R_6 = R_3*R_6; R_6 = R_2+R_6;
    R_6 = R_5+R_6; R_9 = R_6+R_9; R_9 = R_4+R_9; R_7 = (-917504.0/3.0)+R_7;
    R_7 = R_8*R_7; R_7 = (1998848.0/5.0)+R_7; R_7 = R_8*R_7; R_7 = (-266240.0)+R_7;
    R_7 = R_8*R_7; R_7 = (1435136.0/15.0)+R_7; R_7 = R_8*R_7; R_7 = (-17952.0)+R_7;
    R_7 = R_8*R_7; R_7 = (68576.0/45.0)+R_7; R_7 = R_8*R_7; R_7 = (-112.0/3.0)+R_7;
    R_8 = pos_nodes[6][0]; R_7 = R_8*R_7; R_9 = R_7+R_9; R_10 = R_9+R_10;
    R_1 = R_10+R_1; res(0,0) = R_1; 
    return res
#
def jac( var_inter, pos_nodes )
    R_0 := pos_nodes[8][0]; R_1 := pos_nodes[7][0]; R_2 := pos_nodes[4][0]; R_3 := pos_nodes[2][0];
    R_4 := pos_nodes[1][0]; R_5 := pos_nodes[0][0]; R_6 := pos_nodes[3][0]; R_7 := pos_nodes[5][0];
    R_8 := var_inter[0]; R_9 := (2097152.0/9.0)*R_8; R_9 = (-7340032.0/9.0)+R_9; R_9 = R_8*R_9;
    R_9 = (3424256.0/3.0)+R_9; R_9 = R_8*R_9; R_9 = (-7331840.0/9.0)+R_9; R_9 = R_8*R_9;
    R_9 = (2814208.0/9.0)+R_9; R_9 = R_8*R_9; R_9 = (-186496.0/3.0)+R_9; R_9 = R_8*R_9;
    R_9 = 5528.0+R_9; R_9 = R_8*R_9; R_9 = (-140.0)+R_9; R_9 = R_2*R_9;
    R_2 = (-8388608.0/315.0)*R_8; R_10 := (3801088.0/45.0)+R_2; R_10 = R_8*R_10; R_10 = (-1605632.0/15.0)+R_10;
    R_10 = R_8*R_10; R_10 = (624640.0/9.0)+R_10; R_10 = R_8*R_10; R_10 = (-1097728.0/45.0)+R_10;
    R_10 = R_8*R_10; R_10 = (67456.0/15.0)+R_10; R_10 = R_8*R_10; R_10 = (-13184.0/35.0)+R_10;
    R_10 = R_8*R_10; R_10 = (64.0/7.0)+R_10; R_10 = R_1*R_10; R_2 = (917504.0/9.0)+R_2;
    R_2 = R_8*R_2; R_2 = (-2392064.0/15.0)+R_2; R_2 = R_8*R_2; R_2 = (1177600.0/9.0)+R_2;
    R_2 = R_8*R_2; R_2 = (-2695168.0/45.0)+R_2; R_2 = R_8*R_2; R_2 = (44672.0/3.0)+R_2;
    R_2 = R_8*R_2; R_2 = (-61568.0/35.0)+R_2; R_2 = R_8*R_2; R_2 = 64.0+R_2;
    R_2 = R_4*R_2; R_4 = (1048576.0/315.0)*R_8; R_1 = (-458752.0/45.0)+R_4; R_1 = R_8*R_1;
    R_1 = (188416.0/15.0)+R_1; R_1 = R_8*R_1; R_1 = (-71680.0/9.0)+R_1; R_1 = R_8*R_1;
    R_1 = (123776.0/45.0)+R_1; R_1 = R_8*R_1; R_1 = (-7504.0/15.0)+R_1; R_1 = R_8*R_1;
    R_1 = (1452.0/35.0)+R_1; R_1 = R_8*R_1; R_1 = (-1.0)+R_1; R_1 = R_0*R_1;
    R_4 = (-65536.0/5.0)+R_4; R_4 = R_8*R_4; R_4 = (106496.0/5.0)+R_4; R_4 = R_8*R_4;
    R_4 = (-18432.0)+R_4; R_4 = R_8*R_4; R_4 = (136832.0/15.0)+R_4; R_4 = R_8*R_4;
    R_4 = (-12816.0/5.0)+R_4; R_4 = R_8*R_4; R_4 = (118124.0/315.0)+R_4; R_4 = R_8*R_4;
    R_4 = (-761.0/35.0)+R_4; R_4 = R_5*R_4; R_2 = R_4+R_2; R_4 = (-8388608.0/45.0)*R_8;
    R_5 = (10092544.0/15.0)+R_4; R_5 = R_8*R_5; R_5 = (-4882432.0/5.0)+R_5; R_5 = R_8*R_5;
    R_5 = 727040.0+R_5; R_5 = R_8*R_5; R_5 = (-4390912.0/15.0)+R_5; R_5 = R_8*R_5;
    R_5 = (306048.0/5.0)+R_5; R_5 = R_8*R_5; R_5 = (-256384.0/45.0)+R_5; R_5 = R_8*R_5;
    R_5 = (448.0/3.0)+R_5; R_5 = R_6*R_5; R_4 = (28442624.0/45.0)+R_4; R_4 = R_8*R_4;
    R_4 = (-12812288.0/15.0)+R_4; R_4 = R_8*R_4; R_4 = (5285888.0/9.0)+R_4; R_4 = R_8*R_4;
    R_4 = (-9773056.0/45.0)+R_4; R_4 = R_8*R_4; R_4 = (626048.0/15.0)+R_4; R_4 = R_8*R_4;
    R_4 = (-18048.0/5.0)+R_4; R_4 = R_8*R_4; R_4 = (448.0/5.0)+R_4; R_4 = R_7*R_4;
    R_7 = (4194304.0/45.0)*R_8; R_6 = (-15597568.0/45.0)+R_7; R_6 = R_8*R_6; R_6 = (7831552.0/15.0)+R_6;
    R_6 = R_8*R_6; R_6 = (-3665920.0/9.0)+R_6; R_6 = R_8*R_6; R_6 = (7827968.0/45.0)+R_6;
    R_6 = R_8*R_6; R_6 = (-587296.0/15.0)+R_6; R_6 = R_8*R_6; R_6 = (19872.0/5.0)+R_6;
    R_6 = R_8*R_6; R_6 = (-112.0)+R_6; R_6 = R_3*R_6; R_6 = R_2+R_6;
    R_6 = R_5+R_6; R_9 = R_6+R_9; R_9 = R_4+R_9; R_7 = (-917504.0/3.0)+R_7;
    R_7 = R_8*R_7; R_7 = (1998848.0/5.0)+R_7; R_7 = R_8*R_7; R_7 = (-266240.0)+R_7;
    R_7 = R_8*R_7; R_7 = (1435136.0/15.0)+R_7; R_7 = R_8*R_7; R_7 = (-17952.0)+R_7;
    R_7 = R_8*R_7; R_7 = (68576.0/45.0)+R_7; R_7 = R_8*R_7; R_7 = (-112.0/3.0)+R_7;
    R_8 = pos_nodes[6][0]; R_7 = R_8*R_7; R_9 = R_7+R_9; R_10 = R_9+R_10;
    R_1 = R_10+R_1; res := R_1; 
    return res
#
def inv_jac_mat( var_inter, pos_nodes )
    res := Mat[ type_promote(var_inter[0],pos_nodes[0][0],mul), Gen[ 1, 1 ] ]()
    R_0 := pos_nodes[8][0]; R_1 := pos_nodes[7][0]; R_2 := pos_nodes[4][0]; R_3 := pos_nodes[2][0];
    R_4 := pos_nodes[1][0]; R_5 := pos_nodes[0][0]; R_6 := pos_nodes[3][0]; R_7 := pos_nodes[5][0];
    R_8 := var_inter[0]; R_9 := (2097152.0/9.0)*R_8; R_9 = (-7340032.0/9.0)+R_9; R_9 = R_8*R_9;
    R_9 = (3424256.0/3.0)+R_9; R_9 = R_8*R_9; R_9 = (-7331840.0/9.0)+R_9; R_9 = R_8*R_9;
    R_9 = (2814208.0/9.0)+R_9; R_9 = R_8*R_9; R_9 = (-186496.0/3.0)+R_9; R_9 = R_8*R_9;
    R_9 = 5528.0+R_9; R_9 = R_8*R_9; R_9 = (-140.0)+R_9; R_9 = R_2*R_9;
    R_2 = (-8388608.0/315.0)*R_8; R_10 := (3801088.0/45.0)+R_2; R_10 = R_8*R_10; R_10 = (-1605632.0/15.0)+R_10;
    R_10 = R_8*R_10; R_10 = (624640.0/9.0)+R_10; R_10 = R_8*R_10; R_10 = (-1097728.0/45.0)+R_10;
    R_10 = R_8*R_10; R_10 = (67456.0/15.0)+R_10; R_10 = R_8*R_10; R_10 = (-13184.0/35.0)+R_10;
    R_10 = R_8*R_10; R_10 = (64.0/7.0)+R_10; R_10 = R_1*R_10; R_2 = (917504.0/9.0)+R_2;
    R_2 = R_8*R_2; R_2 = (-2392064.0/15.0)+R_2; R_2 = R_8*R_2; R_2 = (1177600.0/9.0)+R_2;
    R_2 = R_8*R_2; R_2 = (-2695168.0/45.0)+R_2; R_2 = R_8*R_2; R_2 = (44672.0/3.0)+R_2;
    R_2 = R_8*R_2; R_2 = (-61568.0/35.0)+R_2; R_2 = R_8*R_2; R_2 = 64.0+R_2;
    R_2 = R_4*R_2; R_4 = (1048576.0/315.0)*R_8; R_1 = (-458752.0/45.0)+R_4; R_1 = R_8*R_1;
    R_1 = (188416.0/15.0)+R_1; R_1 = R_8*R_1; R_1 = (-71680.0/9.0)+R_1; R_1 = R_8*R_1;
    R_1 = (123776.0/45.0)+R_1; R_1 = R_8*R_1; R_1 = (-7504.0/15.0)+R_1; R_1 = R_8*R_1;
    R_1 = (1452.0/35.0)+R_1; R_1 = R_8*R_1; R_1 = (-1.0)+R_1; R_1 = R_0*R_1;
    R_4 = (-65536.0/5.0)+R_4; R_4 = R_8*R_4; R_4 = (106496.0/5.0)+R_4; R_4 = R_8*R_4;
    R_4 = (-18432.0)+R_4; R_4 = R_8*R_4; R_4 = (136832.0/15.0)+R_4; R_4 = R_8*R_4;
    R_4 = (-12816.0/5.0)+R_4; R_4 = R_8*R_4; R_4 = (118124.0/315.0)+R_4; R_4 = R_8*R_4;
    R_4 = (-761.0/35.0)+R_4; R_4 = R_5*R_4; R_2 = R_4+R_2; R_4 = (-8388608.0/45.0)*R_8;
    R_5 = (10092544.0/15.0)+R_4; R_5 = R_8*R_5; R_5 = (-4882432.0/5.0)+R_5; R_5 = R_8*R_5;
    R_5 = 727040.0+R_5; R_5 = R_8*R_5; R_5 = (-4390912.0/15.0)+R_5; R_5 = R_8*R_5;
    R_5 = (306048.0/5.0)+R_5; R_5 = R_8*R_5; R_5 = (-256384.0/45.0)+R_5; R_5 = R_8*R_5;
    R_5 = (448.0/3.0)+R_5; R_5 = R_6*R_5; R_4 = (28442624.0/45.0)+R_4; R_4 = R_8*R_4;
    R_4 = (-12812288.0/15.0)+R_4; R_4 = R_8*R_4; R_4 = (5285888.0/9.0)+R_4; R_4 = R_8*R_4;
    R_4 = (-9773056.0/45.0)+R_4; R_4 = R_8*R_4; R_4 = (626048.0/15.0)+R_4; R_4 = R_8*R_4;
    R_4 = (-18048.0/5.0)+R_4; R_4 = R_8*R_4; R_4 = (448.0/5.0)+R_4; R_4 = R_7*R_4;
    R_7 = (4194304.0/45.0)*R_8; R_6 = (-15597568.0/45.0)+R_7; R_6 = R_8*R_6; R_6 = (7831552.0/15.0)+R_6;
    R_6 = R_8*R_6; R_6 = (-3665920.0/9.0)+R_6; R_6 = R_8*R_6; R_6 = (7827968.0/45.0)+R_6;
    R_6 = R_8*R_6; R_6 = (-587296.0/15.0)+R_6; R_6 = R_8*R_6; R_6 = (19872.0/5.0)+R_6;
    R_6 = R_8*R_6; R_6 = (-112.0)+R_6; R_6 = R_3*R_6; R_6 = R_2+R_6;
    R_6 = R_5+R_6; R_9 = R_6+R_9; R_9 = R_4+R_9; R_7 = (-917504.0/3.0)+R_7;
    R_7 = R_8*R_7; R_7 = (1998848.0/5.0)+R_7; R_7 = R_8*R_7; R_7 = (-266240.0)+R_7;
    R_7 = R_8*R_7; R_7 = (1435136.0/15.0)+R_7; R_7 = R_8*R_7; R_7 = (-17952.0)+R_7;
    R_7 = R_8*R_7; R_7 = (68576.0/45.0)+R_7; R_7 = R_8*R_7; R_7 = (-112.0/3.0)+R_7;
    R_8 = pos_nodes[6][0]; R_7 = R_8*R_7; R_9 = R_7+R_9; R_10 = R_9+R_10;
    R_1 = R_10+R_1; R_1 = 1/R_1; res(0,0) = R_1; 
    return res
#
def measure( var_inter, pos_nodes )
    R_0 := pos_nodes[2][0]; R_0 = (2048.0/45.0)*R_0; R_1 := pos_nodes[3][0]; R_1 = (-2048.0/45.0)*R_1;
    R_2 := pos_nodes[5][0]; R_2 = (2048.0/45.0)*R_2; R_3 := pos_nodes[7][0]; R_3 = (2048.0/105.0)*R_3;
    R_4 := pos_nodes[6][0]; R_4 = (-2048.0/45.0)*R_4; R_3 = R_4+R_3; R_4 = pos_nodes[8][0];
    R_4 = (-709.0/315.0)*R_4; R_3 = R_4+R_3; R_2 = R_3+R_2; R_1 = R_2+R_1;
    R_2 = pos_nodes[0][0]; R_2 = (709.0/315.0)*R_2; R_1 = R_2+R_1; R_0 = R_1+R_0;
    R_1 = pos_nodes[1][0]; R_1 = (-2048.0/105.0)*R_1; R_0 = R_1+R_0; res := R_0;
    return res
