static const nvi := 1
static const nb_nodes := 7
static const nb_vertex_nodes := 2
static const center_of_var_inter := [ 1.0/2.0 ]
#
def interpolation( var_inter, val, interpolation_base )
    if interpolation_base == "lagrange"
        return val[4]*(40+((2232+((3888-1296*var_inter[0])*var_inter[0]-4356)*var_inter[0])*var_inter[0]-508)*var_inter[0])*var_inter[0]+(1+((406.0/5.0+((315+(324.0/5.0*var_inter[0]-1134.0/5.0)*var_inter[0])*var_inter[0]-441.0/2.0)*var_inter[0])*var_inter[0]-147.0/10.0)*var_inter[0])*val[0]+((137.0/10.0+((153+(324.0/5.0*var_inter[0]-162)*var_inter[0])*var_inter[0]-135.0/2.0)*var_inter[0])*var_inter[0]-1)*var_inter[0]*val[1]+(36+((1044+((1296-1944.0/5.0*var_inter[0])*var_inter[0]-1674)*var_inter[0])*var_inter[0]-1566.0/5.0)*var_inter[0])*var_inter[0]*val[2]+((1053.0/2.0+((3699+(972*var_inter[0]-3078)*var_inter[0])*var_inter[0]-4149.0/2.0)*var_inter[0])*var_inter[0]-45)*var_inter[0]*val[3]+((297+((2889+(972*var_inter[0]-2754)*var_inter[0])*var_inter[0]-2763.0/2.0)*var_inter[0])*var_inter[0]-45.0/2.0)*var_inter[0]*val[5]+val[6]*(36.0/5.0+((468+((5184.0/5.0-1944.0/5.0*var_inter[0])*var_inter[0]-1026)*var_inter[0])*var_inter[0]-486.0/5.0)*var_inter[0])*var_inter[0]
    else if interpolation_base == "hierarchical"
        return val[4]*(40+((2232+((3888-1296*var_inter[0])*var_inter[0]-4356)*var_inter[0])*var_inter[0]-508)*var_inter[0])*var_inter[0]+((1053.0/2.0+((3699+(972*var_inter[0]-3078)*var_inter[0])*var_inter[0]-4149.0/2.0)*var_inter[0])*var_inter[0]-45)*var_inter[0]*val[3]+val[1]*var_inter[0]+val[0]*(1-var_inter[0])+(36+((1044+((1296-1944.0/5.0*var_inter[0])*var_inter[0]-1674)*var_inter[0])*var_inter[0]-1566.0/5.0)*var_inter[0])*var_inter[0]*val[2]+((297+((2889+(972*var_inter[0]-2754)*var_inter[0])*var_inter[0]-2763.0/2.0)*var_inter[0])*var_inter[0]-45.0/2.0)*var_inter[0]*val[5]+val[6]*(36.0/5.0+((468+((5184.0/5.0-1944.0/5.0*var_inter[0])*var_inter[0]-1026)*var_inter[0])*var_inter[0]-486.0/5.0)*var_inter[0])*var_inter[0]

#
def generic_interpolation( var_inter, val, interpolation_base, deg ) when deg == 6
    if interpolation_base == "lagrange"
        return (1+((406.0/5.0+((315+(324.0/5.0*var_inter[0]-1134.0/5.0)*var_inter[0])*var_inter[0]-441.0/2.0)*var_inter[0])*var_inter[0]-147.0/10.0)*var_inter[0])*val[0]+(36+((1044+((1296-1944.0/5.0*var_inter[0])*var_inter[0]-1674)*var_inter[0])*var_inter[0]-1566.0/5.0)*var_inter[0])*var_inter[0]*val[1]+((1053.0/2.0+((3699+(972*var_inter[0]-3078)*var_inter[0])*var_inter[0]-4149.0/2.0)*var_inter[0])*var_inter[0]-45)*var_inter[0]*val[2]+(40+((2232+((3888-1296*var_inter[0])*var_inter[0]-4356)*var_inter[0])*var_inter[0]-508)*var_inter[0])*var_inter[0]*val[3]+((297+((2889+(972*var_inter[0]-2754)*var_inter[0])*var_inter[0]-2763.0/2.0)*var_inter[0])*var_inter[0]-45.0/2.0)*var_inter[0]*val[4]+(36.0/5.0+((468+((5184.0/5.0-1944.0/5.0*var_inter[0])*var_inter[0]-1026)*var_inter[0])*var_inter[0]-486.0/5.0)*var_inter[0])*var_inter[0]*val[5]+val[6]*((137.0/10.0+((153+(324.0/5.0*var_inter[0]-162)*var_inter[0])*var_inter[0]-135.0/2.0)*var_inter[0])*var_inter[0]-1)*var_inter[0]
    else if interpolation_base == "hierarchical"
        return val[6]*var_inter[0]+((297+((2889+(972*var_inter[0]-2754)*var_inter[0])*var_inter[0]-2763.0/2.0)*var_inter[0])*var_inter[0]-45.0/2.0)*var_inter[0]*val[4]+(40+((2232+((3888-1296*var_inter[0])*var_inter[0]-4356)*var_inter[0])*var_inter[0]-508)*var_inter[0])*var_inter[0]*val[3]+((1053.0/2.0+((3699+(972*var_inter[0]-3078)*var_inter[0])*var_inter[0]-4149.0/2.0)*var_inter[0])*var_inter[0]-45)*var_inter[0]*val[2]+val[0]*(1-var_inter[0])+(36+((1044+((1296-1944.0/5.0*var_inter[0])*var_inter[0]-1674)*var_inter[0])*var_inter[0]-1566.0/5.0)*var_inter[0])*var_inter[0]*val[1]+(36.0/5.0+((468+((5184.0/5.0-1944.0/5.0*var_inter[0])*var_inter[0]-1026)*var_inter[0])*var_inter[0]-486.0/5.0)*var_inter[0])*var_inter[0]*val[5]

#
def generic_interpolation( var_inter, val, interpolation_base, deg ) when deg == 7
    if interpolation_base == "lagrange"
        return val[5]*(147.0/5.0+((45962.0/15.0+((1159683.0/80.0+(823543.0/240.0*var_inter[0]-2705927.0/240.0)*var_inter[0])*var_inter[0]-444185.0/48.0)*var_inter[0])*var_inter[0]-9849.0/20.0)*var_inter[0])*var_inter[0]+val[4]*((2009.0/2.0+((52822.0/3.0+((117649.0/6.0-823543.0/144.0*var_inter[0])*var_inter[0]-1899191.0/72.0)*var_inter[0])*var_inter[0]-872935.0/144.0)*var_inter[0])*var_inter[0]-245.0/4.0)*var_inter[0]+val[3]*(245.0/3.0+((133427.0/18.0+((4151329.0/144.0+(823543.0/144.0*var_inter[0]-2941225.0/144.0)*var_inter[0])*var_inter[0]-2926819.0/144.0)*var_inter[0])*var_inter[0]-46501.0/36.0)*var_inter[0])*var_inter[0]+val[0]*(1+((22981.0/180.0+((16807.0/18.0+((117649.0/180.0-117649.0/720.0*var_inter[0])*var_inter[0]-386561.0/360.0)*var_inter[0])*var_inter[0]-331681.0/720.0)*var_inter[0])*var_inter[0]-363.0/20.0)*var_inter[0])+(49+((109417.0/45.0+((991613.0/144.0+(823543.0/720.0*var_inter[0]-352947.0/80.0)*var_inter[0])*var_inter[0]-88837.0/16.0)*var_inter[0])*var_inter[0]-10927.0/20.0)*var_inter[0])*var_inter[0]*val[1]+val[2]*((43071.0/40.0+((170471.0/12.0+((1529437.0/120.0-823543.0/240.0*var_inter[0])*var_inter[0]-151263.0/8.0)*var_inter[0])*var_inter[0]-1347647.0/240.0)*var_inter[0])*var_inter[0]-147.0/2.0)*var_inter[0]+val[6]*((49931.0/360.0+((98441.0/36.0+((1294139.0/360.0-823543.0/720.0*var_inter[0])*var_inter[0]-319333.0/72.0)*var_inter[0])*var_inter[0]-634207.0/720.0)*var_inter[0])*var_inter[0]-49.0/6.0)*var_inter[0]+val[7]*(1+((9947.0/90.0+((84035.0/144.0+(117649.0/720.0*var_inter[0]-117649.0/240.0)*var_inter[0])*var_inter[0]-16807.0/48.0)*var_inter[0])*var_inter[0]-343.0/20.0)*var_inter[0])*var_inter[0]
    else if interpolation_base == "hierarchical"
        return val[7]*var_inter[0]+val[6]*((49931.0/360.0+((98441.0/36.0+((1294139.0/360.0-823543.0/720.0*var_inter[0])*var_inter[0]-319333.0/72.0)*var_inter[0])*var_inter[0]-634207.0/720.0)*var_inter[0])*var_inter[0]-49.0/6.0)*var_inter[0]+val[5]*(147.0/5.0+((45962.0/15.0+((1159683.0/80.0+(823543.0/240.0*var_inter[0]-2705927.0/240.0)*var_inter[0])*var_inter[0]-444185.0/48.0)*var_inter[0])*var_inter[0]-9849.0/20.0)*var_inter[0])*var_inter[0]+val[4]*((2009.0/2.0+((52822.0/3.0+((117649.0/6.0-823543.0/144.0*var_inter[0])*var_inter[0]-1899191.0/72.0)*var_inter[0])*var_inter[0]-872935.0/144.0)*var_inter[0])*var_inter[0]-245.0/4.0)*var_inter[0]+val[3]*(245.0/3.0+((133427.0/18.0+((4151329.0/144.0+(823543.0/144.0*var_inter[0]-2941225.0/144.0)*var_inter[0])*var_inter[0]-2926819.0/144.0)*var_inter[0])*var_inter[0]-46501.0/36.0)*var_inter[0])*var_inter[0]+val[2]*((43071.0/40.0+((170471.0/12.0+((1529437.0/120.0-823543.0/240.0*var_inter[0])*var_inter[0]-151263.0/8.0)*var_inter[0])*var_inter[0]-1347647.0/240.0)*var_inter[0])*var_inter[0]-147.0/2.0)*var_inter[0]+(49+((109417.0/45.0+((991613.0/144.0+(823543.0/720.0*var_inter[0]-352947.0/80.0)*var_inter[0])*var_inter[0]-88837.0/16.0)*var_inter[0])*var_inter[0]-10927.0/20.0)*var_inter[0])*var_inter[0]*val[1]+val[0]*(1-var_inter[0])

#
def generic_interpolation( var_inter, val, interpolation_base, deg ) when deg == 8
    if interpolation_base == "lagrange"
        return val[8]*((726.0/35.0+((30944.0/45.0+((94208.0/45.0+(131072.0/315.0*var_inter[0]-65536.0/45.0)*var_inter[0])*var_inter[0]-14336.0/9.0)*var_inter[0])*var_inter[0]-7504.0/45.0)*var_inter[0])*var_inter[0]-1)*var_inter[0]+((34288.0/45.0+((358784.0/15.0+((999424.0/15.0+(524288.0/45.0*var_inter[0]-131072.0/3.0)*var_inter[0])*var_inter[0]-53248)*var_inter[0])*var_inter[0]-5984)*var_inter[0])*var_inter[0]-112.0/3.0)*var_inter[0]*val[6]+val[5]*(448.0/5.0+((626048.0/45.0+((5285888.0/45.0+((4063232.0/45.0-1048576.0/45.0*var_inter[0])*var_inter[0]-6406144.0/45.0)*var_inter[0])*var_inter[0]-2443264.0/45.0)*var_inter[0])*var_inter[0]-9024.0/5.0)*var_inter[0])*var_inter[0]+((9936.0/5.0+((1956992.0/45.0+((3915776.0/45.0+(524288.0/45.0*var_inter[0]-2228224.0/45.0)*var_inter[0])*var_inter[0]-733184.0/9.0)*var_inter[0])*var_inter[0]-587296.0/45.0)*var_inter[0])*var_inter[0]-112)*var_inter[0]*val[2]+val[0]*(1+((59062.0/315.0+((34208.0/15.0+((53248.0/15.0+(131072.0/315.0*var_inter[0]-65536.0/35.0)*var_inter[0])*var_inter[0]-18432.0/5.0)*var_inter[0])*var_inter[0]-4272.0/5.0)*var_inter[0])*var_inter[0]-761.0/35.0)*var_inter[0])+(64+((44672.0/9.0+((235520.0/9.0+((131072.0/9.0-1048576.0/315.0*var_inter[0])*var_inter[0]-1196032.0/45.0)*var_inter[0])*var_inter[0]-673792.0/45.0)*var_inter[0])*var_inter[0]-30784.0/35.0)*var_inter[0])*var_inter[0]*val[1]+val[3]*(448.0/3.0+((102016.0/5.0+((145408+((1441792.0/15.0-1048576.0/45.0*var_inter[0])*var_inter[0]-2441216.0/15.0)*var_inter[0])*var_inter[0]-1097728.0/15.0)*var_inter[0])*var_inter[0]-128192.0/45.0)*var_inter[0])*var_inter[0]+((2764+((703552.0/9.0+((1712128.0/9.0+(262144.0/9.0*var_inter[0]-1048576.0/9.0)*var_inter[0])*var_inter[0]-1466368.0/9.0)*var_inter[0])*var_inter[0]-186496.0/9.0)*var_inter[0])*var_inter[0]-140)*var_inter[0]*val[4]+val[7]*(64.0/7.0+((67456.0/45.0+((124928.0/9.0+((3801088.0/315.0-1048576.0/315.0*var_inter[0])*var_inter[0]-802816.0/45.0)*var_inter[0])*var_inter[0]-274432.0/45.0)*var_inter[0])*var_inter[0]-6592.0/35.0)*var_inter[0])*var_inter[0]
    else if interpolation_base == "hierarchical"
        return val[8]*var_inter[0]+val[7]*(64.0/7.0+((67456.0/45.0+((124928.0/9.0+((3801088.0/315.0-1048576.0/315.0*var_inter[0])*var_inter[0]-802816.0/45.0)*var_inter[0])*var_inter[0]-274432.0/45.0)*var_inter[0])*var_inter[0]-6592.0/35.0)*var_inter[0])*var_inter[0]+((34288.0/45.0+((358784.0/15.0+((999424.0/15.0+(524288.0/45.0*var_inter[0]-131072.0/3.0)*var_inter[0])*var_inter[0]-53248)*var_inter[0])*var_inter[0]-5984)*var_inter[0])*var_inter[0]-112.0/3.0)*var_inter[0]*val[6]+val[5]*(448.0/5.0+((626048.0/45.0+((5285888.0/45.0+((4063232.0/45.0-1048576.0/45.0*var_inter[0])*var_inter[0]-6406144.0/45.0)*var_inter[0])*var_inter[0]-2443264.0/45.0)*var_inter[0])*var_inter[0]-9024.0/5.0)*var_inter[0])*var_inter[0]+((2764+((703552.0/9.0+((1712128.0/9.0+(262144.0/9.0*var_inter[0]-1048576.0/9.0)*var_inter[0])*var_inter[0]-1466368.0/9.0)*var_inter[0])*var_inter[0]-186496.0/9.0)*var_inter[0])*var_inter[0]-140)*var_inter[0]*val[4]+val[3]*(448.0/3.0+((102016.0/5.0+((145408+((1441792.0/15.0-1048576.0/45.0*var_inter[0])*var_inter[0]-2441216.0/15.0)*var_inter[0])*var_inter[0]-1097728.0/15.0)*var_inter[0])*var_inter[0]-128192.0/45.0)*var_inter[0])*var_inter[0]+((9936.0/5.0+((1956992.0/45.0+((3915776.0/45.0+(524288.0/45.0*var_inter[0]-2228224.0/45.0)*var_inter[0])*var_inter[0]-733184.0/9.0)*var_inter[0])*var_inter[0]-587296.0/45.0)*var_inter[0])*var_inter[0]-112)*var_inter[0]*val[2]+(64+((44672.0/9.0+((235520.0/9.0+((131072.0/9.0-1048576.0/315.0*var_inter[0])*var_inter[0]-1196032.0/45.0)*var_inter[0])*var_inter[0]-673792.0/45.0)*var_inter[0])*var_inter[0]-30784.0/35.0)*var_inter[0])*var_inter[0]*val[1]+val[0]*(1-var_inter[0])

#
def generic_interpolation( var_inter, val, interpolation_base, deg ) when deg == 9
    if interpolation_base == "lagrange"
        return val[9]*(1+((265779.0/1120.0+((2337903.0/640.0+((2302911.0/320.0+(4782969.0/4480.0*var_inter[0]-4782969.0/1120.0)*var_inter[0])*var_inter[0]-531441.0/80.0)*var_inter[0])*var_inter[0]-194643.0/160.0)*var_inter[0])*var_inter[0]-6849.0/280.0)*var_inter[0])*var_inter[0]+val[7]*(324.0/7.0+((2989629.0/280.0+((25043337.0/160.0+((80247591.0/280.0+(43046721.0/1120.0*var_inter[0]-90876411.0/560.0)*var_inter[0])*var_inter[0]-22025277.0/80.0)*var_inter[0])*var_inter[0]-2142531.0/40.0)*var_inter[0])*var_inter[0]-78327.0/70.0)*var_inter[0])*var_inter[0]+val[6]*((60381.0/20.0+((22480173.0/160.0+((55447011.0/80.0+((62178597.0/160.0-14348907.0/160.0*var_inter[0])*var_inter[0]-28166373.0/40.0)*var_inter[0])*var_inter[0]-64448703.0/160.0)*var_inter[0])*var_inter[0]-2276289.0/80.0)*var_inter[0])*var_inter[0]-126)*var_inter[0]+val[5]*(1134.0/5.0+((795339.0/16.0+((215023653.0/320.0+((35606547.0/32.0+(43046721.0/320.0*var_inter[0]-4782969.0/8.0)*var_inter[0])*var_inter[0]-18009945.0/16.0)*var_inter[0])*var_inter[0]-3844017.0/16.0)*var_inter[0])*var_inter[0]-21465.0/4.0)*var_inter[0])*var_inter[0]+(252+((1959363.0/40.0+((91020753.0/160.0+((16474671.0/20.0+(14348907.0/160.0*var_inter[0]-33480783.0/80.0)*var_inter[0])*var_inter[0]-71035947.0/80.0)*var_inter[0])*var_inter[0]-8776431.0/40.0)*var_inter[0])*var_inter[0]-56601.0/10.0)*var_inter[0])*var_inter[0]*val[3]+(81+((10307331.0/1120.0+((51221727.0/640.0+((31355019.0/320.0+(43046721.0/4480.0*var_inter[0]-52612659.0/1120.0)*var_inter[0])*var_inter[0]-4546773.0/40.0)*var_inter[0])*var_inter[0]-5589243.0/160.0)*var_inter[0])*var_inter[0]-373329.0/280.0)*var_inter[0])*var_inter[0]*val[1]+val[0]*(1+((58635.0/224.0+((623295.0/128.0+((885735.0/64.0+((4782969.0/896.0-4782969.0/4480.0*var_inter[0])*var_inter[0]-5137263.0/448.0)*var_inter[0])*var_inter[0]-6589431.0/640.0)*var_inter[0])*var_inter[0]-40707.0/28.0)*var_inter[0])*var_inter[0]-7129.0/280.0)*var_inter[0])+((475389.0/140.0+((18152829.0/160.0+((33244587.0/80.0+((205667667.0/1120.0-43046721.0/1120.0*var_inter[0])*var_inter[0]-3720087.0/10.0)*var_inter[0])*var_inter[0]-44529507.0/160.0)*var_inter[0])*var_inter[0]-15190173.0/560.0)*var_inter[0])*var_inter[0]-162)*var_inter[0]*val[2]+((526419.0/80.0+((89119521.0/320.0+((195629337.0/160.0+((196101729.0/320.0-43046721.0/320.0*var_inter[0])*var_inter[0]-187598673.0/160.0)*var_inter[0])*var_inter[0]-241241409.0/320.0)*var_inter[0])*var_inter[0]-4752351.0/80.0)*var_inter[0])*var_inter[0]-567.0/2.0)*var_inter[0]*val[4]+((275967.0/1120.0+((7712091.0/640.0+((20490003.0/320.0+((176969853.0/4480.0-43046721.0/4480.0*var_inter[0])*var_inter[0]-21789081.0/320.0)*var_inter[0])*var_inter[0]-22878207.0/640.0)*var_inter[0])*var_inter[0]-1328967.0/560.0)*var_inter[0])*var_inter[0]-81.0/8.0)*var_inter[0]*val[8]
    else if interpolation_base == "hierarchical"
        return val[9]*var_inter[0]+((275967.0/1120.0+((7712091.0/640.0+((20490003.0/320.0+((176969853.0/4480.0-43046721.0/4480.0*var_inter[0])*var_inter[0]-21789081.0/320.0)*var_inter[0])*var_inter[0]-22878207.0/640.0)*var_inter[0])*var_inter[0]-1328967.0/560.0)*var_inter[0])*var_inter[0]-81.0/8.0)*var_inter[0]*val[8]+val[7]*(324.0/7.0+((2989629.0/280.0+((25043337.0/160.0+((80247591.0/280.0+(43046721.0/1120.0*var_inter[0]-90876411.0/560.0)*var_inter[0])*var_inter[0]-22025277.0/80.0)*var_inter[0])*var_inter[0]-2142531.0/40.0)*var_inter[0])*var_inter[0]-78327.0/70.0)*var_inter[0])*var_inter[0]+val[6]*((60381.0/20.0+((22480173.0/160.0+((55447011.0/80.0+((62178597.0/160.0-14348907.0/160.0*var_inter[0])*var_inter[0]-28166373.0/40.0)*var_inter[0])*var_inter[0]-64448703.0/160.0)*var_inter[0])*var_inter[0]-2276289.0/80.0)*var_inter[0])*var_inter[0]-126)*var_inter[0]+val[5]*(1134.0/5.0+((795339.0/16.0+((215023653.0/320.0+((35606547.0/32.0+(43046721.0/320.0*var_inter[0]-4782969.0/8.0)*var_inter[0])*var_inter[0]-18009945.0/16.0)*var_inter[0])*var_inter[0]-3844017.0/16.0)*var_inter[0])*var_inter[0]-21465.0/4.0)*var_inter[0])*var_inter[0]+((526419.0/80.0+((89119521.0/320.0+((195629337.0/160.0+((196101729.0/320.0-43046721.0/320.0*var_inter[0])*var_inter[0]-187598673.0/160.0)*var_inter[0])*var_inter[0]-241241409.0/320.0)*var_inter[0])*var_inter[0]-4752351.0/80.0)*var_inter[0])*var_inter[0]-567.0/2.0)*var_inter[0]*val[4]+(252+((1959363.0/40.0+((91020753.0/160.0+((16474671.0/20.0+(14348907.0/160.0*var_inter[0]-33480783.0/80.0)*var_inter[0])*var_inter[0]-71035947.0/80.0)*var_inter[0])*var_inter[0]-8776431.0/40.0)*var_inter[0])*var_inter[0]-56601.0/10.0)*var_inter[0])*var_inter[0]*val[3]+((475389.0/140.0+((18152829.0/160.0+((33244587.0/80.0+((205667667.0/1120.0-43046721.0/1120.0*var_inter[0])*var_inter[0]-3720087.0/10.0)*var_inter[0])*var_inter[0]-44529507.0/160.0)*var_inter[0])*var_inter[0]-15190173.0/560.0)*var_inter[0])*var_inter[0]-162)*var_inter[0]*val[2]+val[0]*(1-var_inter[0])+(81+((10307331.0/1120.0+((51221727.0/640.0+((31355019.0/320.0+(43046721.0/4480.0*var_inter[0]-52612659.0/1120.0)*var_inter[0])*var_inter[0]-4546773.0/40.0)*var_inter[0])*var_inter[0]-5589243.0/160.0)*var_inter[0])*var_inter[0]-373329.0/280.0)*var_inter[0])*var_inter[0]*val[1]

#
def interpolation_vertex( var_inter, val_vertex )
    return val_vertex[1]*var_inter[0]+val_vertex[0]*(1-var_inter[0])
#
def nb_children( sub_nvi ) when sub_nvi==0
    return 1
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==0
    return child_var_inter
def type_child( sub_nvi, num_child ) when sub_nvi==0
    return Bar_7
def node_number_child( sub_nvi, num_child ) when sub_nvi==0
    return 0 .. 7
#
def nb_children( sub_nvi ) when sub_nvi==1
    return 2
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==0
    return [0]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return [0]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==1
    return [1]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return [1]
def normal( var_inter, pos_nodes )
    res := Vec[ type_promote(var_inter[0],pos_nodes[0][0],mul), 2 ]()
    R_0 := pos_nodes[6][1]; R_1 := pos_nodes[5][1]; R_2 := pos_nodes[0][1]; R_3 := pos_nodes[1][1];
    R_4 := pos_nodes[2][1]; R_5 := pos_nodes[3][1]; R_6 := pos_nodes[4][1]; R_7 := pos_nodes[4][0];
    R_8 := pos_nodes[1][0]; R_9 := pos_nodes[0][0]; R_10 := pos_nodes[2][0]; R_11 := pos_nodes[3][0];
    R_12 := pos_nodes[5][0]; R_13 := var_inter[0]; R_14 := (-7776.0)*R_13; R_14 = 19440.0+R_14;
    R_14 = R_14*R_13; R_14 = (-17424.0)+R_14; R_14 = R_14*R_13; R_14 = 6696.0+R_14;
    R_14 = R_14*R_13; R_14 = (-1016.0)+R_14; R_14 = R_14*R_13; R_14 = 40.0+R_14;
    R_6 = R_6*R_14; R_14 = R_7*R_14; R_7 = (1944.0/5.0)*R_13; R_15 := (-810.0)+R_7;
    R_15 = R_15*R_13; R_15 = 612.0+R_15; R_15 = R_15*R_13; R_15 = -202.5+R_15;
    R_15 = R_15*R_13; R_15 = (137.0/5.0)+R_15; R_15 = R_15*R_13; R_15 = (-1.0)+R_15;
    R_3 = R_15*R_3; R_8 = R_15*R_8; R_7 = (-1134.0)+R_7; R_7 = R_7*R_13;
    R_7 = 1260.0+R_7; R_7 = R_7*R_13; R_7 = -661.5+R_7; R_7 = R_7*R_13;
    R_7 = (812.0/5.0)+R_7; R_7 = R_7*R_13; R_7 = (-147.0/10.0)+R_7; R_2 = R_7*R_2;
    R_2 = R_3+R_2; R_9 = R_7*R_9; R_8 = R_9+R_8; R_9 = 5832.0*R_13;
    R_7 = (-15390.0)+R_9; R_7 = R_7*R_13; R_7 = 14796.0+R_7; R_7 = R_7*R_13;
    R_7 = -6223.5+R_7; R_7 = R_7*R_13; R_7 = 1053.0+R_7; R_7 = R_7*R_13;
    R_7 = (-45.0)+R_7; R_5 = R_7*R_5; R_11 = R_7*R_11; R_9 = (-13770.0)+R_9;
    R_9 = R_9*R_13; R_9 = 11556.0+R_9; R_9 = R_9*R_13; R_9 = -4144.5+R_9;
    R_9 = R_9*R_13; R_9 = 594.0+R_9; R_9 = R_9*R_13; R_9 = -22.5+R_9;
    R_1 = R_1*R_9; R_12 = R_9*R_12; R_9 = (-11664.0/5.0)*R_13; R_7 = 6480.0+R_9;
    R_7 = R_7*R_13; R_7 = (-6696.0)+R_7; R_7 = R_7*R_13; R_7 = 3132.0+R_7;
    R_7 = R_7*R_13; R_7 = (-3132.0/5.0)+R_7; R_7 = R_7*R_13; R_7 = 36.0+R_7;
    R_4 = R_7*R_4; R_2 = R_4+R_2; R_2 = R_5+R_2; R_2 = R_6+R_2;
    R_1 = R_2+R_1; R_10 = R_7*R_10; R_8 = R_10+R_8; R_8 = R_11+R_8;
    R_14 = R_8+R_14; R_14 = R_12+R_14; R_9 = 5184.0+R_9; R_9 = R_9*R_13;
    R_9 = (-4104.0)+R_9; R_9 = R_9*R_13; R_9 = 1404.0+R_9; R_9 = R_9*R_13;
    R_9 = (-972.0/5.0)+R_9; R_13 = R_9*R_13; R_13 = (36.0/5.0)+R_13; R_0 = R_0*R_13;
    R_0 = R_1+R_0; R_1 = pow(R_0,2); R_9 = pos_nodes[6][0]; R_13 = R_9*R_13;
    R_14 = R_13+R_14; R_13 = pow(R_14,2); R_1 = R_13+R_1; R_1 = rsqrt(R_1);
    R_14 = R_1*R_14; R_14 = (-1.0)*R_14; res[1] = R_14; R_0 = R_1*R_0;
    res[0] = R_0; 
    return res
#
def jac_mat( var_inter, pos_nodes )
    res := Mat[ type_promote(var_inter[0],pos_nodes[0][0],mul), Gen[ 1, 2 ] ]()
    R_0 := pos_nodes[6][1]; R_1 := pos_nodes[5][1]; R_2 := pos_nodes[0][1]; R_3 := pos_nodes[1][1];
    R_4 := pos_nodes[2][1]; R_5 := pos_nodes[3][1]; R_6 := pos_nodes[4][1]; R_7 := pos_nodes[4][0];
    R_8 := pos_nodes[1][0]; R_9 := pos_nodes[0][0]; R_10 := pos_nodes[2][0]; R_11 := pos_nodes[3][0];
    R_12 := pos_nodes[5][0]; R_13 := var_inter[0]; R_14 := (-7776.0)*R_13; R_14 = 19440.0+R_14;
    R_14 = R_14*R_13; R_14 = (-17424.0)+R_14; R_14 = R_14*R_13; R_14 = 6696.0+R_14;
    R_14 = R_14*R_13; R_14 = (-1016.0)+R_14; R_14 = R_14*R_13; R_14 = 40.0+R_14;
    R_6 = R_6*R_14; R_14 = R_7*R_14; R_7 = (1944.0/5.0)*R_13; R_15 := (-810.0)+R_7;
    R_15 = R_15*R_13; R_15 = 612.0+R_15; R_15 = R_15*R_13; R_15 = -202.5+R_15;
    R_15 = R_15*R_13; R_15 = (137.0/5.0)+R_15; R_15 = R_15*R_13; R_15 = (-1.0)+R_15;
    R_3 = R_15*R_3; R_8 = R_15*R_8; R_7 = (-1134.0)+R_7; R_7 = R_7*R_13;
    R_7 = 1260.0+R_7; R_7 = R_7*R_13; R_7 = -661.5+R_7; R_7 = R_7*R_13;
    R_7 = (812.0/5.0)+R_7; R_7 = R_7*R_13; R_7 = (-147.0/10.0)+R_7; R_2 = R_7*R_2;
    R_2 = R_3+R_2; R_9 = R_7*R_9; R_8 = R_9+R_8; R_9 = 5832.0*R_13;
    R_7 = (-15390.0)+R_9; R_7 = R_7*R_13; R_7 = 14796.0+R_7; R_7 = R_7*R_13;
    R_7 = -6223.5+R_7; R_7 = R_7*R_13; R_7 = 1053.0+R_7; R_7 = R_7*R_13;
    R_7 = (-45.0)+R_7; R_5 = R_7*R_5; R_11 = R_7*R_11; R_9 = (-13770.0)+R_9;
    R_9 = R_9*R_13; R_9 = 11556.0+R_9; R_9 = R_9*R_13; R_9 = -4144.5+R_9;
    R_9 = R_9*R_13; R_9 = 594.0+R_9; R_9 = R_9*R_13; R_9 = -22.5+R_9;
    R_1 = R_1*R_9; R_12 = R_9*R_12; R_9 = (-11664.0/5.0)*R_13; R_7 = 6480.0+R_9;
    R_7 = R_7*R_13; R_7 = (-6696.0)+R_7; R_7 = R_7*R_13; R_7 = 3132.0+R_7;
    R_7 = R_7*R_13; R_7 = (-3132.0/5.0)+R_7; R_7 = R_7*R_13; R_7 = 36.0+R_7;
    R_4 = R_7*R_4; R_2 = R_4+R_2; R_2 = R_5+R_2; R_2 = R_6+R_2;
    R_1 = R_2+R_1; R_10 = R_7*R_10; R_8 = R_10+R_8; R_8 = R_11+R_8;
    R_14 = R_8+R_14; R_14 = R_12+R_14; R_9 = 5184.0+R_9; R_9 = R_9*R_13;
    R_9 = (-4104.0)+R_9; R_9 = R_9*R_13; R_9 = 1404.0+R_9; R_9 = R_9*R_13;
    R_9 = (-972.0/5.0)+R_9; R_13 = R_9*R_13; R_13 = (36.0/5.0)+R_13; R_0 = R_0*R_13;
    R_0 = R_1+R_0; res(0,1) = R_0; R_0 = pos_nodes[6][0]; R_13 = R_0*R_13;
    R_14 = R_13+R_14; res(0,0) = R_14; 
    return res
#
def jac( var_inter, pos_nodes )
    R_0 := pos_nodes[6][1]; R_1 := pos_nodes[5][1]; R_2 := pos_nodes[0][1]; R_3 := pos_nodes[1][1];
    R_4 := pos_nodes[2][1]; R_5 := pos_nodes[3][1]; R_6 := pos_nodes[4][1]; R_7 := pos_nodes[4][0];
    R_8 := pos_nodes[1][0]; R_9 := pos_nodes[0][0]; R_10 := pos_nodes[2][0]; R_11 := pos_nodes[3][0];
    R_12 := pos_nodes[5][0]; R_13 := var_inter[0]; R_14 := (-7776.0)*R_13; R_14 = 19440.0+R_14;
    R_14 = R_14*R_13; R_14 = (-17424.0)+R_14; R_14 = R_14*R_13; R_14 = 6696.0+R_14;
    R_14 = R_14*R_13; R_14 = (-1016.0)+R_14; R_14 = R_14*R_13; R_14 = 40.0+R_14;
    R_6 = R_6*R_14; R_14 = R_7*R_14; R_7 = (1944.0/5.0)*R_13; R_15 := (-810.0)+R_7;
    R_15 = R_15*R_13; R_15 = 612.0+R_15; R_15 = R_15*R_13; R_15 = -202.5+R_15;
    R_15 = R_15*R_13; R_15 = (137.0/5.0)+R_15; R_15 = R_15*R_13; R_15 = (-1.0)+R_15;
    R_3 = R_15*R_3; R_8 = R_15*R_8; R_7 = (-1134.0)+R_7; R_7 = R_7*R_13;
    R_7 = 1260.0+R_7; R_7 = R_7*R_13; R_7 = -661.5+R_7; R_7 = R_7*R_13;
    R_7 = (812.0/5.0)+R_7; R_7 = R_7*R_13; R_7 = (-147.0/10.0)+R_7; R_2 = R_7*R_2;
    R_2 = R_3+R_2; R_9 = R_7*R_9; R_8 = R_9+R_8; R_9 = 5832.0*R_13;
    R_7 = (-15390.0)+R_9; R_7 = R_7*R_13; R_7 = 14796.0+R_7; R_7 = R_7*R_13;
    R_7 = -6223.5+R_7; R_7 = R_7*R_13; R_7 = 1053.0+R_7; R_7 = R_7*R_13;
    R_7 = (-45.0)+R_7; R_5 = R_7*R_5; R_11 = R_7*R_11; R_9 = (-13770.0)+R_9;
    R_9 = R_9*R_13; R_9 = 11556.0+R_9; R_9 = R_9*R_13; R_9 = -4144.5+R_9;
    R_9 = R_9*R_13; R_9 = 594.0+R_9; R_9 = R_9*R_13; R_9 = -22.5+R_9;
    R_1 = R_1*R_9; R_12 = R_9*R_12; R_9 = (-11664.0/5.0)*R_13; R_7 = 6480.0+R_9;
    R_7 = R_7*R_13; R_7 = (-6696.0)+R_7; R_7 = R_7*R_13; R_7 = 3132.0+R_7;
    R_7 = R_7*R_13; R_7 = (-3132.0/5.0)+R_7; R_7 = R_7*R_13; R_7 = 36.0+R_7;
    R_4 = R_7*R_4; R_2 = R_4+R_2; R_2 = R_5+R_2; R_2 = R_6+R_2;
    R_1 = R_2+R_1; R_10 = R_7*R_10; R_8 = R_10+R_8; R_8 = R_11+R_8;
    R_14 = R_8+R_14; R_14 = R_12+R_14; R_9 = 5184.0+R_9; R_9 = R_9*R_13;
    R_9 = (-4104.0)+R_9; R_9 = R_9*R_13; R_9 = 1404.0+R_9; R_9 = R_9*R_13;
    R_9 = (-972.0/5.0)+R_9; R_13 = R_9*R_13; R_13 = (36.0/5.0)+R_13; R_0 = R_0*R_13;
    R_0 = R_1+R_0; R_0 = pow(R_0,2); R_1 = pos_nodes[6][0]; R_13 = R_1*R_13;
    R_14 = R_13+R_14; R_14 = pow(R_14,2); R_0 = R_14+R_0; R_0 = sqrt(R_0);
    res := R_0; 
    return res
#
def inv_jac_mat( var_inter, pos_nodes )
    assert( 0, "inv_jac_mat() available only when nb var inter == dim" )
#
def measure( var_inter, pos_nodes )
    R_0 := pos_nodes[2][1]; R_1 := (-1.0)*R_0; R_2 := pos_nodes[6][1]; R_1 = R_2+R_1;
    R_3 := (-648.0)*R_1; R_4 := 108.0*R_1; R_1 = (-9.0/10.0)*R_1; R_0 = R_2+R_0;
    R_2 = 432.0*R_0; R_0 = (-27.0/5.0)*R_0; R_5 := pos_nodes[4][1]; R_6 := 2016.0*R_5;
    R_2 = R_6+R_2; R_5 = (-98.0)*R_5; R_0 = R_5+R_0; R_5 = pos_nodes[1][1];
    R_6 = (-1.0)*R_5; R_7 := pos_nodes[0][1]; R_6 = R_6+R_7; R_8 := (-162.0)*R_6;
    R_8 = R_3+R_8; R_3 = 13.5*R_6; R_4 = R_3+R_4; R_6 = (-1.0/10.0)*R_6;
    R_6 = R_1+R_6; R_5 = R_7+R_5; R_7 = (-36.0)*R_5; R_7 = R_2+R_7;
    R_5 = (2.0/5.0)*R_5; R_0 = R_5+R_0; R_5 = pos_nodes[3][1]; R_2 = (-1.0)*R_5;
    R_1 = pos_nodes[5][1]; R_2 = R_1+R_2; R_3 = 810.0*R_2; R_3 = R_8+R_3;
    R_8 = -175.5*R_2; R_8 = R_4+R_8; R_4 = pow(R_8,2); R_2 = 4.5*R_2;
    R_2 = R_6+R_2; R_3 = R_2*R_3; R_6 = pow(R_2,2); R_9 := R_2*R_8;
    R_5 = R_1+R_5; R_1 = (-1404.0)*R_5; R_7 = R_1+R_7; R_1 = R_2*R_7;
    R_5 = 54.0*R_5; R_0 = R_5+R_0; R_8 = R_0*R_8; R_7 = R_0*R_7;
    R_2 = R_2*R_0; R_0 = pow(R_0,2); R_5 = (-1.0)*R_0; R_10 := pos_nodes[2][0];
    R_11 := (-1.0)*R_10; R_12 := pos_nodes[6][0]; R_11 = R_12+R_11; R_13 := (-648.0)*R_11;
    R_14 := 108.0*R_11; R_11 = (-9.0/10.0)*R_11; R_10 = R_12+R_10; R_12 = 432.0*R_10;
    R_10 = (-27.0/5.0)*R_10; R_15 := pos_nodes[4][0]; R_16 := 2016.0*R_15; R_12 = R_16+R_12;
    R_15 = (-98.0)*R_15; R_10 = R_15+R_10; R_15 = pos_nodes[1][0]; R_16 = pos_nodes[0][0];
    R_17 := (-1.0)*R_16; R_17 = R_17+R_15; R_18 := 162.0*R_17; R_18 = R_13+R_18;
    R_13 = -13.5*R_17; R_13 = R_14+R_13; R_17 = (1.0/10.0)*R_17; R_17 = R_11+R_17;
    R_15 = R_16+R_15; R_16 = (-36.0)*R_15; R_16 = R_12+R_16; R_15 = (2.0/5.0)*R_15;
    R_10 = R_15+R_10; R_15 = pos_nodes[3][0]; R_12 = (-1.0)*R_15; R_11 = pos_nodes[5][0];
    R_12 = R_12+R_11; R_14 = 810.0*R_12; R_14 = R_18+R_14; R_18 = -175.5*R_12;
    R_13 = R_18+R_13; R_18 = pow(R_13,2); R_4 = R_18+R_4; R_12 = 4.5*R_12;
    R_12 = R_17+R_12; R_14 = R_12*R_14; R_17 = pow(R_12,2); R_6 = R_17+R_6;
    R_17 = sqrt(R_6); R_18 = rsqrt(R_6); R_6 = 1/R_6; R_19 := R_12*R_13;
    R_9 = R_19+R_9; R_19 = (-60.0)*R_9; R_20 := 24.0*R_9; R_9 = 2.0*R_9;
    R_15 = R_11+R_15; R_11 = (-1404.0)*R_15; R_16 = R_11+R_16; R_11 = R_12*R_16;
    R_15 = 54.0*R_15; R_10 = R_15+R_10; R_13 = R_10*R_13; R_11 = R_13+R_11;
    R_11 = R_8+R_11; R_11 = R_1+R_11; R_11 = 48.0*R_11; R_16 = R_10*R_16;
    R_14 = R_16+R_14; R_14 = R_3+R_14; R_14 = R_7+R_14; R_14 = 2.0*R_14;
    R_14 = R_4+R_14; R_14 = 24.0*R_14; R_12 = R_12*R_10; R_2 = R_12+R_2;
    R_12 = pow(R_2,2); R_12 = R_6*R_12; R_5 = R_12+R_5; R_12 = (-1.0)*R_12;
    R_10 = pow(R_10,2); R_4 = (-1.0)*R_10; R_4 = R_5+R_4; R_4 = (-12.0)*R_4;
    R_4 = R_20+R_4; R_0 = R_10+R_0; R_10 = R_0+R_12; R_10 = (-30.0)*R_10;
    R_19 = R_10+R_19; R_19 = R_2*R_19; R_19 = R_6*R_19; R_19 = R_11+R_19;
    R_19 = R_2*R_19; R_19 = 2.0*R_19; R_9 = R_0+R_9; R_4 = R_9*R_4;
    R_19 = R_4+R_19; R_19 = R_6*R_19; R_19 = -0.5*R_19; R_19 = R_14+R_19;
    R_19 = R_18*R_19; R_19 = (1.0/3840.0)*R_19; R_12 = R_9+R_12; R_18 = R_12*R_18;
    R_18 = (1.0/24.0)*R_18; R_17 = R_18+R_17; R_19 = R_17+R_19; res := R_19;
    return res
#
def barycenter( var_inter, pos_nodes )
    res := Vec[ type_promote(var_inter[0],pos_nodes[0][0],mul), 2 ]()
    R_0 := pos_nodes[4][0]; R_1 := 504.0*R_0; R_2 := -24.5*R_0; R_3 := (-49.0)*R_0;
    R_4 := 2016.0*R_0; R_5 := (-98.0)*R_0; R_6 := pos_nodes[4][1]; R_7 := 504.0*R_6;
    R_8 := (-49.0)*R_6; R_9 := 2016.0*R_6; R_10 := (-98.0)*R_6; R_11 := pos_nodes[1][1];
    R_12 := (-1.0)*R_11; R_13 := pos_nodes[0][1]; R_12 = R_12+R_13; R_14 := (-162.0)*R_12;
    R_12 = 13.5*R_12; R_15 := R_13+R_11; R_16 := (-9.0)*R_15; R_16 = R_7+R_16;
    R_7 = (1.0/5.0)*R_15; R_17 := (-36.0)*R_15; R_15 = (2.0/5.0)*R_15; R_13 = (-1.0)*R_13;
    R_11 = R_13+R_11; R_13 = -4.5*R_11; R_18 := (1.0/120.0)*R_11; R_19 := 162.0*R_11;
    R_20 := (1.0/10.0)*R_11; R_11 = -13.5*R_11; R_21 := pos_nodes[2][1]; R_22 := (-1.0)*R_21;
    R_23 := pos_nodes[6][1]; R_24 := (-1.0)*R_23; R_24 = R_24+R_21; R_24 = (-36.0)*R_24;
    R_13 = R_24+R_13; R_21 = R_23+R_21; R_24 = 108.0*R_21; R_16 = R_24+R_16;
    R_24 = (-27.0/10.0)*R_21; R_24 = R_8+R_24; R_7 = R_24+R_7; R_24 = 432.0*R_21;
    R_24 = R_9+R_24; R_9 = R_24+R_17; R_21 = (-27.0/5.0)*R_21; R_21 = R_10+R_21;
    R_21 = R_15+R_21; R_22 = R_23+R_22; R_23 = (-3.0/40.0)*R_22; R_15 = (-648.0)*R_22;
    R_14 = R_15+R_14; R_10 = (-9.0/10.0)*R_22; R_8 = R_10+R_20; R_22 = 108.0*R_22;
    R_12 = R_12+R_22; R_11 = R_22+R_11; R_22 = pos_nodes[3][1]; R_25 := (-1.0)*R_22;
    R_26 := pos_nodes[5][1]; R_27 := (-1.0)*R_26; R_27 = R_27+R_22; R_28 := 58.5*R_27;
    R_13 = R_28+R_13; R_28 = -0.375*R_27; R_18 = R_28+R_18; R_23 = R_18+R_23;
    R_27 = -4.5*R_27; R_27 = R_10+R_27; R_27 = R_20+R_27; R_20 = pow(R_27,2);
    R_22 = R_26+R_22; R_10 = (-351.0)*R_22; R_16 = R_10+R_16; R_10 = 27.0*R_22;
    R_7 = R_10+R_7; R_10 = (-1404.0)*R_22; R_9 = R_10+R_9; R_18 = R_9*R_27;
    R_10 = R_24+R_10; R_10 = R_17+R_10; R_22 = 54.0*R_22; R_21 = R_22+R_21;
    R_9 = R_21*R_9; R_9 = (-1.0)*R_9; R_22 = R_21*R_27; R_17 = R_21*R_10;
    R_17 = (-1.0)*R_17; R_24 = pow(R_21,2); R_25 = R_26+R_25; R_26 = 810.0*R_25;
    R_14 = R_14+R_26; R_14 = R_14*R_27; R_14 = (-1.0)*R_14; R_19 = R_26+R_19;
    R_19 = R_15+R_19; R_15 = 4.5*R_25; R_8 = R_15+R_8; R_19 = R_8*R_19;
    R_19 = (-1.0)*R_19; R_10 = R_8*R_10; R_15 = R_21*R_8; R_26 = pow(R_8,2);
    R_25 = -175.5*R_25; R_12 = R_12+R_25; R_28 = pow(R_12,2); R_29 := R_21*R_12;
    R_12 = R_12*R_27; R_11 = R_25+R_11; R_21 = R_21*R_11; R_8 = R_8*R_11;
    R_11 = pow(R_11,2); R_25 = pos_nodes[1][0]; R_30 := (-1.0)*R_25; R_31 := pos_nodes[0][0];
    R_32 := R_31+R_25; R_33 := (-9.0)*R_32; R_34 := (1.0/10.0)*R_32; R_35 := (1.0/5.0)*R_32;
    R_35 = R_3+R_35; R_3 = (-36.0)*R_32; R_32 = (2.0/5.0)*R_32; R_30 = R_30+R_31;
    R_36 := 13.5*R_30; R_37 := (-1.0/120.0)*R_30; R_38 := (-162.0)*R_30; R_30 = (-1.0/10.0)*R_30;
    R_31 = (-1.0)*R_31; R_25 = R_31+R_25; R_31 = 162.0*R_25; R_39 := -4.5*R_25;
    R_25 = -13.5*R_25; R_40 := pos_nodes[2][0]; R_41 := (-1.0)*R_40; R_42 := pos_nodes[6][0];
    R_43 := (-1.0)*R_42; R_43 = R_43+R_40; R_44 := (-36.0)*R_43; R_39 = R_44+R_39;
    R_43 = (3.0/40.0)*R_43; R_37 = R_43+R_37; R_40 = R_42+R_40; R_43 = 108.0*R_40;
    R_43 = R_1+R_43; R_33 = R_43+R_33; R_43 = (-27.0/20.0)*R_40; R_2 = R_43+R_2;
    R_43 = (-27.0/10.0)*R_40; R_43 = R_35+R_43; R_35 = 432.0*R_40; R_35 = R_4+R_35;
    R_4 = R_35+R_3; R_40 = (-27.0/5.0)*R_40; R_40 = R_5+R_40; R_5 = R_32+R_40;
    R_41 = R_42+R_41; R_42 = (-648.0)*R_41; R_31 = R_42+R_31; R_1 = (-9.0/10.0)*R_41;
    R_30 = R_1+R_30; R_41 = 108.0*R_41; R_36 = R_41+R_36; R_25 = R_41+R_25;
    R_41 = pos_nodes[5][0]; R_1 = pos_nodes[3][0]; R_44 = R_41+R_1; R_45 := (-351.0)*R_44;
    R_33 = R_45+R_33; R_45 = 13.5*R_44; R_45 = R_2+R_45; R_34 = R_45+R_34;
    R_45 = 27.0*R_44; R_45 = R_43+R_45; R_43 = (-1404.0)*R_44; R_4 = R_43+R_4;
    R_43 = R_35+R_43; R_43 = R_3+R_43; R_44 = 54.0*R_44; R_5 = R_44+R_5;
    R_3 = R_5*R_4; R_3 = (-1.0)*R_3; R_35 = pow(R_5,2); R_35 = R_35+R_24;
    R_44 = R_40+R_44; R_44 = R_32+R_44; R_32 = R_44*R_43; R_32 = (-1.0)*R_32;
    R_40 = pow(R_44,2); R_40 = R_24+R_40; R_1 = (-1.0)*R_1; R_41 = R_1+R_41;
    R_1 = -58.5*R_41; R_39 = R_1+R_39; R_1 = 0.375*R_41; R_1 = R_37+R_1;
    R_37 = 810.0*R_41; R_31 = R_31+R_37; R_38 = R_37+R_38; R_38 = R_42+R_38;
    R_42 = 4.5*R_41; R_30 = R_42+R_30; R_4 = R_4*R_30; R_4 = R_29+R_4;
    R_31 = R_31*R_30; R_31 = (-1.0)*R_31; R_31 = R_14+R_31; R_31 = R_3+R_31;
    R_31 = R_9+R_31; R_9 = R_5*R_30; R_22 = R_9+R_22; R_13 = R_22*R_13;
    R_9 = pow(R_22,2); R_38 = R_30*R_38; R_38 = (-1.0)*R_38; R_43 = R_30*R_43;
    R_3 = R_44*R_30; R_15 = R_3+R_15; R_39 = R_15*R_39; R_3 = pow(R_15,2);
    R_14 = pow(R_30,2); R_20 = R_14+R_20; R_29 = rsqrt(R_20); R_27 = R_27*R_29;
    R_27 = R_27*R_22; R_42 = 1/R_20; R_9 = R_42*R_9; R_9 = (-1.0)*R_9;
    R_37 = R_35+R_9; R_24 = 12.0*R_37; R_37 = (-30.0)*R_37; R_20 = sqrt(R_20);
    R_16 = R_20*R_16; R_2 = R_20*R_7; R_2 = R_27+R_2; R_2 = (-1.0/12.0)*R_2;
    R_20 = (-1.0)*R_20; R_26 = R_14+R_26; R_14 = sqrt(R_26); R_33 = R_14*R_33;
    R_45 = R_14*R_45; R_14 = (-1.0)*R_14; R_27 = rsqrt(R_26); R_46 := R_30*R_27;
    R_46 = R_15*R_46; R_46 = R_45+R_46; R_46 = (-1.0/12.0)*R_46; R_26 = 1/R_26;
    R_3 = R_26*R_3; R_3 = (-1.0)*R_3; R_45 = R_40+R_3; R_47 := (-30.0)*R_45;
    R_45 = 12.0*R_45; R_41 = -175.5*R_41; R_36 = R_41+R_36; R_48 := pow(R_36,2);
    R_48 = R_28+R_48; R_48 = -0.5*R_48; R_5 = R_5*R_36; R_4 = R_5+R_4;
    R_4 = R_18+R_4; R_18 = 12.0*R_4; R_4 = 48.0*R_4; R_36 = R_30*R_36;
    R_12 = R_36+R_12; R_36 = 24.0*R_12; R_24 = R_36+R_24; R_36 = (-60.0)*R_12;
    R_36 = R_37+R_36; R_36 = R_22*R_36; R_36 = R_42*R_36; R_36 = R_4+R_36;
    R_36 = R_22*R_36; R_36 = 2.0*R_36; R_12 = 2.0*R_12; R_12 = R_35+R_12;
    R_24 = R_12*R_24; R_24 = R_36+R_24; R_24 = R_42*R_24; R_24 = (1.0/96.0)*R_24;
    R_24 = R_31+R_24; R_48 = R_24+R_48; R_48 = (1.0/80.0)*R_48; R_9 = R_12+R_9;
    R_22 = R_22*R_9; R_22 = R_42*R_22; R_22 = (-6.0)*R_22; R_22 = R_18+R_22;
    R_22 = R_23*R_22; R_13 = R_22+R_13; R_7 = R_9*R_7; R_7 = 0.5*R_7;
    R_13 = R_7+R_13; R_13 = R_13*R_29; R_16 = R_13+R_16; R_16 = (-1.0/80.0)*R_16;
    R_9 = (-1.0/24.0)*R_9; R_48 = R_9+R_48; R_29 = R_48*R_29; R_29 = R_20+R_29;
    R_20 = 1/R_29; R_29 = R_6*R_29; R_2 = R_29+R_2; R_16 = R_2+R_16;
    R_20 = R_16*R_20; res[1] = R_20; R_25 = R_41+R_25; R_44 = R_25*R_44;
    R_44 = R_43+R_44; R_44 = R_10+R_44; R_44 = R_21+R_44; R_21 = 12.0*R_44;
    R_44 = 48.0*R_44; R_30 = R_25*R_30; R_8 = R_30+R_8; R_30 = (-60.0)*R_8;
    R_30 = R_47+R_30; R_30 = R_15*R_30; R_30 = R_26*R_30; R_30 = R_44+R_30;
    R_30 = R_15*R_30; R_30 = 2.0*R_30; R_44 = 24.0*R_8; R_44 = R_45+R_44;
    R_8 = 2.0*R_8; R_8 = R_40+R_8; R_3 = R_8+R_3; R_34 = R_3*R_34;
    R_34 = R_39+R_34; R_15 = R_15*R_3; R_15 = R_26*R_15; R_15 = (-6.0)*R_15;
    R_15 = R_21+R_15; R_1 = R_15*R_1; R_34 = R_1+R_34; R_34 = R_34*R_27;
    R_33 = R_34+R_33; R_33 = (-1.0/80.0)*R_33; R_3 = (-1.0/24.0)*R_3; R_44 = R_8*R_44;
    R_30 = R_44+R_30; R_30 = R_26*R_30; R_30 = (1.0/96.0)*R_30; R_17 = R_30+R_17;
    R_38 = R_17+R_38; R_19 = R_38+R_19; R_32 = R_19+R_32; R_25 = pow(R_25,2);
    R_11 = R_25+R_11; R_11 = -0.5*R_11; R_32 = R_11+R_32; R_32 = (1.0/80.0)*R_32;
    R_3 = R_32+R_3; R_27 = R_3*R_27; R_14 = R_27+R_14; R_0 = R_0*R_14;
    R_33 = R_0+R_33; R_33 = R_46+R_33; R_14 = 1/R_14; R_33 = R_14*R_33;
    res[0] = R_33; 
    return res
#
def inertia_operator_for_barycenter( var_inter, pos_nodes )
    R_0 := pos_nodes[4][1]; R_1 := 504.0*R_0; R_2 := (-49.0)*R_0; R_3 := 2016.0*R_0;
    R_4 := (-98.0)*R_0; R_5 := pos_nodes[4][0]; R_6 := 504.0*R_5; R_7 := (-49.0)*R_5;
    R_8 := -24.5*R_5; R_9 := 2016.0*R_5; R_10 := (-98.0)*R_5; R_11 := pos_nodes[3][1];
    R_12 := (-1.0)*R_11; R_13 := pos_nodes[5][1]; R_14 := R_13+R_11; R_15 := (-351.0)*R_14;
    R_16 := 27.0*R_14; R_17 := (171.0/80.0)*R_14; R_18 := (-1404.0)*R_14; R_14 = 54.0*R_14;
    R_12 = R_13+R_12; R_19 := 4.5*R_12; R_20 := -175.5*R_12; R_12 = 810.0*R_12;
    R_13 = (-1.0)*R_13; R_11 = R_13+R_11; R_13 = 117.0*R_11; R_21 := 58.5*R_11;
    R_22 := -0.375*R_11; R_11 = -4.5*R_11; R_23 := pos_nodes[2][1]; R_24 := (-1.0)*R_23;
    R_25 := pos_nodes[6][1]; R_26 := (-1.0)*R_25; R_26 = R_26+R_23; R_26 = (-36.0)*R_26;
    R_23 = R_25+R_23; R_27 := 108.0*R_23; R_28 := (-27.0/10.0)*R_23; R_28 = R_2+R_28;
    R_2 = -1.125*R_23; R_29 := 432.0*R_23; R_29 = R_3+R_29; R_3 = R_29+R_18;
    R_23 = (-27.0/5.0)*R_23; R_23 = R_4+R_23; R_24 = R_25+R_24; R_25 = 72.0*R_24;
    R_4 = (-3.0/40.0)*R_24; R_30 := 108.0*R_24; R_31 := (-648.0)*R_24; R_24 = (-9.0/10.0)*R_24;
    R_32 := R_24+R_11; R_33 := pos_nodes[1][1]; R_34 := (-1.0)*R_33; R_35 := pos_nodes[0][1];
    R_36 := R_35+R_33; R_37 := (-9.0)*R_36; R_37 = R_1+R_37; R_15 = R_37+R_15;
    R_15 = R_27+R_15; R_27 = (23.0/240.0)*R_36; R_37 = (1.0/5.0)*R_36; R_37 = R_28+R_37;
    R_37 = R_16+R_37; R_16 = pow(R_37,2); R_28 = (-36.0)*R_36; R_3 = R_28+R_3;
    R_28 = R_29+R_28; R_28 = R_18+R_28; R_36 = (2.0/5.0)*R_36; R_23 = R_36+R_23;
    R_23 = R_14+R_23; R_14 = R_23*R_3; R_14 = (-1.0)*R_14; R_36 = pow(R_23,2);
    R_18 = R_23*R_28; R_29 = (-1.0)*R_18; R_34 = R_34+R_35; R_1 = 9.0*R_34;
    R_1 = R_13+R_1; R_25 = R_1+R_25; R_1 = (-1.0/10.0)*R_34; R_11 = R_1+R_11;
    R_11 = R_24+R_11; R_1 = R_11*R_25; R_13 = pow(R_11,2); R_38 := R_37*R_11;
    R_39 := 13.5*R_34; R_39 = R_39+R_30; R_39 = R_39+R_20; R_40 := pow(R_39,2);
    R_41 := R_23*R_39; R_34 = (-162.0)*R_34; R_34 = R_31+R_34; R_34 = R_34+R_12;
    R_35 = (-1.0)*R_35; R_33 = R_35+R_33; R_35 = -4.5*R_33; R_35 = R_26+R_35;
    R_35 = R_21+R_35; R_21 = (1.0/120.0)*R_33; R_21 = R_22+R_21; R_4 = R_21+R_4;
    R_21 = 162.0*R_33; R_21 = R_12+R_21; R_21 = R_31+R_21; R_31 = -13.5*R_33;
    R_31 = R_30+R_31; R_31 = R_20+R_31; R_20 = R_23*R_31; R_30 = pow(R_31,2);
    R_33 = (1.0/10.0)*R_33; R_24 = R_24+R_33; R_24 = R_19+R_24; R_21 = R_24*R_21;
    R_21 = (-1.0)*R_21; R_3 = R_24*R_3; R_19 = R_23*R_24; R_31 = R_24*R_31;
    R_24 = pow(R_24,2); R_32 = R_33+R_32; R_28 = R_28*R_32; R_23 = R_23*R_32;
    R_39 = R_39*R_32; R_34 = R_34*R_32; R_33 = (-1.0)*R_34; R_12 = pow(R_32,2);
    R_22 = pos_nodes[0][0]; R_26 = (-1.0)*R_22; R_42 := pos_nodes[1][0]; R_43 := R_22+R_42;
    R_44 := (-9.0)*R_43; R_45 := (1.0/5.0)*R_43; R_45 = R_7+R_45; R_7 = (1.0/10.0)*R_43;
    R_46 := (23.0/240.0)*R_43; R_47 := (-36.0)*R_43; R_43 = (2.0/5.0)*R_43; R_26 = R_26+R_42;
    R_48 := -4.5*R_26; R_49 := -13.5*R_26; R_26 = 162.0*R_26; R_42 = (-1.0)*R_42;
    R_22 = R_42+R_22; R_42 = 4.5*R_22; R_50 := 13.5*R_22; R_51 := (-1.0/120.0)*R_22;
    R_52 := (-162.0)*R_22; R_22 = (-1.0/10.0)*R_22; R_53 := pos_nodes[2][0]; R_54 := (-1.0)*R_53;
    R_55 := pos_nodes[6][0]; R_56 := (-1.0)*R_55; R_56 = R_56+R_53; R_57 := (9.0/10.0)*R_56;
    R_57 = R_22+R_57; R_58 := (-36.0)*R_56; R_48 = R_58+R_48; R_56 = (3.0/40.0)*R_56;
    R_51 = R_56+R_51; R_53 = R_55+R_53; R_56 = 108.0*R_53; R_56 = R_6+R_56;
    R_44 = R_56+R_44; R_56 = (-27.0/10.0)*R_53; R_56 = R_45+R_56; R_45 = (-27.0/20.0)*R_53;
    R_8 = R_45+R_8; R_45 = -1.125*R_53; R_6 = 432.0*R_53; R_6 = R_9+R_6;
    R_9 = R_6+R_47; R_53 = (-27.0/5.0)*R_53; R_53 = R_10+R_53; R_10 = R_43+R_53;
    R_54 = R_55+R_54; R_55 = 36.0*R_54; R_58 = 108.0*R_54; R_50 = R_58+R_50;
    R_49 = R_58+R_49; R_58 = (-648.0)*R_54; R_26 = R_58+R_26; R_54 = (-9.0/10.0)*R_54;
    R_22 = R_54+R_22; R_54 = pos_nodes[5][0]; R_59 := pos_nodes[3][0]; R_60 := R_54+R_59;
    R_61 := (-351.0)*R_60; R_44 = R_61+R_44; R_61 = 27.0*R_60; R_61 = R_56+R_61;
    R_56 = pow(R_61,2); R_16 = R_56+R_16; R_56 = 13.5*R_60; R_56 = R_8+R_56;
    R_7 = R_56+R_7; R_56 = (171.0/80.0)*R_60; R_8 = (-1404.0)*R_60; R_6 = R_6+R_8;
    R_6 = R_47+R_6; R_9 = R_8+R_9; R_60 = 54.0*R_60; R_53 = R_53+R_60;
    R_53 = R_43+R_53; R_43 = R_53*R_6; R_43 = (-1.0)*R_43; R_8 = pow(R_53,2);
    R_8 = R_36+R_8; R_10 = R_60+R_10; R_60 = pow(R_10,2); R_36 = R_60+R_36;
    R_60 = R_10*R_9; R_47 = (-1.0)*R_60; R_18 = R_60+R_18; R_59 = (-1.0)*R_59;
    R_54 = R_59+R_54; R_59 = -58.5*R_54; R_42 = R_59+R_42; R_55 = R_42+R_55;
    R_48 = R_59+R_48; R_59 = 0.375*R_54; R_59 = R_51+R_59; R_51 = -175.5*R_54;
    R_50 = R_51+R_50; R_42 = pow(R_50,2); R_42 = R_40+R_42; R_42 = -0.5*R_42;
    R_60 = R_10*R_50; R_49 = R_51+R_49; R_51 = R_49*R_53; R_62 := pow(R_49,2);
    R_30 = R_62+R_30; R_30 = -0.5*R_30; R_40 = R_62+R_40; R_40 = 0.5*R_40;
    R_62 = R_10*R_49; R_62 = R_62+R_41; R_63 := 810.0*R_54; R_52 = R_63+R_52;
    R_52 = R_58+R_52; R_63 = R_26+R_63; R_54 = 4.5*R_54; R_57 = R_54+R_57;
    R_26 = R_57*R_55; R_58 = pow(R_57,2); R_13 = R_58+R_13; R_58 = R_61*R_57;
    R_22 = R_54+R_22; R_50 = R_22*R_50; R_50 = R_50+R_39; R_54 = 24.0*R_50;
    R_64 := (-60.0)*R_50; R_50 = 2.0*R_50; R_50 = R_36+R_50; R_52 = R_22*R_52;
    R_52 = (-1.0)*R_52; R_6 = R_22*R_6; R_51 = R_6+R_51; R_51 = R_3+R_51;
    R_51 = R_20+R_51; R_20 = 12.0*R_51; R_51 = 48.0*R_51; R_53 = R_53*R_22;
    R_19 = R_53+R_19; R_48 = R_19*R_48; R_53 = R_22*R_19; R_53 = (-1.0/12.0)*R_53;
    R_3 = pow(R_19,2); R_9 = R_9*R_22; R_41 = R_41+R_9; R_41 = R_60+R_41;
    R_41 = R_28+R_41; R_60 = 12.0*R_41; R_41 = 48.0*R_41; R_62 = R_9+R_62;
    R_62 = R_28+R_62; R_28 = 2.0*R_62; R_62 = 48.0*R_62; R_10 = R_10*R_22;
    R_23 = R_10+R_23; R_32 = R_32*R_23; R_32 = (-1.0/12.0)*R_32; R_35 = R_23*R_35;
    R_10 = pow(R_23,2); R_49 = R_49*R_22; R_31 = R_49+R_31; R_9 = (-60.0)*R_31;
    R_6 = 24.0*R_31; R_31 = 2.0*R_31; R_31 = R_8+R_31; R_39 = R_49+R_39;
    R_49 = (-60.0)*R_39; R_65 := 24.0*R_39; R_39 = 2.0*R_39; R_66 := R_36+R_39;
    R_63 = R_63*R_22; R_67 := (-1.0)*R_63; R_67 = R_33+R_67; R_67 = R_47+R_67;
    R_67 = R_29+R_67; R_18 = R_63+R_18; R_18 = R_34+R_18; R_22 = pow(R_22,2);
    R_24 = R_22+R_24; R_24 = 1/R_24; R_3 = R_24*R_3; R_3 = (-1.0)*R_3;
    R_34 = R_31+R_3; R_7 = R_34*R_7; R_7 = R_48+R_7; R_48 = R_19*R_34;
    R_48 = R_24*R_48; R_48 = (-6.0)*R_48; R_48 = R_20+R_48; R_59 = R_48*R_59;
    R_7 = R_59+R_7; R_7 = (-1.0/80.0)*R_7; R_7 = R_53+R_7; R_7 = R_56+R_7;
    R_7 = R_45+R_7; R_7 = R_46+R_7; R_34 = (-1.0/24.0)*R_34; R_3 = R_8+R_3;
    R_8 = (-30.0)*R_3; R_9 = R_8+R_9; R_9 = R_19*R_9; R_9 = R_24*R_9;
    R_9 = R_51+R_9; R_9 = R_19*R_9; R_9 = 2.0*R_9; R_3 = 12.0*R_3;
    R_6 = R_3+R_6; R_6 = R_31*R_6; R_9 = R_6+R_9; R_9 = R_24*R_9;
    R_9 = (1.0/96.0)*R_9; R_14 = R_9+R_14; R_52 = R_14+R_52; R_21 = R_52+R_21;
    R_43 = R_21+R_43; R_43 = R_30+R_43; R_43 = (1.0/80.0)*R_43; R_34 = R_43+R_34;
    R_43 = (-193.0/60.0)+R_34; R_43 = R_5*R_43; R_7 = R_43+R_7; R_34 = (-1.0)+R_34;
    R_34 = 1/R_34; R_7 = R_34*R_7; R_7 = (-1.0)*R_7; R_7 = R_5+R_7;
    R_44 = R_44*R_7; R_44 = R_26+R_44; R_61 = R_61*R_7; R_55 = R_7*R_55;
    R_58 = R_55+R_58; R_58 = R_38+R_58; R_58 = 2.0*R_58; R_57 = R_7*R_57;
    R_7 = pow(R_7,2); R_12 = R_22+R_12; R_22 = sqrt(R_12); R_38 = 1/R_12;
    R_10 = R_38*R_10; R_10 = (-1.0)*R_10; R_55 = R_50+R_10; R_26 = R_55*R_37;
    R_26 = (-1.0/160.0)*R_26; R_32 = R_26+R_32; R_26 = R_23*R_55; R_26 = R_38*R_26;
    R_26 = (-6.0)*R_26; R_26 = R_60+R_26; R_26 = R_4*R_26; R_35 = R_26+R_35;
    R_35 = (-1.0/80.0)*R_35; R_32 = R_35+R_32; R_32 = R_17+R_32; R_32 = R_2+R_32;
    R_55 = (-1.0/24.0)*R_55; R_10 = R_36+R_10; R_39 = R_10+R_39; R_36 = R_23*R_39;
    R_36 = R_38*R_36; R_36 = (-1.0)*R_36; R_28 = R_36+R_28; R_36 = (-30.0)*R_10;
    R_64 = R_36+R_64; R_64 = R_23*R_64; R_64 = R_38*R_64; R_64 = R_41+R_64;
    R_64 = R_23*R_64; R_64 = 2.0*R_64; R_49 = R_36+R_49; R_49 = R_23*R_49;
    R_49 = R_38*R_49; R_49 = R_62+R_49; R_49 = R_23*R_49; R_49 = 2.0*R_49;
    R_10 = 12.0*R_10; R_54 = R_54+R_10; R_54 = R_50*R_54; R_54 = R_64+R_54;
    R_54 = R_38*R_54; R_54 = (1.0/96.0)*R_54; R_54 = R_67+R_54; R_42 = R_54+R_42;
    R_42 = (1.0/80.0)*R_42; R_42 = R_55+R_42; R_55 = (-193.0/60.0)+R_42; R_55 = R_0*R_55;
    R_32 = R_55+R_32; R_27 = R_32+R_27; R_42 = (-1.0)+R_42; R_42 = 1/R_42;
    R_27 = R_42*R_27; R_27 = (-1.0)*R_27; R_27 = R_0+R_27; R_15 = R_27*R_15;
    R_44 = R_15+R_44; R_44 = 2.0*R_44; R_44 = R_16+R_44; R_1 = R_44+R_1;
    R_1 = R_22*R_1; R_37 = R_37*R_27; R_37 = R_61+R_37; R_37 = 2.0*R_37;
    R_37 = R_13+R_37; R_13 = R_22*R_37; R_37 = R_39*R_37; R_37 = 0.5*R_37;
    R_25 = R_27*R_25; R_25 = R_58+R_25; R_25 = R_23*R_25; R_11 = R_27*R_11;
    R_11 = R_57+R_11; R_23 = R_23*R_11; R_23 = 2.0*R_23; R_11 = R_28*R_11;
    R_25 = R_11+R_25; R_37 = R_25+R_37; R_27 = pow(R_27,2); R_27 = R_7+R_27;
    R_22 = R_22*R_27; R_39 = R_39*R_27; R_39 = 0.5*R_39; R_23 = R_39+R_23;
    R_65 = R_10+R_65; R_65 = R_66*R_65; R_49 = R_65+R_49; R_49 = R_38*R_49;
    R_49 = (-1.0/96.0)*R_49; R_49 = R_18+R_49; R_40 = R_49+R_40; R_27 = R_40*R_27;
    R_37 = R_27+R_37; R_12 = rsqrt(R_12); R_23 = R_12*R_23; R_13 = R_23+R_13;
    R_13 = (1.0/12.0)*R_13; R_22 = R_13+R_22; R_37 = R_12*R_37; R_1 = R_37+R_1;
    R_1 = (1.0/80.0)*R_1; R_22 = R_1+R_22; res := R_22; 
    return res
