static const nvi := 1
static const nb_nodes := 6
static const nb_vertex_nodes := 2
static const center_of_var_inter := [ 1.0/2.0 ]
#
def interpolation( var_inter, val, interpolation_base )
    if interpolation_base == "lagrange"
        return val[3]*var_inter[0]*(var_inter[0]*(2675.0/12.0+var_inter[0]*(var_inter[0]*(8125.0/12.0-3125.0/12.0*var_inter[0])-7375.0/12.0))-25)+val[1]*var_inter[0]*(1+var_inter[0]*(var_inter[0]*(875.0/24.0+var_inter[0]*(625.0/24.0*var_inter[0]-625.0/12.0))-125.0/12.0))+val[0]*(1+((375.0/8.0+((625.0/8.0-625.0/24.0*var_inter[0])*var_inter[0]-2125.0/24.0)*var_inter[0])*var_inter[0]-137.0/12.0)*var_inter[0])+var_inter[0]*(25+var_inter[0]*(var_inter[0]*(8875.0/24.0+var_inter[0]*(3125.0/24.0*var_inter[0]-4375.0/12.0))-1925.0/12.0))*val[2]+val[4]*var_inter[0]*(50.0/3.0+var_inter[0]*(var_inter[0]*(6125.0/12.0+var_inter[0]*(3125.0/12.0*var_inter[0]-625))-325.0/2.0))+val[5]*var_inter[0]*(var_inter[0]*(1525.0/24.0+var_inter[0]*(var_inter[0]*(6875.0/24.0-3125.0/24.0*var_inter[0])-5125.0/24.0))-25.0/4.0)
    else if interpolation_base == "hierarchical"
        return val[3]*var_inter[0]*(var_inter[0]*(2675.0/12.0+var_inter[0]*(var_inter[0]*(8125.0/12.0-3125.0/12.0*var_inter[0])-7375.0/12.0))-25)+val[1]*var_inter[0]+val[0]*(1-var_inter[0])+var_inter[0]*(25+var_inter[0]*(var_inter[0]*(8875.0/24.0+var_inter[0]*(3125.0/24.0*var_inter[0]-4375.0/12.0))-1925.0/12.0))*val[2]+val[4]*var_inter[0]*(50.0/3.0+var_inter[0]*(var_inter[0]*(6125.0/12.0+var_inter[0]*(3125.0/12.0*var_inter[0]-625))-325.0/2.0))+val[5]*var_inter[0]*(var_inter[0]*(1525.0/24.0+var_inter[0]*(var_inter[0]*(6875.0/24.0-3125.0/24.0*var_inter[0])-5125.0/24.0))-25.0/4.0)

#
def generic_interpolation( var_inter, val, interpolation_base, deg ) when deg == 5
    if interpolation_base == "lagrange"
        return var_inter[0]*(50.0/3.0+var_inter[0]*(var_inter[0]*(6125.0/12.0+var_inter[0]*(3125.0/12.0*var_inter[0]-625))-325.0/2.0))*val[3]+val[2]*var_inter[0]*(var_inter[0]*(2675.0/12.0+var_inter[0]*(var_inter[0]*(8125.0/12.0-3125.0/12.0*var_inter[0])-7375.0/12.0))-25)+val[0]*(1+((375.0/8.0+((625.0/8.0-625.0/24.0*var_inter[0])*var_inter[0]-2125.0/24.0)*var_inter[0])*var_inter[0]-137.0/12.0)*var_inter[0])+var_inter[0]*(25+var_inter[0]*(var_inter[0]*(8875.0/24.0+var_inter[0]*(3125.0/24.0*var_inter[0]-4375.0/12.0))-1925.0/12.0))*val[1]+val[4]*var_inter[0]*(var_inter[0]*(1525.0/24.0+var_inter[0]*(var_inter[0]*(6875.0/24.0-3125.0/24.0*var_inter[0])-5125.0/24.0))-25.0/4.0)+var_inter[0]*(1+var_inter[0]*(var_inter[0]*(875.0/24.0+var_inter[0]*(625.0/24.0*var_inter[0]-625.0/12.0))-125.0/12.0))*val[5]
    else if interpolation_base == "hierarchical"
        return val[4]*var_inter[0]*(var_inter[0]*(1525.0/24.0+var_inter[0]*(var_inter[0]*(6875.0/24.0-3125.0/24.0*var_inter[0])-5125.0/24.0))-25.0/4.0)+var_inter[0]*(50.0/3.0+var_inter[0]*(var_inter[0]*(6125.0/12.0+var_inter[0]*(3125.0/12.0*var_inter[0]-625))-325.0/2.0))*val[3]+val[2]*var_inter[0]*(var_inter[0]*(2675.0/12.0+var_inter[0]*(var_inter[0]*(8125.0/12.0-3125.0/12.0*var_inter[0])-7375.0/12.0))-25)+var_inter[0]*(25+var_inter[0]*(var_inter[0]*(8875.0/24.0+var_inter[0]*(3125.0/24.0*var_inter[0]-4375.0/12.0))-1925.0/12.0))*val[1]+(1-var_inter[0])*val[0]+var_inter[0]*val[5]

#
def generic_interpolation( var_inter, val, interpolation_base, deg ) when deg == 6
    if interpolation_base == "lagrange"
        return val[5]*var_inter[0]*(36.0/5.0+var_inter[0]*(var_inter[0]*(468+var_inter[0]*(var_inter[0]*(5184.0/5.0-1944.0/5.0*var_inter[0])-1026))-486.0/5.0))+val[1]*var_inter[0]*(36+var_inter[0]*(var_inter[0]*(1044+var_inter[0]*(var_inter[0]*(1296-1944.0/5.0*var_inter[0])-1674))-1566.0/5.0))+val[0]*(1+var_inter[0]*(var_inter[0]*(406.0/5.0+var_inter[0]*(var_inter[0]*(315+var_inter[0]*(324.0/5.0*var_inter[0]-1134.0/5.0))-441.0/2.0))-147.0/10.0))+val[2]*var_inter[0]*(var_inter[0]*(1053.0/2.0+var_inter[0]*(var_inter[0]*(3699+var_inter[0]*(972*var_inter[0]-3078))-4149.0/2.0))-45)+val[3]*var_inter[0]*(40+var_inter[0]*(var_inter[0]*(2232+var_inter[0]*(var_inter[0]*(3888-1296*var_inter[0])-4356))-508))+val[4]*var_inter[0]*(var_inter[0]*(297+var_inter[0]*(var_inter[0]*(2889+var_inter[0]*(972*var_inter[0]-2754))-2763.0/2.0))-45.0/2.0)+val[6]*var_inter[0]*(var_inter[0]*(137.0/10.0+var_inter[0]*(var_inter[0]*(153+var_inter[0]*(324.0/5.0*var_inter[0]-162))-135.0/2.0))-1)
    else if interpolation_base == "hierarchical"
        return val[5]*var_inter[0]*(36.0/5.0+var_inter[0]*(var_inter[0]*(468+var_inter[0]*(var_inter[0]*(5184.0/5.0-1944.0/5.0*var_inter[0])-1026))-486.0/5.0))+val[4]*var_inter[0]*(var_inter[0]*(297+var_inter[0]*(var_inter[0]*(2889+var_inter[0]*(972*var_inter[0]-2754))-2763.0/2.0))-45.0/2.0)+val[3]*var_inter[0]*(40+var_inter[0]*(var_inter[0]*(2232+var_inter[0]*(var_inter[0]*(3888-1296*var_inter[0])-4356))-508))+val[1]*var_inter[0]*(36+var_inter[0]*(var_inter[0]*(1044+var_inter[0]*(var_inter[0]*(1296-1944.0/5.0*var_inter[0])-1674))-1566.0/5.0))+(1-var_inter[0])*val[0]+val[2]*var_inter[0]*(var_inter[0]*(1053.0/2.0+var_inter[0]*(var_inter[0]*(3699+var_inter[0]*(972*var_inter[0]-3078))-4149.0/2.0))-45)+val[6]*var_inter[0]

#
def generic_interpolation( var_inter, val, interpolation_base, deg ) when deg == 7
    if interpolation_base == "lagrange"
        return var_inter[0]*(1+((9947.0/90.0+((84035.0/144.0+(117649.0/720.0*var_inter[0]-117649.0/240.0)*var_inter[0])*var_inter[0]-16807.0/48.0)*var_inter[0])*var_inter[0]-343.0/20.0)*var_inter[0])*val[7]+((49931.0/360.0+((98441.0/36.0+((1294139.0/360.0-823543.0/720.0*var_inter[0])*var_inter[0]-319333.0/72.0)*var_inter[0])*var_inter[0]-634207.0/720.0)*var_inter[0])*var_inter[0]-49.0/6.0)*var_inter[0]*val[6]+val[5]*var_inter[0]*(147.0/5.0+((45962.0/15.0+((1159683.0/80.0+(823543.0/240.0*var_inter[0]-2705927.0/240.0)*var_inter[0])*var_inter[0]-444185.0/48.0)*var_inter[0])*var_inter[0]-9849.0/20.0)*var_inter[0])+(1+var_inter[0]*(var_inter[0]*(22981.0/180.0+var_inter[0]*(var_inter[0]*(16807.0/18.0+var_inter[0]*(var_inter[0]*(117649.0/180.0-117649.0/720.0*var_inter[0])-386561.0/360.0))-331681.0/720.0))-363.0/20.0))*val[0]+(49+var_inter[0]*(var_inter[0]*(109417.0/45.0+var_inter[0]*(var_inter[0]*(991613.0/144.0+var_inter[0]*(823543.0/720.0*var_inter[0]-352947.0/80.0))-88837.0/16.0))-10927.0/20.0))*var_inter[0]*val[1]+val[2]*var_inter[0]*(var_inter[0]*(43071.0/40.0+((170471.0/12.0+((1529437.0/120.0-823543.0/240.0*var_inter[0])*var_inter[0]-151263.0/8.0)*var_inter[0])*var_inter[0]-1347647.0/240.0)*var_inter[0])-147.0/2.0)+val[3]*(245.0/3.0+var_inter[0]*((133427.0/18.0+(var_inter[0]*(4151329.0/144.0+(823543.0/144.0*var_inter[0]-2941225.0/144.0)*var_inter[0])-2926819.0/144.0)*var_inter[0])*var_inter[0]-46501.0/36.0))*var_inter[0]+var_inter[0]*(var_inter[0]*(2009.0/2.0+((52822.0/3.0+((117649.0/6.0-823543.0/144.0*var_inter[0])*var_inter[0]-1899191.0/72.0)*var_inter[0])*var_inter[0]-872935.0/144.0)*var_inter[0])-245.0/4.0)*val[4]
    else if interpolation_base == "hierarchical"
        return var_inter[0]*val[7]+(49+var_inter[0]*(var_inter[0]*(109417.0/45.0+var_inter[0]*(var_inter[0]*(991613.0/144.0+var_inter[0]*(823543.0/720.0*var_inter[0]-352947.0/80.0))-88837.0/16.0))-10927.0/20.0))*var_inter[0]*val[1]+(1-var_inter[0])*val[0]+val[2]*var_inter[0]*(var_inter[0]*(43071.0/40.0+((170471.0/12.0+((1529437.0/120.0-823543.0/240.0*var_inter[0])*var_inter[0]-151263.0/8.0)*var_inter[0])*var_inter[0]-1347647.0/240.0)*var_inter[0])-147.0/2.0)+val[3]*(245.0/3.0+var_inter[0]*((133427.0/18.0+(var_inter[0]*(4151329.0/144.0+(823543.0/144.0*var_inter[0]-2941225.0/144.0)*var_inter[0])-2926819.0/144.0)*var_inter[0])*var_inter[0]-46501.0/36.0))*var_inter[0]+var_inter[0]*(var_inter[0]*(2009.0/2.0+((52822.0/3.0+((117649.0/6.0-823543.0/144.0*var_inter[0])*var_inter[0]-1899191.0/72.0)*var_inter[0])*var_inter[0]-872935.0/144.0)*var_inter[0])-245.0/4.0)*val[4]+val[5]*var_inter[0]*(147.0/5.0+((45962.0/15.0+((1159683.0/80.0+(823543.0/240.0*var_inter[0]-2705927.0/240.0)*var_inter[0])*var_inter[0]-444185.0/48.0)*var_inter[0])*var_inter[0]-9849.0/20.0)*var_inter[0])+((49931.0/360.0+((98441.0/36.0+((1294139.0/360.0-823543.0/720.0*var_inter[0])*var_inter[0]-319333.0/72.0)*var_inter[0])*var_inter[0]-634207.0/720.0)*var_inter[0])*var_inter[0]-49.0/6.0)*var_inter[0]*val[6]

#
def generic_interpolation( var_inter, val, interpolation_base, deg ) when deg == 8
    if interpolation_base == "lagrange"
        return ((726.0/35.0+((30944.0/45.0+((94208.0/45.0+(131072.0/315.0*var_inter[0]-65536.0/45.0)*var_inter[0])*var_inter[0]-14336.0/9.0)*var_inter[0])*var_inter[0]-7504.0/45.0)*var_inter[0])*var_inter[0]-1)*var_inter[0]*val[8]+(64.0/7.0+((67456.0/45.0+((124928.0/9.0+((3801088.0/315.0-1048576.0/315.0*var_inter[0])*var_inter[0]-802816.0/45.0)*var_inter[0])*var_inter[0]-274432.0/45.0)*var_inter[0])*var_inter[0]-6592.0/35.0)*var_inter[0])*var_inter[0]*val[7]+((34288.0/45.0+((358784.0/15.0+((999424.0/15.0+(524288.0/45.0*var_inter[0]-131072.0/3.0)*var_inter[0])*var_inter[0]-53248)*var_inter[0])*var_inter[0]-5984)*var_inter[0])*var_inter[0]-112.0/3.0)*var_inter[0]*val[6]+(448.0/5.0+((626048.0/45.0+((5285888.0/45.0+((4063232.0/45.0-1048576.0/45.0*var_inter[0])*var_inter[0]-6406144.0/45.0)*var_inter[0])*var_inter[0]-2443264.0/45.0)*var_inter[0])*var_inter[0]-9024.0/5.0)*var_inter[0])*var_inter[0]*val[5]+val[1]*(64+var_inter[0]*((44672.0/9.0+((235520.0/9.0+((131072.0/9.0-1048576.0/315.0*var_inter[0])*var_inter[0]-1196032.0/45.0)*var_inter[0])*var_inter[0]-673792.0/45.0)*var_inter[0])*var_inter[0]-30784.0/35.0))*var_inter[0]+val[0]*(1+((59062.0/315.0+((34208.0/15.0+((53248.0/15.0+(131072.0/315.0*var_inter[0]-65536.0/35.0)*var_inter[0])*var_inter[0]-18432.0/5.0)*var_inter[0])*var_inter[0]-4272.0/5.0)*var_inter[0])*var_inter[0]-761.0/35.0)*var_inter[0])+((9936.0/5.0+((1956992.0/45.0+((3915776.0/45.0+(524288.0/45.0*var_inter[0]-2228224.0/45.0)*var_inter[0])*var_inter[0]-733184.0/9.0)*var_inter[0])*var_inter[0]-587296.0/45.0)*var_inter[0])*var_inter[0]-112)*var_inter[0]*val[2]+(448.0/3.0+((102016.0/5.0+((145408+((1441792.0/15.0-1048576.0/45.0*var_inter[0])*var_inter[0]-2441216.0/15.0)*var_inter[0])*var_inter[0]-1097728.0/15.0)*var_inter[0])*var_inter[0]-128192.0/45.0)*var_inter[0])*var_inter[0]*val[3]+var_inter[0]*((2764+((703552.0/9.0+((1712128.0/9.0+(262144.0/9.0*var_inter[0]-1048576.0/9.0)*var_inter[0])*var_inter[0]-1466368.0/9.0)*var_inter[0])*var_inter[0]-186496.0/9.0)*var_inter[0])*var_inter[0]-140)*val[4]
    else if interpolation_base == "hierarchical"
        return var_inter[0]*val[8]+(64.0/7.0+((67456.0/45.0+((124928.0/9.0+((3801088.0/315.0-1048576.0/315.0*var_inter[0])*var_inter[0]-802816.0/45.0)*var_inter[0])*var_inter[0]-274432.0/45.0)*var_inter[0])*var_inter[0]-6592.0/35.0)*var_inter[0])*var_inter[0]*val[7]+((34288.0/45.0+((358784.0/15.0+((999424.0/15.0+(524288.0/45.0*var_inter[0]-131072.0/3.0)*var_inter[0])*var_inter[0]-53248)*var_inter[0])*var_inter[0]-5984)*var_inter[0])*var_inter[0]-112.0/3.0)*var_inter[0]*val[6]+(448.0/5.0+((626048.0/45.0+((5285888.0/45.0+((4063232.0/45.0-1048576.0/45.0*var_inter[0])*var_inter[0]-6406144.0/45.0)*var_inter[0])*var_inter[0]-2443264.0/45.0)*var_inter[0])*var_inter[0]-9024.0/5.0)*var_inter[0])*var_inter[0]*val[5]+var_inter[0]*((2764+((703552.0/9.0+((1712128.0/9.0+(262144.0/9.0*var_inter[0]-1048576.0/9.0)*var_inter[0])*var_inter[0]-1466368.0/9.0)*var_inter[0])*var_inter[0]-186496.0/9.0)*var_inter[0])*var_inter[0]-140)*val[4]+(448.0/3.0+((102016.0/5.0+((145408+((1441792.0/15.0-1048576.0/45.0*var_inter[0])*var_inter[0]-2441216.0/15.0)*var_inter[0])*var_inter[0]-1097728.0/15.0)*var_inter[0])*var_inter[0]-128192.0/45.0)*var_inter[0])*var_inter[0]*val[3]+((9936.0/5.0+((1956992.0/45.0+((3915776.0/45.0+(524288.0/45.0*var_inter[0]-2228224.0/45.0)*var_inter[0])*var_inter[0]-733184.0/9.0)*var_inter[0])*var_inter[0]-587296.0/45.0)*var_inter[0])*var_inter[0]-112)*var_inter[0]*val[2]+(1-var_inter[0])*val[0]+val[1]*(64+var_inter[0]*((44672.0/9.0+((235520.0/9.0+((131072.0/9.0-1048576.0/315.0*var_inter[0])*var_inter[0]-1196032.0/45.0)*var_inter[0])*var_inter[0]-673792.0/45.0)*var_inter[0])*var_inter[0]-30784.0/35.0))*var_inter[0]

#
def interpolation_vertex( var_inter, val_vertex )
    return val_vertex[1]*var_inter[0]+val_vertex[0]*(1-var_inter[0])
#
def nb_children( sub_nvi ) when sub_nvi==0
    return 1
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==0
    return child_var_inter
def type_child( sub_nvi, num_child ) when sub_nvi==0
    return Bar_6
def node_number_child( sub_nvi, num_child ) when sub_nvi==0
    return 0 .. 6
#
def nb_children( sub_nvi ) when sub_nvi==1
    return 2
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==0
    return [0]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return [0]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==1
    return [1]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return [1]
def normal( var_inter, pos_nodes )
    res := Vec[ type_promote(var_inter[0],pos_nodes[0][0],mul), 2 ]()
    R_0 := pos_nodes[4][0]; R_1 := pos_nodes[3][0]; R_2 := pos_nodes[2][0]; R_3 := pos_nodes[1][0];
    R_4 := pos_nodes[0][0]; R_5 := pos_nodes[5][0]; R_6 := pos_nodes[5][1]; R_7 := pos_nodes[4][1];
    R_8 := pos_nodes[3][1]; R_9 := pos_nodes[2][1]; R_10 := pos_nodes[0][1]; R_11 := var_inter[0];
    R_12 := (-15625.0/24.0)*R_11; R_12 = (6875.0/6.0)+R_12; R_12 = R_12*R_11; R_12 = -640.625+R_12;
    R_12 = R_12*R_11; R_12 = (1525.0/12.0)+R_12; R_12 = R_12*R_11; R_12 = -6.25+R_12;
    R_5 = R_5*R_12; R_12 = R_6*R_12; R_6 = (15625.0/12.0)*R_11; R_6 = (-2500.0)+R_6;
    R_6 = R_6*R_11; R_6 = 1531.25+R_6; R_6 = R_6*R_11; R_6 = (-325.0)+R_6;
    R_6 = R_6*R_11; R_6 = (50.0/3.0)+R_6; R_0 = R_0*R_6; R_6 = R_7*R_6;
    R_7 = (-15625.0/12.0)*R_11; R_7 = (8125.0/3.0)+R_7; R_7 = R_7*R_11; R_7 = -1843.75+R_7;
    R_7 = R_7*R_11; R_7 = (2675.0/6.0)+R_7; R_7 = R_7*R_11; R_7 = (-25.0)+R_7;
    R_1 = R_1*R_7; R_7 = R_8*R_7; R_8 = (15625.0/24.0)*R_11; R_8 = (-4375.0/3.0)+R_8;
    R_8 = R_8*R_11; R_8 = 1109.38+R_8; R_8 = R_8*R_11; R_8 = (-1925.0/6.0)+R_8;
    R_8 = R_8*R_11; R_8 = 25.0+R_8; R_2 = R_2*R_8; R_8 = R_9*R_8;
    R_9 = (-3125.0/24.0)*R_11; R_9 = 312.5+R_9; R_9 = R_9*R_11; R_9 = -265.625+R_9;
    R_9 = R_9*R_11; R_9 = 93.75+R_9; R_9 = R_9*R_11; R_9 = (-137.0/12.0)+R_9;
    R_4 = R_4*R_9; R_9 = R_10*R_9; R_10 = (3125.0/24.0)*R_11; R_10 = (-625.0/3.0)+R_10;
    R_10 = R_10*R_11; R_10 = 109.375+R_10; R_10 = R_10*R_11; R_10 = (-125.0/6.0)+R_10;
    R_11 = R_10*R_11; R_11 = 1.0+R_11; R_3 = R_3*R_11; R_3 = R_4+R_3;
    R_2 = R_3+R_2; R_1 = R_2+R_1; R_0 = R_1+R_0; R_0 = R_5+R_0;
    R_5 = pow(R_0,2); R_1 = pos_nodes[1][1]; R_11 = R_1*R_11; R_9 = R_11+R_9;
    R_8 = R_9+R_8; R_7 = R_8+R_7; R_6 = R_7+R_6; R_12 = R_6+R_12;
    R_6 = pow(R_12,2); R_6 = R_5+R_6; R_6 = rsqrt(R_6); R_0 = R_0*R_6;
    R_0 = (-1.0)*R_0; res[1] = R_0; R_6 = R_12*R_6; res[0] = R_6;
    return res
#
def jac_mat( var_inter, pos_nodes )
    res := Mat[ type_promote(var_inter[0],pos_nodes[0][0],mul), Gen[ 1, 2 ] ]()
    R_0 := pos_nodes[5][1]; R_1 := pos_nodes[4][1]; R_2 := pos_nodes[3][1]; R_3 := pos_nodes[2][1];
    R_4 := pos_nodes[0][1]; R_5 := pos_nodes[1][1]; R_6 := pos_nodes[4][0]; R_7 := pos_nodes[3][0];
    R_8 := pos_nodes[2][0]; R_9 := pos_nodes[1][0]; R_10 := pos_nodes[0][0]; R_11 := var_inter[0];
    R_12 := (15625.0/12.0)*R_11; R_12 = (-2500.0)+R_12; R_12 = R_12*R_11; R_12 = 1531.25+R_12;
    R_12 = R_12*R_11; R_12 = (-325.0)+R_12; R_12 = R_12*R_11; R_12 = (50.0/3.0)+R_12;
    R_1 = R_1*R_12; R_12 = R_6*R_12; R_6 = (-15625.0/12.0)*R_11; R_6 = (8125.0/3.0)+R_6;
    R_6 = R_6*R_11; R_6 = -1843.75+R_6; R_6 = R_6*R_11; R_6 = (2675.0/6.0)+R_6;
    R_6 = R_6*R_11; R_6 = (-25.0)+R_6; R_2 = R_2*R_6; R_6 = R_7*R_6;
    R_7 = (15625.0/24.0)*R_11; R_7 = (-4375.0/3.0)+R_7; R_7 = R_7*R_11; R_7 = 1109.38+R_7;
    R_7 = R_7*R_11; R_7 = (-1925.0/6.0)+R_7; R_7 = R_7*R_11; R_7 = 25.0+R_7;
    R_3 = R_3*R_7; R_7 = R_8*R_7; R_8 = (3125.0/24.0)*R_11; R_8 = (-625.0/3.0)+R_8;
    R_8 = R_8*R_11; R_8 = 109.375+R_8; R_8 = R_8*R_11; R_8 = (-125.0/6.0)+R_8;
    R_8 = R_8*R_11; R_8 = 1.0+R_8; R_5 = R_5*R_8; R_8 = R_9*R_8;
    R_9 = (-3125.0/24.0)*R_11; R_9 = 312.5+R_9; R_9 = R_9*R_11; R_9 = -265.625+R_9;
    R_9 = R_9*R_11; R_9 = 93.75+R_9; R_9 = R_9*R_11; R_9 = (-137.0/12.0)+R_9;
    R_4 = R_4*R_9; R_4 = R_5+R_4; R_3 = R_4+R_3; R_2 = R_3+R_2;
    R_1 = R_2+R_1; R_9 = R_10*R_9; R_8 = R_9+R_8; R_7 = R_8+R_7;
    R_6 = R_7+R_6; R_12 = R_6+R_12; R_6 = (-15625.0/24.0)*R_11; R_6 = (6875.0/6.0)+R_6;
    R_6 = R_6*R_11; R_6 = -640.625+R_6; R_6 = R_6*R_11; R_6 = (1525.0/12.0)+R_6;
    R_11 = R_6*R_11; R_11 = -6.25+R_11; R_0 = R_0*R_11; R_0 = R_1+R_0;
    res(0,1) = R_0; R_0 = pos_nodes[5][0]; R_11 = R_0*R_11; R_12 = R_11+R_12;
    res(0,0) = R_12; 
    return res
#
def jac( var_inter, pos_nodes )
    R_0 := pos_nodes[5][1]; R_1 := pos_nodes[4][1]; R_2 := pos_nodes[3][1]; R_3 := pos_nodes[2][1];
    R_4 := pos_nodes[0][1]; R_5 := pos_nodes[1][1]; R_6 := pos_nodes[4][0]; R_7 := pos_nodes[3][0];
    R_8 := pos_nodes[2][0]; R_9 := pos_nodes[1][0]; R_10 := pos_nodes[0][0]; R_11 := var_inter[0];
    R_12 := (15625.0/12.0)*R_11; R_12 = (-2500.0)+R_12; R_12 = R_12*R_11; R_12 = 1531.25+R_12;
    R_12 = R_12*R_11; R_12 = (-325.0)+R_12; R_12 = R_12*R_11; R_12 = (50.0/3.0)+R_12;
    R_1 = R_1*R_12; R_12 = R_6*R_12; R_6 = (-15625.0/12.0)*R_11; R_6 = (8125.0/3.0)+R_6;
    R_6 = R_6*R_11; R_6 = -1843.75+R_6; R_6 = R_6*R_11; R_6 = (2675.0/6.0)+R_6;
    R_6 = R_6*R_11; R_6 = (-25.0)+R_6; R_2 = R_2*R_6; R_6 = R_7*R_6;
    R_7 = (15625.0/24.0)*R_11; R_7 = (-4375.0/3.0)+R_7; R_7 = R_7*R_11; R_7 = 1109.38+R_7;
    R_7 = R_7*R_11; R_7 = (-1925.0/6.0)+R_7; R_7 = R_7*R_11; R_7 = 25.0+R_7;
    R_3 = R_3*R_7; R_7 = R_8*R_7; R_8 = (3125.0/24.0)*R_11; R_8 = (-625.0/3.0)+R_8;
    R_8 = R_8*R_11; R_8 = 109.375+R_8; R_8 = R_8*R_11; R_8 = (-125.0/6.0)+R_8;
    R_8 = R_8*R_11; R_8 = 1.0+R_8; R_5 = R_5*R_8; R_8 = R_9*R_8;
    R_9 = (-3125.0/24.0)*R_11; R_9 = 312.5+R_9; R_9 = R_9*R_11; R_9 = -265.625+R_9;
    R_9 = R_9*R_11; R_9 = 93.75+R_9; R_9 = R_9*R_11; R_9 = (-137.0/12.0)+R_9;
    R_4 = R_4*R_9; R_4 = R_5+R_4; R_3 = R_4+R_3; R_2 = R_3+R_2;
    R_1 = R_2+R_1; R_9 = R_10*R_9; R_8 = R_9+R_8; R_7 = R_8+R_7;
    R_6 = R_7+R_6; R_12 = R_6+R_12; R_6 = (-15625.0/24.0)*R_11; R_6 = (6875.0/6.0)+R_6;
    R_6 = R_6*R_11; R_6 = -640.625+R_6; R_6 = R_6*R_11; R_6 = (1525.0/12.0)+R_6;
    R_11 = R_6*R_11; R_11 = -6.25+R_11; R_0 = R_0*R_11; R_0 = R_1+R_0;
    R_0 = pow(R_0,2); R_1 = pos_nodes[5][0]; R_11 = R_1*R_11; R_12 = R_11+R_12;
    R_12 = pow(R_12,2); R_0 = R_12+R_0; R_0 = sqrt(R_0); res := R_0;
    return res
#
def inv_jac_mat( var_inter, pos_nodes )
    assert( 0, "inv_jac_mat() available only when nb var inter == dim" )
#
def measure( var_inter, pos_nodes )
    R_0 := pos_nodes[0][1]; R_1 := (-1.0)*R_0; R_2 := pos_nodes[1][1]; R_1 = R_2+R_1;
    R_3 := (3125.0/24.0)*R_1; R_4 := (-125.0/16.0)*R_1; R_1 = (3.0/128.0)*R_1; R_0 = R_2+R_0;
    R_2 = (625.0/12.0)*R_0; R_0 = (-125.0/48.0)*R_0; R_5 := pos_nodes[5][1]; R_6 := pos_nodes[2][1];
    R_7 := (-1.0)*R_6; R_7 = R_5+R_7; R_8 := (-15625.0/24.0)*R_7; R_9 := (1625.0/16.0)*R_7;
    R_7 = (-125.0/384.0)*R_7; R_5 = R_6+R_5; R_6 = -156.25*R_5; R_5 = (325.0/16.0)*R_5;
    R_10 := pos_nodes[4][1]; R_11 := pos_nodes[3][1]; R_12 := (-1.0)*R_11; R_12 = R_10+R_12;
    R_13 := (15625.0/12.0)*R_12; R_13 = R_8+R_13; R_3 = R_13+R_3; R_13 = -265.625*R_12;
    R_13 = R_9+R_13; R_4 = R_13+R_4; R_13 = pow(R_4,2); R_12 = (375.0/64.0)*R_12;
    R_12 = R_7+R_12; R_1 = R_12+R_1; R_3 = R_1*R_3; R_12 = pow(R_1,2);
    R_7 = R_1*R_4; R_10 = R_11+R_10; R_11 = (625.0/6.0)*R_10; R_11 = R_6+R_11;
    R_2 = R_11+R_2; R_11 = R_1*R_2; R_10 = (-425.0/24.0)*R_10; R_5 = R_10+R_5;
    R_0 = R_5+R_0; R_4 = R_0*R_4; R_2 = R_0*R_2; R_1 = R_1*R_0;
    R_0 = pow(R_0,2); R_5 = (-1.0)*R_0; R_10 = pos_nodes[0][0]; R_6 = pos_nodes[1][0];
    R_9 = (-1.0)*R_6; R_9 = R_10+R_9; R_8 = (-3125.0/24.0)*R_9; R_14 := (125.0/16.0)*R_9;
    R_9 = (-3.0/128.0)*R_9; R_10 = R_6+R_10; R_6 = (625.0/12.0)*R_10; R_10 = (-125.0/48.0)*R_10;
    R_15 := pos_nodes[5][0]; R_16 := pos_nodes[2][0]; R_17 := (-1.0)*R_16; R_17 = R_15+R_17;
    R_18 := (-15625.0/24.0)*R_17; R_19 := (1625.0/16.0)*R_17; R_17 = (-125.0/384.0)*R_17; R_15 = R_16+R_15;
    R_16 = -156.25*R_15; R_15 = (325.0/16.0)*R_15; R_20 := pos_nodes[4][0]; R_21 := pos_nodes[3][0];
    R_22 := (-1.0)*R_21; R_22 = R_20+R_22; R_23 := (15625.0/12.0)*R_22; R_23 = R_18+R_23;
    R_8 = R_23+R_8; R_23 = -265.625*R_22; R_23 = R_19+R_23; R_14 = R_23+R_14;
    R_23 = pow(R_14,2); R_13 = R_23+R_13; R_22 = (375.0/64.0)*R_22; R_22 = R_17+R_22;
    R_9 = R_22+R_9; R_8 = R_9*R_8; R_22 = pow(R_9,2); R_12 = R_22+R_12;
    R_22 = sqrt(R_12); R_17 = rsqrt(R_12); R_12 = 1/R_12; R_23 = R_9*R_14;
    R_7 = R_23+R_7; R_23 = (-60.0)*R_7; R_19 = 24.0*R_7; R_7 = 2.0*R_7;
    R_20 = R_21+R_20; R_21 = (625.0/6.0)*R_20; R_21 = R_16+R_21; R_6 = R_21+R_6;
    R_21 = R_9*R_6; R_20 = (-425.0/24.0)*R_20; R_15 = R_20+R_15; R_10 = R_15+R_10;
    R_14 = R_10*R_14; R_21 = R_14+R_21; R_21 = R_4+R_21; R_21 = R_11+R_21;
    R_21 = 48.0*R_21; R_6 = R_10*R_6; R_8 = R_6+R_8; R_8 = R_2+R_8;
    R_8 = R_3+R_8; R_8 = 2.0*R_8; R_8 = R_13+R_8; R_8 = 24.0*R_8;
    R_9 = R_9*R_10; R_1 = R_9+R_1; R_9 = pow(R_1,2); R_9 = R_12*R_9;
    R_5 = R_9+R_5; R_9 = (-1.0)*R_9; R_10 = pow(R_10,2); R_13 = (-1.0)*R_10;
    R_13 = R_5+R_13; R_5 = 30.0*R_13; R_23 = R_5+R_23; R_23 = R_1*R_23;
    R_23 = R_12*R_23; R_23 = R_21+R_23; R_23 = R_1*R_23; R_23 = 2.0*R_23;
    R_13 = (-12.0)*R_13; R_13 = R_19+R_13; R_0 = R_10+R_0; R_7 = R_0+R_7;
    R_13 = R_7*R_13; R_23 = R_13+R_23; R_23 = R_12*R_23; R_23 = -0.5*R_23;
    R_23 = R_8+R_23; R_23 = R_23*R_17; R_23 = (1.0/3840.0)*R_23; R_9 = R_7+R_9;
    R_17 = R_9*R_17; R_17 = (1.0/24.0)*R_17; R_22 = R_17+R_22; R_23 = R_22+R_23;
    res := R_23; 
    return res
#
def barycenter( var_inter, pos_nodes )
    res := Vec[ type_promote(var_inter[0],pos_nodes[0][0],mul), 2 ]()
    R_0 := pos_nodes[0][1]; R_1 := (-1.0)*R_0; R_2 := pos_nodes[1][1]; R_3 := (-1.0)*R_2;
    R_3 = R_0+R_3; R_3 = (-3.0/128.0)*R_3; R_1 = R_2+R_1; R_4 := (-125.0/48.0)*R_1;
    R_5 := (1.0/512.0)*R_1; R_6 := (-125.0/16.0)*R_1; R_7 := (3125.0/24.0)*R_1; R_1 = (3.0/128.0)*R_1;
    R_0 = R_2+R_0; R_2 = (-125.0/96.0)*R_0; R_8 := (3.0/256.0)*R_0; R_9 := (625.0/48.0)*R_0;
    R_10 := (-125.0/192.0)*R_0; R_11 := (625.0/12.0)*R_0; R_0 = (-125.0/48.0)*R_0; R_12 := pos_nodes[5][1];
    R_13 := (-1.0)*R_12; R_14 := pos_nodes[2][1]; R_13 = R_14+R_13; R_15 := (125.0/384.0)*R_13;
    R_15 = R_3+R_15; R_16 := (-1625.0/16.0)*R_13; R_13 = (15625.0/24.0)*R_13; R_17 := (-1.0)*R_14;
    R_17 = R_12+R_17; R_18 := (1625.0/48.0)*R_17; R_19 := (-125.0/4608.0)*R_17; R_20 := (1625.0/16.0)*R_17;
    R_20 = R_20+R_6; R_21 := (-15625.0/24.0)*R_17; R_21 = R_21+R_7; R_17 = (-125.0/384.0)*R_17;
    R_3 = R_17+R_3; R_1 = R_17+R_1; R_12 = R_14+R_12; R_14 = (325.0/32.0)*R_12;
    R_17 = (-25.0/256.0)*R_12; R_17 = R_8+R_17; R_8 = (-625.0/16.0)*R_12; R_8 = R_9+R_8;
    R_9 = (325.0/64.0)*R_12; R_22 := -156.25*R_12; R_23 := R_22+R_11; R_12 = (325.0/16.0)*R_12;
    R_24 := pos_nodes[4][1]; R_25 := (-1.0)*R_24; R_26 := pos_nodes[3][1]; R_25 = R_26+R_25;
    R_27 := (2125.0/24.0)*R_25; R_27 = R_4+R_27; R_18 = R_27+R_18; R_27 = 265.625*R_25;
    R_27 = R_6+R_27; R_16 = R_27+R_16; R_27 = pow(R_16,2); R_6 = (-15625.0/12.0)*R_25;
    R_6 = R_7+R_6; R_13 = R_6+R_13; R_25 = (-375.0/64.0)*R_25; R_15 = R_25+R_15;
    R_25 = R_3+R_25; R_3 = R_25*R_16; R_13 = R_25*R_13; R_6 = pow(R_25,2);
    R_7 = (-1.0)*R_26; R_7 = R_24+R_7; R_4 = (125.0/256.0)*R_7; R_4 = R_5+R_4;
    R_4 = R_19+R_4; R_19 = -265.625*R_7; R_20 = R_19+R_20; R_19 = pow(R_20,2);
    R_5 = (15625.0/12.0)*R_7; R_21 = R_5+R_21; R_7 = (375.0/64.0)*R_7; R_1 = R_7+R_1;
    R_7 = R_1*R_20; R_5 = pow(R_1,2); R_21 = R_1*R_21; R_21 = (-1.0)*R_21;
    R_24 = R_26+R_24; R_26 = (-425.0/48.0)*R_24; R_26 = R_2+R_26; R_26 = R_14+R_26;
    R_14 = (75.0/128.0)*R_24; R_14 = R_17+R_14; R_17 = (625.0/24.0)*R_24; R_17 = R_8+R_17;
    R_8 = (-425.0/96.0)*R_24; R_8 = R_10+R_8; R_8 = R_9+R_8; R_9 = (625.0/6.0)*R_24;
    R_11 = R_9+R_11; R_11 = R_22+R_11; R_22 = R_25*R_11; R_23 = R_9+R_23;
    R_9 = R_1*R_23; R_24 = (-425.0/24.0)*R_24; R_10 = R_24+R_0; R_10 = R_12+R_10;
    R_16 = R_10*R_16; R_25 = R_25*R_10; R_2 = pow(R_10,2); R_28 := (-1.0)*R_2;
    R_11 = R_10*R_11; R_12 = R_24+R_12; R_0 = R_12+R_0; R_20 = R_0*R_20;
    R_12 = R_9+R_20; R_1 = R_0*R_1; R_24 = pow(R_0,2); R_23 = R_0*R_23;
    R_23 = (-1.0)*R_23; R_0 = pos_nodes[0][0]; R_10 = (-1.0)*R_0; R_29 := pos_nodes[1][0];
    R_10 = R_29+R_10; R_10 = (-125.0/48.0)*R_10; R_30 := (-1.0)*R_29; R_30 = R_0+R_30;
    R_31 := (125.0/16.0)*R_30; R_32 := (-3125.0/24.0)*R_30; R_30 = (-3.0/128.0)*R_30; R_0 = R_29+R_0;
    R_29 = (625.0/48.0)*R_0; R_33 := (3.0/256.0)*R_0; R_34 := (-125.0/96.0)*R_0; R_35 := (625.0/12.0)*R_0;
    R_0 = (-125.0/48.0)*R_0; R_36 := pos_nodes[5][0]; R_37 := (-1.0)*R_36; R_38 := pos_nodes[2][0];
    R_37 = R_38+R_37; R_37 = (-1625.0/48.0)*R_37; R_37 = R_10+R_37; R_10 = (-1.0)*R_38;
    R_10 = R_36+R_10; R_39 := (1625.0/16.0)*R_10; R_40 := (-15625.0/24.0)*R_10; R_10 = (-125.0/384.0)*R_10;
    R_41 := R_10+R_30; R_36 = R_38+R_36; R_38 = (-625.0/16.0)*R_36; R_38 = R_29+R_38;
    R_29 = (-25.0/256.0)*R_36; R_42 := (325.0/32.0)*R_36; R_43 := -156.25*R_36; R_36 = (325.0/16.0)*R_36;
    R_44 := pos_nodes[4][0]; R_45 := (-1.0)*R_44; R_46 := pos_nodes[3][0]; R_45 = R_46+R_45;
    R_47 := (2125.0/24.0)*R_45; R_47 = R_37+R_47; R_37 = (-375.0/64.0)*R_45; R_37 = R_41+R_37;
    R_41 = 265.625*R_45; R_41 = R_39+R_41; R_41 = R_31+R_41; R_48 := pow(R_41,2);
    R_19 = R_48+R_19; R_19 = -0.5*R_19; R_45 = (-15625.0/12.0)*R_45; R_45 = R_40+R_45;
    R_45 = R_32+R_45; R_48 = (-1.0)*R_46; R_48 = R_44+R_48; R_49 := -265.625*R_48;
    R_49 = R_39+R_49; R_31 = R_49+R_31; R_49 = pow(R_31,2); R_27 = R_49+R_27;
    R_27 = 0.5*R_27; R_49 = (15625.0/12.0)*R_48; R_49 = R_40+R_49; R_32 = R_49+R_32;
    R_48 = (375.0/64.0)*R_48; R_48 = R_10+R_48; R_30 = R_48+R_30; R_48 = R_30*R_31;
    R_3 = R_48+R_3; R_48 = (-60.0)*R_3; R_10 = 24.0*R_3; R_3 = 2.0*R_3;
    R_32 = R_30*R_32; R_49 = R_30*R_41; R_7 = R_49+R_7; R_49 = (-60.0)*R_7;
    R_40 = 24.0*R_7; R_7 = 2.0*R_7; R_39 = pow(R_30,2); R_6 = R_39+R_6;
    R_50 := rsqrt(R_6); R_51 := 1/R_6; R_6 = sqrt(R_6); R_26 = R_26*R_6;
    R_17 = R_6*R_17; R_6 = (-1.0)*R_6; R_5 = R_39+R_5; R_39 = sqrt(R_5);
    R_52 := (-1.0)*R_39; R_53 := rsqrt(R_5); R_5 = 1/R_5; R_45 = R_30*R_45;
    R_45 = (-1.0)*R_45; R_44 = R_46+R_44; R_46 = (625.0/24.0)*R_44; R_46 = R_38+R_46;
    R_46 = R_39*R_46; R_38 = (75.0/128.0)*R_44; R_29 = R_38+R_29; R_33 = R_29+R_33;
    R_29 = (-425.0/48.0)*R_44; R_34 = R_29+R_34; R_42 = R_34+R_42; R_39 = R_39*R_42;
    R_34 = (625.0/6.0)*R_44; R_34 = R_43+R_34; R_35 = R_34+R_35; R_34 = R_30*R_35;
    R_12 = R_34+R_12; R_44 = (-425.0/24.0)*R_44; R_36 = R_44+R_36; R_0 = R_36+R_0;
    R_31 = R_0*R_31; R_31 = R_31+R_34; R_16 = R_31+R_16; R_16 = R_22+R_16;
    R_22 = 12.0*R_16; R_16 = 48.0*R_16; R_41 = R_0*R_41; R_12 = R_41+R_12;
    R_41 = R_34+R_41; R_41 = R_9+R_41; R_41 = R_20+R_41; R_41 = 48.0*R_41;
    R_30 = R_30*R_0; R_25 = R_30+R_25; R_15 = R_25*R_15; R_15 = R_15*R_50;
    R_26 = R_15+R_26; R_26 = (-1.0/12.0)*R_26; R_18 = R_25*R_18; R_15 = pow(R_25,2);
    R_15 = R_51*R_15; R_20 = (-1.0)*R_15; R_1 = R_30+R_1; R_47 = R_1*R_47;
    R_30 = R_1*R_37; R_30 = R_30*R_53; R_39 = R_30+R_39; R_39 = (-1.0/12.0)*R_39;
    R_30 = pow(R_1,2); R_30 = R_5*R_30; R_30 = (-1.0)*R_30; R_9 = pow(R_0,2);
    R_34 = (-1.0)*R_9; R_15 = R_34+R_15; R_15 = R_28+R_15; R_15 = 30.0*R_15;
    R_48 = R_15+R_48; R_48 = R_25*R_48; R_48 = R_51*R_48; R_48 = R_16+R_48;
    R_48 = R_25*R_48; R_48 = 2.0*R_48; R_2 = R_9+R_2; R_16 = R_2+R_20;
    R_16 = 12.0*R_16; R_10 = R_16+R_10; R_3 = R_2+R_3; R_20 = R_3+R_20;
    R_8 = R_8*R_20; R_25 = R_25*R_20; R_25 = R_51*R_25; R_25 = (-6.0)*R_25;
    R_25 = R_22+R_25; R_25 = R_4*R_25; R_18 = R_25+R_18; R_8 = R_18+R_8;
    R_8 = R_8*R_50; R_17 = R_8+R_17; R_17 = (-1.0/80.0)*R_17; R_20 = (-1.0/24.0)*R_20;
    R_10 = R_3*R_10; R_48 = R_10+R_48; R_48 = R_51*R_48; R_48 = (-1.0/96.0)*R_48;
    R_24 = R_9+R_24; R_9 = R_24+R_30; R_51 = (-30.0)*R_9; R_49 = R_51+R_49;
    R_49 = R_1*R_49; R_49 = R_5*R_49; R_49 = R_41+R_49; R_49 = R_1*R_49;
    R_49 = 2.0*R_49; R_9 = 12.0*R_9; R_9 = R_40+R_9; R_7 = R_24+R_7;
    R_30 = R_7+R_30; R_42 = R_30*R_42; R_42 = 0.5*R_42; R_1 = R_1*R_30;
    R_1 = R_5*R_1; R_1 = -0.5*R_1; R_1 = R_12+R_1; R_37 = R_1*R_37;
    R_37 = R_47+R_37; R_42 = R_37+R_42; R_42 = R_42*R_53; R_46 = R_42+R_46;
    R_46 = (-1.0/80.0)*R_46; R_30 = (-1.0/24.0)*R_30; R_9 = R_7*R_9; R_49 = R_9+R_49;
    R_49 = R_5*R_49; R_49 = (1.0/96.0)*R_49; R_49 = R_21+R_49; R_49 = R_23+R_49;
    R_49 = R_45+R_49; R_35 = R_0*R_35; R_32 = R_35+R_32; R_13 = R_32+R_13;
    R_13 = R_11+R_13; R_48 = R_13+R_48; R_27 = R_48+R_27; R_27 = (-1.0/80.0)*R_27;
    R_20 = R_27+R_20; R_50 = R_20*R_50; R_50 = R_6+R_50; R_14 = R_14*R_50;
    R_14 = R_17+R_14; R_26 = R_14+R_26; R_50 = 1/R_50; R_26 = R_50*R_26;
    res[1] = R_26; R_35 = (-1.0)*R_35; R_49 = R_35+R_49; R_19 = R_49+R_19;
    R_19 = (1.0/80.0)*R_19; R_30 = R_19+R_30; R_53 = R_30*R_53; R_52 = R_53+R_52;
    R_33 = R_33*R_52; R_33 = R_39+R_33; R_46 = R_33+R_46; R_52 = 1/R_52;
    R_46 = R_52*R_46; res[0] = R_46; 
    return res
#
def inertia_operator_for_barycenter( var_inter, pos_nodes )
    R_0 := pos_nodes[0][1]; R_1 := (-1.0)*R_0; R_2 := pos_nodes[1][1]; R_3 := (-1.0)*R_2;
    R_3 = R_0+R_3; R_4 := (125.0/48.0)*R_3; R_3 = (-3.0/128.0)*R_3; R_1 = R_2+R_1;
    R_5 := (-125.0/48.0)*R_1; R_6 := (1.0/512.0)*R_1; R_7 := (3125.0/24.0)*R_1; R_8 := (3.0/128.0)*R_1;
    R_1 = (-125.0/16.0)*R_1; R_0 = R_2+R_0; R_2 = (625.0/48.0)*R_0; R_9 := (-125.0/192.0)*R_0;
    R_10 := (3.0/256.0)*R_0; R_11 := (-125.0/2304.0)*R_0; R_12 := (-125.0/96.0)*R_0; R_13 := (625.0/12.0)*R_0;
    R_0 = (-125.0/48.0)*R_0; R_14 := pos_nodes[5][1]; R_15 := (-1.0)*R_14; R_16 := pos_nodes[2][1];
    R_15 = R_16+R_15; R_17 := (-1625.0/16.0)*R_15; R_18 := (15625.0/24.0)*R_15; R_15 = (125.0/384.0)*R_15;
    R_19 := R_3+R_15; R_20 := (-1.0)*R_16; R_20 = R_14+R_20; R_21 := (1625.0/48.0)*R_20;
    R_4 = R_21+R_4; R_22 := (-125.0/4608.0)*R_20; R_23 := (-15625.0/24.0)*R_20; R_24 := R_23+R_7;
    R_25 := (-125.0/384.0)*R_20; R_8 = R_25+R_8; R_25 = R_25+R_3; R_20 = (1625.0/16.0)*R_20;
    R_26 := R_20+R_1; R_14 = R_16+R_14; R_16 = (-625.0/16.0)*R_14; R_16 = R_2+R_16;
    R_2 = (325.0/64.0)*R_14; R_27 := (-275.0/768.0)*R_14; R_28 := (-25.0/256.0)*R_14; R_29 := R_10+R_28;
    R_30 := (325.0/32.0)*R_14; R_30 = R_12+R_30; R_12 = -156.25*R_14; R_31 := R_12+R_13;
    R_14 = (325.0/16.0)*R_14; R_32 := pos_nodes[4][1]; R_33 := (-1.0)*R_32; R_34 := pos_nodes[3][1];
    R_33 = R_34+R_33; R_35 := (2125.0/24.0)*R_33; R_4 = R_35+R_4; R_35 = R_5+R_35;
    R_21 = R_35+R_21; R_35 = 265.625*R_33; R_35 = R_1+R_35; R_17 = R_35+R_17;
    R_35 = pow(R_17,2); R_5 = (-15625.0/12.0)*R_33; R_5 = R_7+R_5; R_18 = R_5+R_18;
    R_33 = (-375.0/64.0)*R_33; R_19 = R_33+R_19; R_33 = R_25+R_33; R_25 = R_33*R_17;
    R_18 = R_33*R_18; R_5 = pow(R_33,2); R_36 := (-1.0)*R_34; R_36 = R_32+R_36;
    R_37 := (125.0/256.0)*R_36; R_37 = R_6+R_37; R_37 = R_22+R_37; R_22 = (15625.0/12.0)*R_36;
    R_23 = R_23+R_22; R_7 = R_23+R_7; R_7 = R_7*R_33; R_24 = R_22+R_24;
    R_22 = (375.0/64.0)*R_36; R_8 = R_22+R_8; R_23 = pow(R_8,2); R_24 = R_8*R_24;
    R_24 = (-1.0)*R_24; R_3 = R_22+R_3; R_3 = R_15+R_3; R_15 = R_3*R_4;
    R_22 = pow(R_3,2); R_36 = -265.625*R_36; R_26 = R_36+R_26; R_6 = pow(R_26,2);
    R_38 := R_8*R_26; R_36 = R_20+R_36; R_1 = R_36+R_1; R_36 = pow(R_1,2);
    R_20 = R_1*R_33; R_32 = R_34+R_32; R_34 = (625.0/24.0)*R_32; R_34 = R_16+R_34;
    R_16 = (475.0/1152.0)*R_32; R_39 := (-425.0/96.0)*R_32; R_39 = R_9+R_39; R_39 = R_2+R_39;
    R_2 = (75.0/128.0)*R_32; R_10 = R_10+R_2; R_2 = R_29+R_2; R_29 = (-425.0/48.0)*R_32;
    R_30 = R_29+R_30; R_29 = pow(R_30,2); R_9 = R_30*R_3; R_40 := (625.0/6.0)*R_32;
    R_41 := R_12+R_40; R_41 = R_41+R_13; R_42 := R_41*R_33; R_13 = R_40+R_13;
    R_13 = R_12+R_13; R_12 = R_33*R_13; R_31 = R_40+R_31; R_40 = R_8*R_31;
    R_32 = (-425.0/24.0)*R_32; R_43 := R_32+R_0; R_43 = R_14+R_43; R_17 = R_43*R_17;
    R_44 := R_33*R_43; R_45 := pow(R_43,2); R_46 := (-1.0)*R_45; R_13 = R_43*R_13;
    R_14 = R_32+R_14; R_0 = R_14+R_0; R_41 = R_0*R_41; R_1 = R_0*R_1;
    R_26 = R_0*R_26; R_14 = R_40+R_26; R_8 = R_0*R_8; R_31 = R_0*R_31;
    R_31 = (-1.0)*R_31; R_33 = R_0*R_33; R_0 = pow(R_0,2); R_32 = (-1.0)*R_0;
    R_43 = pos_nodes[0][0]; R_47 := (-1.0)*R_43; R_48 := pos_nodes[1][0]; R_47 = R_48+R_47;
    R_47 = (-125.0/48.0)*R_47; R_49 := (-1.0)*R_48; R_49 = R_43+R_49; R_50 := (125.0/48.0)*R_49;
    R_51 := (125.0/24.0)*R_49; R_52 := (-3125.0/24.0)*R_49; R_53 := (125.0/16.0)*R_49; R_49 = (-3.0/128.0)*R_49;
    R_43 = R_48+R_43; R_48 = (625.0/48.0)*R_43; R_54 := (3.0/256.0)*R_43; R_55 := (-125.0/96.0)*R_43;
    R_56 := (-125.0/2304.0)*R_43; R_57 := (625.0/12.0)*R_43; R_43 = (-125.0/48.0)*R_43; R_58 := pos_nodes[5][0];
    R_59 := (-1.0)*R_58; R_60 := pos_nodes[2][0]; R_59 = R_60+R_59; R_61 := (-1625.0/24.0)*R_59;
    R_59 = (-1625.0/48.0)*R_59; R_59 = R_47+R_59; R_47 = (-1.0)*R_60; R_47 = R_58+R_47;
    R_62 := (1625.0/48.0)*R_47; R_62 = R_50+R_62; R_50 = (-15625.0/24.0)*R_47; R_63 := (1625.0/16.0)*R_47;
    R_47 = (-125.0/384.0)*R_47; R_64 := R_47+R_49; R_58 = R_60+R_58; R_60 = (-625.0/16.0)*R_58;
    R_60 = R_48+R_60; R_48 = (-25.0/256.0)*R_58; R_65 := (325.0/32.0)*R_58; R_66 := (-275.0/768.0)*R_58;
    R_67 := -156.25*R_58; R_58 = (325.0/16.0)*R_58; R_68 := pos_nodes[4][0]; R_69 := (-1.0)*R_68;
    R_70 := pos_nodes[3][0]; R_69 = R_70+R_69; R_71 := (2125.0/24.0)*R_69; R_62 = R_62+R_71;
    R_71 = R_59+R_71; R_59 = 265.625*R_69; R_59 = R_63+R_59; R_59 = R_53+R_59;
    R_72 := pow(R_59,2); R_6 = R_72+R_6; R_6 = -0.5*R_6; R_72 = (-15625.0/12.0)*R_69;
    R_72 = R_50+R_72; R_72 = R_52+R_72; R_69 = (-375.0/64.0)*R_69; R_69 = R_64+R_69;
    R_62 = R_62*R_69; R_64 = pow(R_69,2); R_22 = R_64+R_22; R_64 = (-1.0)*R_70;
    R_64 = R_68+R_64; R_73 := (-2125.0/12.0)*R_64; R_73 = R_61+R_73; R_51 = R_73+R_51;
    R_73 = (15625.0/12.0)*R_64; R_73 = R_50+R_73; R_52 = R_73+R_52; R_73 = -265.625*R_64;
    R_73 = R_63+R_73; R_53 = R_73+R_53; R_73 = pow(R_53,2); R_36 = R_73+R_36;
    R_36 = 0.5*R_36; R_35 = R_73+R_35; R_35 = 0.5*R_35; R_64 = (375.0/64.0)*R_64;
    R_64 = R_47+R_64; R_49 = R_64+R_49; R_52 = R_49*R_52; R_64 = R_49*R_59;
    R_38 = R_64+R_38; R_64 = (-60.0)*R_38; R_47 = 24.0*R_38; R_38 = 2.0*R_38;
    R_72 = R_49*R_72; R_72 = (-1.0)*R_72; R_73 = pow(R_49,2); R_23 = R_73+R_23;
    R_23 = 1/R_23; R_5 = R_73+R_5; R_73 = sqrt(R_5); R_63 = rsqrt(R_5);
    R_5 = 1/R_5; R_50 = R_49*R_53; R_25 = R_50+R_25; R_61 = (-60.0)*R_25;
    R_74 := 24.0*R_25; R_25 = 2.0*R_25; R_20 = R_50+R_20; R_50 = (-60.0)*R_20;
    R_75 := 24.0*R_20; R_20 = 2.0*R_20; R_68 = R_70+R_68; R_70 = (625.0/24.0)*R_68;
    R_70 = R_60+R_70; R_60 = (475.0/1152.0)*R_68; R_76 := (75.0/128.0)*R_68; R_77 := R_76+R_48;
    R_77 = R_77+R_54; R_78 := (-425.0/48.0)*R_68; R_55 = R_78+R_55; R_65 = R_55+R_65;
    R_55 = pow(R_65,2); R_29 = R_55+R_29; R_55 = R_69*R_65; R_9 = R_55+R_9;
    R_55 = (625.0/6.0)*R_68; R_55 = R_67+R_55; R_57 = R_55+R_57; R_55 = R_49*R_57;
    R_14 = R_55+R_14; R_68 = (-425.0/24.0)*R_68; R_58 = R_68+R_58; R_43 = R_58+R_43;
    R_53 = R_43*R_53; R_53 = R_53+R_55; R_1 = R_1+R_53; R_1 = R_42+R_1;
    R_42 = 2.0*R_1; R_1 = 48.0*R_1; R_17 = R_53+R_17; R_17 = R_12+R_17;
    R_12 = 12.0*R_17; R_17 = 48.0*R_17; R_59 = R_43*R_59; R_14 = R_59+R_14;
    R_59 = R_55+R_59; R_59 = R_40+R_59; R_59 = R_26+R_59; R_59 = 48.0*R_59;
    R_57 = R_43*R_57; R_52 = R_57+R_52; R_41 = R_41+R_52; R_7 = R_41+R_7;
    R_18 = R_52+R_18; R_18 = R_13+R_18; R_57 = (-1.0)*R_57; R_49 = R_49*R_43;
    R_44 = R_49+R_44; R_19 = R_44*R_19; R_19 = (-1.0/12.0)*R_19; R_21 = R_44*R_21;
    R_13 = pow(R_44,2); R_13 = R_5*R_13; R_52 = (-1.0)*R_13; R_8 = R_49+R_8;
    R_41 = R_8*R_69; R_41 = (-1.0/12.0)*R_41; R_71 = R_8*R_71; R_26 = pow(R_8,2);
    R_26 = R_23*R_26; R_26 = (-1.0)*R_26; R_33 = R_49+R_33; R_49 = pow(R_33,2);
    R_49 = R_49*R_5; R_32 = R_49+R_32; R_49 = (-1.0)*R_49; R_43 = pow(R_43,2);
    R_40 = (-1.0)*R_43; R_32 = R_32+R_40; R_55 = 30.0*R_32; R_50 = R_55+R_50;
    R_50 = R_33*R_50; R_50 = R_50*R_5; R_50 = R_1+R_50; R_50 = R_33*R_50;
    R_50 = 2.0*R_50; R_32 = (-12.0)*R_32; R_32 = R_75+R_32; R_13 = R_40+R_13;
    R_13 = R_46+R_13; R_13 = 30.0*R_13; R_61 = R_13+R_61; R_61 = R_44*R_61;
    R_61 = R_5*R_61; R_61 = R_17+R_61; R_61 = R_44*R_61; R_61 = 2.0*R_61;
    R_45 = R_43+R_45; R_17 = R_45+R_52; R_17 = 12.0*R_17; R_74 = R_17+R_74;
    R_25 = R_45+R_25; R_52 = R_25+R_52; R_39 = R_39*R_52; R_44 = R_44*R_52;
    R_44 = R_5*R_44; R_44 = (-6.0)*R_44; R_44 = R_12+R_44; R_44 = R_37*R_44;
    R_21 = R_44+R_21; R_39 = R_21+R_39; R_39 = (-1.0/80.0)*R_39; R_52 = (-1.0/24.0)*R_52;
    R_74 = R_25*R_74; R_61 = R_74+R_61; R_61 = R_5*R_61; R_61 = (-1.0/96.0)*R_61;
    R_61 = R_18+R_61; R_35 = R_61+R_35; R_35 = (-1.0/80.0)*R_35; R_52 = R_35+R_52;
    R_52 = (-1.0)+R_52; R_2 = R_2*R_52; R_39 = R_2+R_39; R_19 = R_39+R_19;
    R_19 = R_11+R_19; R_19 = R_27+R_19; R_16 = R_19+R_16; R_52 = 1/R_52;
    R_16 = R_52*R_16; R_16 = (-1.0)*R_16; R_10 = R_16+R_10; R_10 = R_28+R_10;
    R_34 = R_34*R_10; R_3 = R_3*R_10; R_28 = pow(R_10,2); R_4 = R_10*R_4;
    R_9 = R_4+R_9; R_9 = 2.0*R_9; R_10 = R_30*R_10; R_0 = R_43+R_0;
    R_43 = R_0+R_26; R_30 = (-30.0)*R_43; R_64 = R_30+R_64; R_64 = R_8*R_64;
    R_64 = R_23*R_64; R_64 = R_59+R_64; R_64 = R_8*R_64; R_64 = 2.0*R_64;
    R_43 = 12.0*R_43; R_43 = R_47+R_43; R_38 = R_0+R_38; R_26 = R_38+R_26;
    R_47 = R_26*R_65; R_47 = (-1.0/160.0)*R_47; R_8 = R_8*R_26; R_8 = R_23*R_8;
    R_8 = -0.5*R_8; R_8 = R_14+R_8; R_8 = R_8*R_69; R_8 = R_71+R_8;
    R_8 = (-1.0/80.0)*R_8; R_26 = (-1.0/24.0)*R_26; R_43 = R_38*R_43; R_64 = R_43+R_64;
    R_64 = R_23*R_64; R_64 = (1.0/96.0)*R_64; R_64 = R_24+R_64; R_64 = R_31+R_64;
    R_64 = R_72+R_64; R_64 = R_57+R_64; R_6 = R_64+R_6; R_6 = (1.0/80.0)*R_6;
    R_26 = R_6+R_26; R_26 = (-1.0)+R_26; R_77 = R_77*R_26; R_41 = R_77+R_41;
    R_41 = R_47+R_41; R_41 = R_8+R_41; R_41 = R_66+R_41; R_41 = R_56+R_41;
    R_60 = R_41+R_60; R_26 = 1/R_26; R_60 = R_26*R_60; R_60 = (-1.0)*R_60;
    R_54 = R_60+R_54; R_76 = R_54+R_76; R_48 = R_76+R_48; R_70 = R_48*R_70;
    R_62 = R_70+R_62; R_62 = R_34+R_62; R_62 = R_15+R_62; R_62 = 2.0*R_62;
    R_62 = R_29+R_62; R_62 = R_73*R_62; R_69 = R_48*R_69; R_3 = R_69+R_3;
    R_69 = R_33*R_3; R_69 = 2.0*R_69; R_29 = pow(R_48,2); R_28 = R_29+R_28;
    R_29 = R_73*R_28; R_51 = R_48*R_51; R_51 = R_9+R_51; R_51 = R_33*R_51;
    R_65 = R_48*R_65; R_10 = R_65+R_10; R_10 = 2.0*R_10; R_10 = R_22+R_10;
    R_73 = R_73*R_10; R_20 = R_0+R_20; R_32 = R_20*R_32; R_50 = R_32+R_50;
    R_50 = R_50*R_5; R_50 = (-1.0/96.0)*R_50; R_7 = R_50+R_7; R_36 = R_7+R_36;
    R_36 = R_36*R_28; R_36 = R_51+R_36; R_49 = R_20+R_49; R_28 = R_49*R_28;
    R_28 = 0.5*R_28; R_28 = R_69+R_28; R_28 = R_28*R_63; R_73 = R_28+R_73;
    R_73 = (1.0/12.0)*R_73; R_29 = R_73+R_29; R_33 = R_33*R_49; R_5 = R_33*R_5;
    R_5 = (-1.0)*R_5; R_42 = R_5+R_42; R_3 = R_42*R_3; R_10 = R_49*R_10;
    R_10 = 0.5*R_10; R_36 = R_10+R_36; R_3 = R_36+R_3; R_63 = R_3*R_63;
    R_62 = R_63+R_62; R_62 = (1.0/80.0)*R_62; R_29 = R_62+R_29; res := R_29;
    return res
