static const nvi := 1
static const nb_nodes := 3
static const nb_vertex_nodes := 2
static const center_of_var_inter := [ 1.0/2.0 ]
#
def interpolation( var_inter, val, interpolation_base )
    if interpolation_base == "lagrange"
        return val[0]*(1+(2*var_inter[0]-3)*var_inter[0])+val[1]*var_inter[0]*(2*var_inter[0]-1)-4*(var_inter[0]-1)*var_inter[0]*val[2]
    else if interpolation_base == "hierarchical"
        return (1-var_inter[0])*val[0]+val[1]*var_inter[0]-4*(var_inter[0]-1)*var_inter[0]*val[2]

#
def interpolation_deg( var_inter, val, interpolation_base, deg ) when deg == 2
    if interpolation_base == "lagrange"
        return val[2]*var_inter[0]*(2*var_inter[0]-1)+val[0]*(1+(2*var_inter[0]-3)*var_inter[0])-4*(var_inter[0]-1)*var_inter[0]*val[1]
    else if interpolation_base == "hierarchical"
        return val[0]*(1-var_inter[0])+val[2]*var_inter[0]-4*(var_inter[0]-1)*var_inter[0]*val[1]

#
def interpolation_deg( var_inter, val, interpolation_base, deg ) when deg == 3
    if interpolation_base == "lagrange"
        return val[2]*((18-27.0/2.0*var_inter[0])*var_inter[0]-9.0/2.0)*var_inter[0]+(1+((9-9.0/2.0*var_inter[0])*var_inter[0]-11.0/2.0)*var_inter[0])*val[0]+val[1]*(9+(27.0/2.0*var_inter[0]-45.0/2.0)*var_inter[0])*var_inter[0]+val[3]*(1+9.0/2.0*(var_inter[0]-1)*var_inter[0])*var_inter[0]
    else if interpolation_base == "hierarchical"
        return val[2]*((18-27.0/2.0*var_inter[0])*var_inter[0]-9.0/2.0)*var_inter[0]+val[0]*(1-var_inter[0])+val[1]*(9+(27.0/2.0*var_inter[0]-45.0/2.0)*var_inter[0])*var_inter[0]+val[3]*var_inter[0]

#
def interpolation_deg( var_inter, val, interpolation_base, deg ) when deg == 4
    if interpolation_base == "lagrange"
        return val[1]*(16+((96-128.0/3.0*var_inter[0])*var_inter[0]-208.0/3.0)*var_inter[0])*var_inter[0]+val[0]*(1+((70.0/3.0+(32.0/3.0*var_inter[0]-80.0/3.0)*var_inter[0])*var_inter[0]-25.0/3.0)*var_inter[0])+val[2]*((76+(64*var_inter[0]-128)*var_inter[0])*var_inter[0]-12)*var_inter[0]+(16.0/3.0+((224.0/3.0-128.0/3.0*var_inter[0])*var_inter[0]-112.0/3.0)*var_inter[0])*var_inter[0]*val[3]+val[4]*((22.0/3.0+(32.0/3.0*var_inter[0]-16)*var_inter[0])*var_inter[0]-1)*var_inter[0]
    else if interpolation_base == "hierarchical"
        return val[1]*(16+((96-128.0/3.0*var_inter[0])*var_inter[0]-208.0/3.0)*var_inter[0])*var_inter[0]+val[0]*(1-var_inter[0])+val[2]*((76+(64*var_inter[0]-128)*var_inter[0])*var_inter[0]-12)*var_inter[0]+(16.0/3.0+((224.0/3.0-128.0/3.0*var_inter[0])*var_inter[0]-112.0/3.0)*var_inter[0])*var_inter[0]*val[3]+val[4]*var_inter[0]

#
def interpolation_deg( var_inter, val, interpolation_base, deg ) when deg == 5
    if interpolation_base == "lagrange"
        return (1+((875.0/24.0+(625.0/24.0*var_inter[0]-625.0/12.0)*var_inter[0])*var_inter[0]-125.0/12.0)*var_inter[0])*var_inter[0]*val[5]+((2675.0/12.0+((8125.0/12.0-3125.0/12.0*var_inter[0])*var_inter[0]-7375.0/12.0)*var_inter[0])*var_inter[0]-25)*var_inter[0]*val[2]+val[0]*(1+((375.0/8.0+((625.0/8.0-625.0/24.0*var_inter[0])*var_inter[0]-2125.0/24.0)*var_inter[0])*var_inter[0]-137.0/12.0)*var_inter[0])+(25+((8875.0/24.0+(3125.0/24.0*var_inter[0]-4375.0/12.0)*var_inter[0])*var_inter[0]-1925.0/12.0)*var_inter[0])*var_inter[0]*val[1]+val[3]*(50.0/3.0+((6125.0/12.0+(3125.0/12.0*var_inter[0]-625)*var_inter[0])*var_inter[0]-325.0/2.0)*var_inter[0])*var_inter[0]+val[4]*((1525.0/24.0+((6875.0/24.0-3125.0/24.0*var_inter[0])*var_inter[0]-5125.0/24.0)*var_inter[0])*var_inter[0]-25.0/4.0)*var_inter[0]
    else if interpolation_base == "hierarchical"
        return val[5]*var_inter[0]+val[3]*(50.0/3.0+((6125.0/12.0+(3125.0/12.0*var_inter[0]-625)*var_inter[0])*var_inter[0]-325.0/2.0)*var_inter[0])*var_inter[0]+(25+((8875.0/24.0+(3125.0/24.0*var_inter[0]-4375.0/12.0)*var_inter[0])*var_inter[0]-1925.0/12.0)*var_inter[0])*var_inter[0]*val[1]+val[0]*(1-var_inter[0])+((2675.0/12.0+((8125.0/12.0-3125.0/12.0*var_inter[0])*var_inter[0]-7375.0/12.0)*var_inter[0])*var_inter[0]-25)*var_inter[0]*val[2]+val[4]*((1525.0/24.0+((6875.0/24.0-3125.0/24.0*var_inter[0])*var_inter[0]-5125.0/24.0)*var_inter[0])*var_inter[0]-25.0/4.0)*var_inter[0]

#
def interpolation_vertex( var_inter, val_vertex )
    return val_vertex[1]*var_inter[0]+(1-var_inter[0])*val_vertex[0]
#
def nb_children( sub_nvi ) when sub_nvi==0
    return 1
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==0
    return child_var_inter
def type_child( sub_nvi, num_child ) when sub_nvi==0
    return Bar_3
def node_number_child( sub_nvi, num_child ) when sub_nvi==0
    return 0 .. 3
#
def nb_children( sub_nvi ) when sub_nvi==1
    return 2
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==0
    return [0]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return [0]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==1
    return [1/2]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return [2]
def normal( var_inter, pos_nodes )
    res := Vec[ type_promote(var_inter[0],pos_nodes[0][0],mul), 2 ]()
    R_0 := pos_nodes[2][0]; R_1 := pos_nodes[1][0]; R_2 := pos_nodes[0][0]; R_3 := pos_nodes[2][1];
    R_4 := pos_nodes[0][1]; R_5 := var_inter[0]; R_6 := 2.0*R_5; R_6 = (-1.0)+R_6;
    R_0 = R_0*R_6; R_0 = (-4.0)*R_0; R_6 = R_3*R_6; R_6 = (-4.0)*R_6;
    R_5 = 4.0*R_5; R_3 = (-3.0)+R_5; R_2 = R_2*R_3; R_3 = R_4*R_3;
    R_5 = (-1.0)+R_5; R_1 = R_1*R_5; R_1 = R_2+R_1; R_0 = R_1+R_0;
    R_1 = pow(R_0,2); R_2 = pos_nodes[1][1]; R_5 = R_2*R_5; R_3 = R_5+R_3;
    R_6 = R_3+R_6; R_3 = pow(R_6,2); R_1 = R_3+R_1; R_1 = rsqrt(R_1);
    R_0 = R_1*R_0; R_0 = (-1.0)*R_0; res[1] = R_0; R_1 = R_6*R_1;
    res[0] = R_1; 
    return res
#
def jac_mat( var_inter, pos_nodes )
    res := Mat[ type_promote(var_inter[0],pos_nodes[0][0],mul), Gen[ 1, 2 ] ]()
    R_0 := pos_nodes[2][1]; R_1 := pos_nodes[0][1]; R_2 := pos_nodes[1][1]; R_3 := pos_nodes[2][0];
    R_4 := pos_nodes[1][0]; R_5 := var_inter[0]; R_6 := 2.0*R_5; R_6 = (-1.0)+R_6;
    R_0 = R_0*R_6; R_0 = (-4.0)*R_0; R_6 = R_3*R_6; R_6 = (-4.0)*R_6;
    R_5 = 4.0*R_5; R_3 = (-1.0)+R_5; R_2 = R_2*R_3; R_3 = R_4*R_3;
    R_5 = (-3.0)+R_5; R_1 = R_1*R_5; R_1 = R_2+R_1; R_0 = R_1+R_0;
    res(0,1) = R_0; R_0 = pos_nodes[0][0]; R_5 = R_0*R_5; R_3 = R_5+R_3;
    R_6 = R_3+R_6; res(0,0) = R_6; 
    return res
#
def jac( var_inter, pos_nodes )
    R_0 := pos_nodes[2][0]; R_1 := pos_nodes[1][0]; R_2 := pos_nodes[0][0]; R_3 := pos_nodes[2][1];
    R_4 := pos_nodes[0][1]; R_5 := var_inter[0]; R_6 := 2.0*R_5; R_6 = (-1.0)+R_6;
    R_0 = R_0*R_6; R_0 = (-4.0)*R_0; R_6 = R_3*R_6; R_6 = (-4.0)*R_6;
    R_5 = 4.0*R_5; R_3 = (-3.0)+R_5; R_2 = R_2*R_3; R_3 = R_4*R_3;
    R_5 = (-1.0)+R_5; R_1 = R_1*R_5; R_1 = R_2+R_1; R_0 = R_1+R_0;
    R_0 = pow(R_0,2); R_1 = pos_nodes[1][1]; R_5 = R_1*R_5; R_3 = R_5+R_3;
    R_6 = R_3+R_6; R_6 = pow(R_6,2); R_0 = R_6+R_0; R_0 = sqrt(R_0);
    res := R_0; 
    return res
#
def inv_jac_mat( var_inter, pos_nodes )
    assert( 0, "inv_jac_mat() available only when nb var inter == dim" )
#
def measure( var_inter, pos_nodes )
    R_0 := pos_nodes[2][0]; R_0 = (-8.0)*R_0; R_1 := pos_nodes[2][1]; R_1 = (-8.0)*R_1;
    R_2 := pos_nodes[0][0]; R_3 := (-1.0)*R_2; R_4 := pos_nodes[1][0]; R_2 = R_2+R_4;
    R_2 = 4.0*R_2; R_2 = R_0+R_2; R_0 = pow(R_2,2); R_5 := (-1.0)*R_0;
    R_3 = R_4+R_3; R_2 = R_3*R_2; R_3 = pow(R_3,2); R_4 = pos_nodes[0][1];
    R_6 := (-1.0)*R_4; R_7 := pos_nodes[1][1]; R_4 = R_4+R_7; R_4 = 4.0*R_4;
    R_4 = R_1+R_4; R_1 = pow(R_4,2); R_8 := (-1.0)*R_1; R_0 = R_1+R_0;
    R_6 = R_7+R_6; R_4 = R_6*R_4; R_2 = R_4+R_2; R_2 = pow(R_2,2);
    R_6 = pow(R_6,2); R_3 = R_6+R_3; R_6 = rsqrt(R_3); R_4 = sqrt(R_3);
    R_7 = 1/R_3; R_2 = R_7*R_2; R_8 = R_2+R_8; R_8 = R_5+R_8;
    R_8 = R_0*R_8; R_8 = (-12.0)*R_8; R_5 = (-1.0)*R_2; R_5 = R_0+R_5;
    R_6 = R_5*R_6; R_6 = (1.0/24.0)*R_6; R_6 = R_4+R_6; R_5 = R_2*R_5;
    R_5 = (-60.0)*R_5; R_8 = R_5+R_8; R_3 = pow(R_3,-3/2.0); R_8 = R_3*R_8;
    R_8 = (-1.0/7680.0)*R_8; R_6 = R_8+R_6; res := R_6; 
    return res
#
def barycenter( var_inter, pos_nodes )
    res := Vec[ type_promote(var_inter[0],pos_nodes[0][0],mul), 2 ]()
    R_0 := pos_nodes[2][0]; R_1 := (-2.0)*R_0; R_2 := (-4.0)*R_0; R_3 := (-8.0)*R_0;
    R_4 := pos_nodes[2][1]; R_5 := (-4.0)*R_4; R_6 := (-2.0)*R_4; R_7 := (-8.0)*R_4;
    R_8 := pos_nodes[0][0]; R_9 := (-1.0)*R_8; R_10 := pos_nodes[1][0]; R_8 = R_8+R_10;
    R_11 := 2.0*R_8; R_11 = R_2+R_11; R_2 = 4.0*R_8; R_2 = R_3+R_2;
    R_3 = pow(R_2,2); R_12 := (-1.0)*R_3; R_9 = R_10+R_9; R_2 = R_9*R_2;
    R_10 = pow(R_9,2); R_13 := pos_nodes[0][1]; R_14 := (-1.0)*R_13; R_15 := pos_nodes[1][1];
    R_13 = R_13+R_15; R_16 := 2.0*R_13; R_16 = R_5+R_16; R_6 = R_13+R_6;
    R_13 = 4.0*R_13; R_13 = R_7+R_13; R_7 = pow(R_13,2); R_5 = (-1.0)*R_7;
    R_3 = R_7+R_3; R_7 = (-12.0)*R_3; R_14 = R_15+R_14; R_13 = R_14*R_13;
    R_2 = R_13+R_2; R_13 = R_9*R_2; R_13 = (-1.0/12.0)*R_13; R_15 = pow(R_2,2);
    R_17 := pow(R_14,2); R_10 = R_17+R_10; R_17 = 1/R_10; R_18 := R_14*R_17;
    R_18 = R_2*R_18; R_18 = -0.5*R_18; R_18 = R_6+R_18; R_9 = R_9*R_17;
    R_9 = R_2*R_9; R_9 = -0.5*R_9; R_9 = R_8+R_9; R_9 = R_1+R_9;
    R_15 = R_17*R_15; R_1 = 60.0*R_15; R_1 = R_7+R_1; R_5 = R_15+R_5;
    R_5 = R_12+R_5; R_1 = R_5*R_1; R_1 = R_1*R_17; R_1 = (1.0/7680.0)*R_1;
    R_5 = R_3*R_5; R_5 = (-12.0)*R_5; R_12 = (-1.0)*R_15; R_12 = R_3+R_12;
    R_18 = R_12*R_18; R_9 = R_9*R_12; R_9 = (-1.0/80.0)*R_9; R_13 = R_9+R_13;
    R_15 = R_15*R_12; R_15 = (-60.0)*R_15; R_15 = R_5+R_15; R_15 = R_17*R_15;
    R_15 = (1.0/7680.0)*R_15; R_12 = (-1.0/24.0)*R_12; R_1 = R_12+R_1; R_15 = R_12+R_15;
    R_12 = rsqrt(R_10); R_14 = R_14*R_12; R_14 = R_2*R_14; R_18 = R_12*R_18;
    R_18 = (-1.0/80.0)*R_18; R_1 = R_12*R_1; R_13 = R_12*R_13; R_15 = R_12*R_15;
    R_10 = sqrt(R_10); R_16 = R_10*R_16; R_14 = R_16+R_14; R_14 = (-1.0/12.0)*R_14;
    R_11 = R_11*R_10; R_11 = (-1.0/12.0)*R_11; R_10 = (-1.0)*R_10; R_1 = R_10+R_1;
    R_4 = R_4*R_1; R_4 = R_18+R_4; R_14 = R_4+R_14; R_1 = 1/R_1;
    R_14 = R_1*R_14; res[1] = R_14; R_15 = R_10+R_15; R_0 = R_0*R_15;
    R_0 = R_11+R_0; R_13 = R_0+R_13; R_15 = 1/R_15; R_13 = R_15*R_13;
    res[0] = R_13; 
    return res
#
def inertia_operator_for_barycenter( var_inter, pos_nodes )
    R_0 := pos_nodes[2][0]; R_1 := (-4.0)*R_0; R_2 := (-2.0)*R_0; R_3 := (-8.0)*R_0;
    R_4 := pos_nodes[2][1]; R_5 := (-2.0)*R_4; R_6 := (-4.0)*R_4; R_7 := (-8.0)*R_4;
    R_8 := pos_nodes[0][0]; R_9 := (-1.0)*R_8; R_10 := pos_nodes[1][0]; R_8 = R_8+R_10;
    R_11 := 2.0*R_8; R_11 = R_1+R_11; R_1 = pow(R_11,2); R_12 := (-1.0/6.0)*R_8;
    R_13 := 4.0*R_8; R_13 = R_3+R_13; R_3 = pow(R_13,2); R_14 := (-1.0)*R_3;
    R_9 = R_10+R_9; R_10 = R_9*R_11; R_13 = R_9*R_13; R_15 := pow(R_9,2);
    R_16 := pos_nodes[0][1]; R_17 := (-1.0)*R_16; R_18 := pos_nodes[1][1]; R_16 = R_16+R_18;
    R_5 = R_16+R_5; R_19 := 2.0*R_16; R_19 = R_6+R_19; R_6 = pow(R_19,2);
    R_6 = R_1+R_6; R_16 = 4.0*R_16; R_16 = R_7+R_16; R_7 = pow(R_16,2);
    R_1 = (-1.0)*R_7; R_3 = R_7+R_3; R_7 = -0.125*R_3; R_20 := (-12.0)*R_3;
    R_17 = R_18+R_17; R_18 = R_17*R_19; R_18 = R_10+R_18; R_16 = R_17*R_16;
    R_13 = R_16+R_13; R_18 = R_13*R_18; R_18 = 2.0*R_18; R_16 = R_17*R_13;
    R_16 = R_16+R_19; R_16 = (-1.0/12.0)*R_16; R_10 = R_9*R_13; R_10 = (-1.0/12.0)*R_10;
    R_21 := pow(R_13,2); R_22 := pow(R_17,2); R_15 = R_22+R_15; R_22 = sqrt(R_15);
    R_6 = R_22*R_6; R_23 := 1/R_15; R_24 := R_17*R_23; R_24 = R_13*R_24;
    R_24 = -0.5*R_24; R_24 = R_5+R_24; R_5 = R_9*R_23; R_5 = R_13*R_5;
    R_5 = -0.5*R_5; R_5 = R_8+R_5; R_5 = R_2+R_5; R_21 = R_23*R_21;
    R_2 = 0.625*R_21; R_7 = R_2+R_7; R_2 = 60.0*R_21; R_2 = R_20+R_2;
    R_1 = R_21+R_1; R_1 = R_14+R_1; R_2 = R_1*R_2; R_2 = R_2*R_23;
    R_2 = (1.0/7680.0)*R_2; R_1 = R_3*R_1; R_1 = (-12.0)*R_1; R_14 = (-1.0)*R_21;
    R_14 = R_3+R_14; R_24 = R_14*R_24; R_24 = (-1.0/80.0)*R_24; R_5 = R_5*R_14;
    R_5 = (-1.0/80.0)*R_5; R_10 = R_5+R_10; R_12 = R_10+R_12; R_21 = R_21*R_14;
    R_21 = (-60.0)*R_21; R_21 = R_1+R_21; R_21 = R_23*R_21; R_21 = (1.0/7680.0)*R_21;
    R_1 = (-1.0/24.0)*R_14; R_2 = R_1+R_2; R_2 = (-1.0)+R_2; R_10 = R_4*R_2;
    R_24 = R_10+R_24; R_24 = R_16+R_24; R_2 = 1/R_2; R_24 = R_2*R_24;
    R_24 = (-1.0)*R_24; R_24 = R_4+R_24; R_19 = R_19*R_24; R_4 = pow(R_24,2);
    R_24 = R_17*R_24; R_21 = R_1+R_21; R_1 = (-2.0/3.0)+R_21; R_1 = R_0*R_1;
    R_1 = R_12+R_1; R_21 = (-1.0)+R_21; R_21 = 1/R_21; R_1 = R_21*R_1;
    R_1 = (-1.0)*R_1; R_1 = R_0+R_1; R_11 = R_11*R_1; R_19 = R_11+R_19;
    R_19 = 2.0*R_19; R_19 = R_15+R_19; R_11 = 0.5*R_19; R_19 = R_22*R_19;
    R_0 = pow(R_1,2); R_4 = R_0+R_4; R_7 = R_4*R_7; R_22 = R_22*R_4;
    R_4 = R_14*R_4; R_4 = 0.5*R_4; R_1 = R_9*R_1; R_24 = R_1+R_24;
    R_24 = R_13*R_24; R_13 = (-1.0)*R_24; R_7 = R_13+R_7; R_7 = R_23*R_7;
    R_11 = R_7+R_11; R_11 = R_14*R_11; R_11 = R_18+R_11; R_24 = 2.0*R_24;
    R_4 = R_24+R_4; R_15 = rsqrt(R_15); R_11 = R_15*R_11; R_6 = R_11+R_6;
    R_6 = (1.0/80.0)*R_6; R_4 = R_15*R_4; R_19 = R_4+R_19; R_19 = (1.0/12.0)*R_19;
    R_22 = R_19+R_22; R_6 = R_22+R_6; res := R_6; 
    return res
