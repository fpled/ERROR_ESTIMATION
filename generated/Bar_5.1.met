static const nvi := 1
static const nb_nodes := 5
static const nb_vertex_nodes := 2
static const center_of_var_inter := [ 1.0/2.0 ]
#
def interpolation( var_inter, val, interpolation_base )
    if interpolation_base == "lagrange"
        return val[2]*var_inter[0]*(16+var_inter[0]*(var_inter[0]*(96-128.0/3.0*var_inter[0])-208.0/3.0))+val[1]*var_inter[0]*(var_inter[0]*(22.0/3.0+var_inter[0]*(32.0/3.0*var_inter[0]-16))-1)+val[0]*(1+var_inter[0]*(var_inter[0]*(70.0/3.0+var_inter[0]*(32.0/3.0*var_inter[0]-80.0/3.0))-25.0/3.0))+val[3]*var_inter[0]*(var_inter[0]*(76+var_inter[0]*(64*var_inter[0]-128))-12)+val[4]*var_inter[0]*(16.0/3.0+var_inter[0]*(var_inter[0]*(224.0/3.0-128.0/3.0*var_inter[0])-112.0/3.0))
    else if interpolation_base == "hierarchical"
        return val[4]*var_inter[0]*(16.0/3.0+var_inter[0]*(var_inter[0]*(224.0/3.0-128.0/3.0*var_inter[0])-112.0/3.0))+val[2]*var_inter[0]*(16+var_inter[0]*(var_inter[0]*(96-128.0/3.0*var_inter[0])-208.0/3.0))+val[1]*var_inter[0]+(1-var_inter[0])*val[0]+val[3]*var_inter[0]*(var_inter[0]*(76+var_inter[0]*(64*var_inter[0]-128))-12)

#
def interpolation_deg( var_inter, val, interpolation_base, deg ) when deg == 4
    if interpolation_base == "lagrange"
        return var_inter[0]*(16.0/3.0+var_inter[0]*(var_inter[0]*(224.0/3.0-128.0/3.0*var_inter[0])-112.0/3.0))*val[3]+val[1]*var_inter[0]*(16+var_inter[0]*(var_inter[0]*(96-128.0/3.0*var_inter[0])-208.0/3.0))+val[0]*(1+var_inter[0]*(var_inter[0]*(70.0/3.0+var_inter[0]*(32.0/3.0*var_inter[0]-80.0/3.0))-25.0/3.0))+var_inter[0]*(var_inter[0]*(76+var_inter[0]*(64*var_inter[0]-128))-12)*val[2]+val[4]*var_inter[0]*(var_inter[0]*(22.0/3.0+var_inter[0]*(32.0/3.0*var_inter[0]-16))-1)
    else if interpolation_base == "hierarchical"
        return var_inter[0]*(16.0/3.0+var_inter[0]*(var_inter[0]*(224.0/3.0-128.0/3.0*var_inter[0])-112.0/3.0))*val[3]+var_inter[0]*(var_inter[0]*(76+var_inter[0]*(64*var_inter[0]-128))-12)*val[2]+val[1]*var_inter[0]*(16+var_inter[0]*(var_inter[0]*(96-128.0/3.0*var_inter[0])-208.0/3.0))+(1-var_inter[0])*val[0]+var_inter[0]*val[4]

#
def interpolation_deg( var_inter, val, interpolation_base, deg ) when deg == 5
    if interpolation_base == "lagrange"
        return val[4]*var_inter[0]*(var_inter[0]*(1525.0/24.0+var_inter[0]*(var_inter[0]*(6875.0/24.0-3125.0/24.0*var_inter[0])-5125.0/24.0))-25.0/4.0)+(1+var_inter[0]*(var_inter[0]*(375.0/8.0+var_inter[0]*(var_inter[0]*(625.0/8.0-625.0/24.0*var_inter[0])-2125.0/24.0))-137.0/12.0))*val[0]+val[1]*var_inter[0]*(25+var_inter[0]*(var_inter[0]*(8875.0/24.0+var_inter[0]*(3125.0/24.0*var_inter[0]-4375.0/12.0))-1925.0/12.0))+var_inter[0]*(var_inter[0]*(2675.0/12.0+var_inter[0]*(var_inter[0]*(8125.0/12.0-3125.0/12.0*var_inter[0])-7375.0/12.0))-25)*val[2]+var_inter[0]*(50.0/3.0+var_inter[0]*(var_inter[0]*(6125.0/12.0+var_inter[0]*(3125.0/12.0*var_inter[0]-625))-325.0/2.0))*val[3]+val[5]*var_inter[0]*(1+var_inter[0]*(var_inter[0]*(875.0/24.0+var_inter[0]*(625.0/24.0*var_inter[0]-625.0/12.0))-125.0/12.0))
    else if interpolation_base == "hierarchical"
        return val[4]*var_inter[0]*(var_inter[0]*(1525.0/24.0+var_inter[0]*(var_inter[0]*(6875.0/24.0-3125.0/24.0*var_inter[0])-5125.0/24.0))-25.0/4.0)+val[1]*var_inter[0]*(25+var_inter[0]*(var_inter[0]*(8875.0/24.0+var_inter[0]*(3125.0/24.0*var_inter[0]-4375.0/12.0))-1925.0/12.0))+(1-var_inter[0])*val[0]+var_inter[0]*(var_inter[0]*(2675.0/12.0+var_inter[0]*(var_inter[0]*(8125.0/12.0-3125.0/12.0*var_inter[0])-7375.0/12.0))-25)*val[2]+var_inter[0]*(50.0/3.0+var_inter[0]*(var_inter[0]*(6125.0/12.0+var_inter[0]*(3125.0/12.0*var_inter[0]-625))-325.0/2.0))*val[3]+var_inter[0]*val[5]

#
def interpolation_deg( var_inter, val, interpolation_base, deg ) when deg == 6
    if interpolation_base == "lagrange"
        return val[4]*var_inter[0]*(var_inter[0]*(297+var_inter[0]*(var_inter[0]*(2889+var_inter[0]*(972*var_inter[0]-2754))-2763.0/2.0))-45.0/2.0)+val[2]*var_inter[0]*(var_inter[0]*(1053.0/2.0+var_inter[0]*(var_inter[0]*(3699+var_inter[0]*(972*var_inter[0]-3078))-4149.0/2.0))-45)+val[0]*(1+var_inter[0]*(var_inter[0]*(406.0/5.0+var_inter[0]*(var_inter[0]*(315+var_inter[0]*(324.0/5.0*var_inter[0]-1134.0/5.0))-441.0/2.0))-147.0/10.0))+val[1]*var_inter[0]*(36+var_inter[0]*(var_inter[0]*(1044+var_inter[0]*(var_inter[0]*(1296-1944.0/5.0*var_inter[0])-1674))-1566.0/5.0))+val[3]*var_inter[0]*(40+var_inter[0]*(var_inter[0]*(2232+var_inter[0]*(var_inter[0]*(3888-1296*var_inter[0])-4356))-508))+val[5]*var_inter[0]*(36.0/5.0+var_inter[0]*(var_inter[0]*(468+var_inter[0]*(var_inter[0]*(5184.0/5.0-1944.0/5.0*var_inter[0])-1026))-486.0/5.0))+val[6]*var_inter[0]*(var_inter[0]*(137.0/10.0+var_inter[0]*(var_inter[0]*(153+var_inter[0]*(324.0/5.0*var_inter[0]-162))-135.0/2.0))-1)
    else if interpolation_base == "hierarchical"
        return val[2]*var_inter[0]*(var_inter[0]*(1053.0/2.0+var_inter[0]*(var_inter[0]*(3699+var_inter[0]*(972*var_inter[0]-3078))-4149.0/2.0))-45)+(1-var_inter[0])*val[0]+val[1]*var_inter[0]*(36+var_inter[0]*(var_inter[0]*(1044+var_inter[0]*(var_inter[0]*(1296-1944.0/5.0*var_inter[0])-1674))-1566.0/5.0))+val[3]*var_inter[0]*(40+var_inter[0]*(var_inter[0]*(2232+var_inter[0]*(var_inter[0]*(3888-1296*var_inter[0])-4356))-508))+val[4]*var_inter[0]*(var_inter[0]*(297+var_inter[0]*(var_inter[0]*(2889+var_inter[0]*(972*var_inter[0]-2754))-2763.0/2.0))-45.0/2.0)+val[5]*var_inter[0]*(36.0/5.0+var_inter[0]*(var_inter[0]*(468+var_inter[0]*(var_inter[0]*(5184.0/5.0-1944.0/5.0*var_inter[0])-1026))-486.0/5.0))+var_inter[0]*val[6]

#
def interpolation_deg( var_inter, val, interpolation_base, deg ) when deg == 7
    if interpolation_base == "lagrange"
        return var_inter[0]*(147.0/5.0+var_inter[0]*(var_inter[0]*(45962.0/15.0+var_inter[0]*(var_inter[0]*(1159683.0/80.0+var_inter[0]*(823543.0/240.0*var_inter[0]-2705927.0/240.0))-444185.0/48.0))-9849.0/20.0))*val[5]+var_inter[0]*(var_inter[0]*(2009.0/2.0+var_inter[0]*(var_inter[0]*(52822.0/3.0+var_inter[0]*(var_inter[0]*(117649.0/6.0-823543.0/144.0*var_inter[0])-1899191.0/72.0))-872935.0/144.0))-245.0/4.0)*val[4]+var_inter[0]*(49+var_inter[0]*(var_inter[0]*(109417.0/45.0+var_inter[0]*(var_inter[0]*(991613.0/144.0+var_inter[0]*(823543.0/720.0*var_inter[0]-352947.0/80.0))-88837.0/16.0))-10927.0/20.0))*val[1]+val[0]*(1+var_inter[0]*(var_inter[0]*(22981.0/180.0+var_inter[0]*(var_inter[0]*(16807.0/18.0+var_inter[0]*(var_inter[0]*(117649.0/180.0-117649.0/720.0*var_inter[0])-386561.0/360.0))-331681.0/720.0))-363.0/20.0))+val[2]*var_inter[0]*(var_inter[0]*(43071.0/40.0+var_inter[0]*(var_inter[0]*(170471.0/12.0+var_inter[0]*(var_inter[0]*(1529437.0/120.0-823543.0/240.0*var_inter[0])-151263.0/8.0))-1347647.0/240.0))-147.0/2.0)+val[3]*var_inter[0]*(245.0/3.0+var_inter[0]*(var_inter[0]*(133427.0/18.0+var_inter[0]*(var_inter[0]*(4151329.0/144.0+var_inter[0]*(823543.0/144.0*var_inter[0]-2941225.0/144.0))-2926819.0/144.0))-46501.0/36.0))+var_inter[0]*(var_inter[0]*(49931.0/360.0+var_inter[0]*(var_inter[0]*(98441.0/36.0+var_inter[0]*(var_inter[0]*(1294139.0/360.0-823543.0/720.0*var_inter[0])-319333.0/72.0))-634207.0/720.0))-49.0/6.0)*val[6]+var_inter[0]*(1+var_inter[0]*(var_inter[0]*(9947.0/90.0+var_inter[0]*(var_inter[0]*(84035.0/144.0+var_inter[0]*(117649.0/720.0*var_inter[0]-117649.0/240.0))-16807.0/48.0))-343.0/20.0))*val[7]
    else if interpolation_base == "hierarchical"
        return var_inter[0]*(var_inter[0]*(49931.0/360.0+var_inter[0]*(var_inter[0]*(98441.0/36.0+var_inter[0]*(var_inter[0]*(1294139.0/360.0-823543.0/720.0*var_inter[0])-319333.0/72.0))-634207.0/720.0))-49.0/6.0)*val[6]+var_inter[0]*(147.0/5.0+var_inter[0]*(var_inter[0]*(45962.0/15.0+var_inter[0]*(var_inter[0]*(1159683.0/80.0+var_inter[0]*(823543.0/240.0*var_inter[0]-2705927.0/240.0))-444185.0/48.0))-9849.0/20.0))*val[5]+var_inter[0]*(var_inter[0]*(2009.0/2.0+var_inter[0]*(var_inter[0]*(52822.0/3.0+var_inter[0]*(var_inter[0]*(117649.0/6.0-823543.0/144.0*var_inter[0])-1899191.0/72.0))-872935.0/144.0))-245.0/4.0)*val[4]+(1-var_inter[0])*val[0]+var_inter[0]*(49+var_inter[0]*(var_inter[0]*(109417.0/45.0+var_inter[0]*(var_inter[0]*(991613.0/144.0+var_inter[0]*(823543.0/720.0*var_inter[0]-352947.0/80.0))-88837.0/16.0))-10927.0/20.0))*val[1]+val[2]*var_inter[0]*(var_inter[0]*(43071.0/40.0+var_inter[0]*(var_inter[0]*(170471.0/12.0+var_inter[0]*(var_inter[0]*(1529437.0/120.0-823543.0/240.0*var_inter[0])-151263.0/8.0))-1347647.0/240.0))-147.0/2.0)+val[3]*var_inter[0]*(245.0/3.0+var_inter[0]*(var_inter[0]*(133427.0/18.0+var_inter[0]*(var_inter[0]*(4151329.0/144.0+var_inter[0]*(823543.0/144.0*var_inter[0]-2941225.0/144.0))-2926819.0/144.0))-46501.0/36.0))+var_inter[0]*val[7]

#
def interpolation_vertex( var_inter, val_vertex )
    return var_inter[0]*val_vertex[1]+(1-var_inter[0])*val_vertex[0]
#
def nb_children( sub_nvi ) when sub_nvi==0
    return 1
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==0
    return child_var_inter
def type_child( sub_nvi, num_child ) when sub_nvi==0
    return Bar_5
def node_number_child( sub_nvi, num_child ) when sub_nvi==0
    return 0 .. 5
#
def nb_children( sub_nvi ) when sub_nvi==1
    return 2
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==0
    return [0]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return [0]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==1
    return [1]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return [1]
def normal( var_inter, pos_nodes )
    assert( 0, "normal is defined only for nb_dim == nvi + 1" )
#
def jac_mat( var_inter, pos_nodes )
    res := Mat[ type_promote(var_inter[0],pos_nodes[0][0],mul), Gen[ 1, 1 ] ]()
    R_0 := pos_nodes[4][0]; R_1 := pos_nodes[3][0]; R_2 := pos_nodes[2][0]; R_3 := pos_nodes[0][0];
    R_4 := var_inter[0]; R_5 := 256.0*R_4; R_5 = (-384.0)+R_5; R_5 = R_4*R_5;
    R_5 = 152.0+R_5; R_5 = R_4*R_5; R_5 = (-12.0)+R_5; R_5 = R_1*R_5;
    R_1 = (-512.0/3.0)*R_4; R_6 := 224.0+R_1; R_6 = R_4*R_6; R_6 = (-224.0/3.0)+R_6;
    R_6 = R_4*R_6; R_6 = (16.0/3.0)+R_6; R_6 = R_0*R_6; R_1 = 288.0+R_1;
    R_1 = R_4*R_1; R_1 = (-416.0/3.0)+R_1; R_1 = R_4*R_1; R_1 = 16.0+R_1;
    R_1 = R_2*R_1; R_2 = (128.0/3.0)*R_4; R_0 = (-80.0)+R_2; R_0 = R_4*R_0;
    R_0 = (140.0/3.0)+R_0; R_0 = R_4*R_0; R_0 = (-25.0/3.0)+R_0; R_0 = R_3*R_0;
    R_2 = (-48.0)+R_2; R_2 = R_4*R_2; R_2 = (44.0/3.0)+R_2; R_2 = R_4*R_2;
    R_2 = (-1.0)+R_2; R_4 = pos_nodes[1][0]; R_2 = R_4*R_2; R_0 = R_2+R_0;
    R_1 = R_0+R_1; R_5 = R_1+R_5; R_6 = R_5+R_6; res(0,0) = R_6;
    return res
#
def jac( var_inter, pos_nodes )
    R_0 := pos_nodes[4][0]; R_1 := pos_nodes[3][0]; R_2 := pos_nodes[2][0]; R_3 := pos_nodes[0][0];
    R_4 := var_inter[0]; R_5 := 256.0*R_4; R_5 = (-384.0)+R_5; R_5 = R_4*R_5;
    R_5 = 152.0+R_5; R_5 = R_4*R_5; R_5 = (-12.0)+R_5; R_5 = R_1*R_5;
    R_1 = (-512.0/3.0)*R_4; R_6 := 224.0+R_1; R_6 = R_4*R_6; R_6 = (-224.0/3.0)+R_6;
    R_6 = R_4*R_6; R_6 = (16.0/3.0)+R_6; R_6 = R_0*R_6; R_1 = 288.0+R_1;
    R_1 = R_4*R_1; R_1 = (-416.0/3.0)+R_1; R_1 = R_4*R_1; R_1 = 16.0+R_1;
    R_1 = R_2*R_1; R_2 = (128.0/3.0)*R_4; R_0 = (-80.0)+R_2; R_0 = R_4*R_0;
    R_0 = (140.0/3.0)+R_0; R_0 = R_4*R_0; R_0 = (-25.0/3.0)+R_0; R_0 = R_3*R_0;
    R_2 = (-48.0)+R_2; R_2 = R_4*R_2; R_2 = (44.0/3.0)+R_2; R_2 = R_4*R_2;
    R_2 = (-1.0)+R_2; R_4 = pos_nodes[1][0]; R_2 = R_4*R_2; R_0 = R_2+R_0;
    R_1 = R_0+R_1; R_5 = R_1+R_5; R_6 = R_5+R_6; res := R_6;
    return res
#
def inv_jac_mat( var_inter, pos_nodes )
    res := Mat[ type_promote(var_inter[0],pos_nodes[0][0],mul), Gen[ 1, 1 ] ]()
    R_0 := pos_nodes[4][0]; R_1 := pos_nodes[3][0]; R_2 := pos_nodes[2][0]; R_3 := pos_nodes[0][0];
    R_4 := var_inter[0]; R_5 := 256.0*R_4; R_5 = (-384.0)+R_5; R_5 = R_4*R_5;
    R_5 = 152.0+R_5; R_5 = R_4*R_5; R_5 = (-12.0)+R_5; R_5 = R_1*R_5;
    R_1 = (-512.0/3.0)*R_4; R_6 := 224.0+R_1; R_6 = R_4*R_6; R_6 = (-224.0/3.0)+R_6;
    R_6 = R_4*R_6; R_6 = (16.0/3.0)+R_6; R_6 = R_0*R_6; R_1 = 288.0+R_1;
    R_1 = R_4*R_1; R_1 = (-416.0/3.0)+R_1; R_1 = R_4*R_1; R_1 = 16.0+R_1;
    R_1 = R_2*R_1; R_2 = (128.0/3.0)*R_4; R_0 = (-80.0)+R_2; R_0 = R_4*R_0;
    R_0 = (140.0/3.0)+R_0; R_0 = R_4*R_0; R_0 = (-25.0/3.0)+R_0; R_0 = R_3*R_0;
    R_2 = (-48.0)+R_2; R_2 = R_4*R_2; R_2 = (44.0/3.0)+R_2; R_2 = R_4*R_2;
    R_2 = (-1.0)+R_2; R_4 = pos_nodes[1][0]; R_2 = R_4*R_2; R_0 = R_2+R_0;
    R_1 = R_0+R_1; R_5 = R_1+R_5; R_6 = R_5+R_6; R_6 = 1/R_6;
    res(0,0) = R_6; 
    return res
#
def measure( var_inter, pos_nodes )
    R_0 := pos_nodes[0][0]; R_0 = (-1.0)*R_0; R_1 := pos_nodes[1][0]; R_0 = R_1+R_0;
    res := R_0; 
    return res
#
def barycenter( var_inter, pos_nodes )
    res := Vec[ type_promote(var_inter[0],pos_nodes[0][0],mul), 1 ]()
    R_0 := pos_nodes[2][0]; R_1 := (-1.0)*R_0; R_2 := pos_nodes[4][0]; R_1 = R_2+R_1;
    R_1 = (-32.0/3.0)*R_1; R_3 := (-1.0)*R_2; R_3 = R_0+R_3; R_4 := 32.0*R_3;
    R_3 = (-8.0/3.0)*R_3; R_0 = R_2+R_0; R_2 = (32.0/3.0)*R_0; R_5 := (-640.0/3.0)*R_0;
    R_6 := (64.0/3.0)*R_0; R_0 = 32.0*R_0; R_7 := pos_nodes[3][0]; R_8 := (-20.0)*R_7;
    R_9 := 320.0*R_7; R_5 = R_9+R_5; R_9 = (-40.0)*R_7; R_10 := (-60.0)*R_7;
    R_11 := pos_nodes[1][0]; R_12 := (-1.0)*R_11; R_13 := pos_nodes[0][0]; R_14 := (-1.0)*R_13;
    R_14 = R_11+R_14; R_15 := 16.0*R_14; R_4 = R_15+R_4; R_14 = (-1.0/3.0)*R_14;
    R_3 = R_14+R_3; R_11 = R_11+R_13; R_14 = (-2.0/3.0)*R_11; R_8 = R_14+R_8;
    R_2 = R_8+R_2; R_4 = R_2*R_4; R_2 = (160.0/3.0)*R_11; R_2 = R_5+R_2;
    R_2 = R_2*R_3; R_4 = R_2+R_4; R_2 = (-4.0/3.0)*R_11; R_2 = R_9+R_2;
    R_6 = R_2+R_6; R_11 = (-2.0)*R_11; R_11 = R_10+R_11; R_0 = R_11+R_0;
    R_3 = R_0*R_3; R_3 = (-1.0/12.0)*R_3; R_12 = R_13+R_12; R_13 = (-16.0/3.0)*R_12;
    R_1 = R_13+R_1; R_1 = R_6*R_1; R_4 = R_1+R_4; R_4 = (-1.0/80.0)*R_4;
    R_7 = R_7*R_12; R_7 = R_3+R_7; R_4 = R_7+R_4; R_12 = 1/R_12;
    R_4 = R_12*R_4; res[0] = R_4; 
    return res
#
def inertia_operator_for_barycenter( var_inter, pos_nodes )
    R_0 := pos_nodes[2][0]; R_1 := (-1.0)*R_0; R_2 := pos_nodes[4][0]; R_1 = R_2+R_1;
    R_3 := (16.0/3.0)*R_1; R_1 = (-32.0/3.0)*R_1; R_4 := (-1.0)*R_2; R_4 = R_0+R_4;
    R_5 := 32.0*R_4; R_4 = (-8.0/3.0)*R_4; R_0 = R_2+R_0; R_2 = (-512.0/3.0)*R_0;
    R_6 := (-128.0/3.0)*R_0; R_7 := (32.0/3.0)*R_0; R_8 := (-640.0/3.0)*R_0; R_9 := (64.0/3.0)*R_0;
    R_0 = 32.0*R_0; R_10 := pos_nodes[1][0]; R_11 := (-1.0)*R_10; R_12 := pos_nodes[0][0];
    R_13 := (-1.0)*R_12; R_13 = R_10+R_13; R_14 := (-2.0/3.0)*R_13; R_14 = R_3+R_14;
    R_3 = 16.0*R_13; R_5 = R_3+R_5; R_13 = (-1.0/3.0)*R_13; R_4 = R_13+R_4;
    R_13 = pow(R_4,2); R_10 = R_10+R_12; R_3 = (128.0/3.0)*R_10; R_15 := (32.0/3.0)*R_10;
    R_16 := (-2.0/3.0)*R_10; R_17 := (160.0/3.0)*R_10; R_18 := (-4.0/3.0)*R_10; R_10 = (-2.0)*R_10;
    R_11 = R_12+R_11; R_12 = (-16.0/3.0)*R_11; R_1 = R_12+R_1; R_12 = R_4*R_1;
    R_19 := 1/R_11; R_20 := pos_nodes[3][0]; R_21 := 256.0*R_20; R_3 = R_21+R_3;
    R_3 = R_2+R_3; R_2 = 64.0*R_20; R_6 = R_2+R_6; R_6 = R_15+R_6;
    R_15 = (-20.0)*R_20; R_15 = R_16+R_15; R_7 = R_15+R_7; R_15 = R_4*R_7;
    R_16 = pow(R_7,2); R_2 = R_7*R_5; R_21 = 320.0*R_20; R_8 = R_21+R_8;
    R_17 = R_8+R_17; R_17 = R_17*R_4; R_2 = R_17+R_2; R_17 = (-40.0)*R_20;
    R_18 = R_17+R_18; R_9 = R_18+R_9; R_14 = R_9*R_14; R_18 = R_9*R_1;
    R_2 = R_18+R_2; R_2 = (-1.0/80.0)*R_2; R_11 = R_20*R_11; R_18 = (-60.0)*R_20;
    R_10 = R_18+R_10; R_0 = R_10+R_0; R_0 = R_0*R_4; R_0 = (-1.0/12.0)*R_0;
    R_11 = R_0+R_11; R_2 = R_11+R_2; R_2 = R_19*R_2; R_2 = (-1.0)*R_2;
    R_2 = R_20+R_2; R_1 = R_2*R_1; R_15 = R_1+R_15; R_15 = R_9*R_15;
    R_9 = R_2*R_4; R_3 = R_9*R_3; R_15 = R_3+R_15; R_15 = 2.0*R_15;
    R_6 = R_2*R_6; R_12 = R_6+R_12; R_12 = 2.0*R_12; R_12 = R_16+R_12;
    R_12 = R_4*R_12; R_16 = R_2*R_5; R_14 = R_16+R_14; R_14 = R_2*R_14;
    R_7 = R_2*R_7; R_7 = 2.0*R_7; R_7 = R_13+R_7; R_5 = R_7*R_5;
    R_12 = R_5+R_12; R_15 = R_12+R_15; R_15 = (1.0/80.0)*R_15; R_7 = R_7*R_4;
    R_14 = R_7+R_14; R_14 = (1.0/12.0)*R_14; R_2 = pow(R_2,2); R_4 = R_2*R_4;
    R_14 = R_4+R_14; R_15 = R_14+R_15; res := R_15; 
    return res
