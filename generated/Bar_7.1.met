static const nvi := 1
static const nb_nodes := 7
static const nb_vertex_nodes := 2
static const center_of_var_inter := [ 1.0/2.0 ]
#
def interpolation( var_inter, val, interpolation_base )
    if interpolation_base == "lagrange"
        return val[1]*var_inter[0]*(var_inter[0]*(137.0/10.0+var_inter[0]*(var_inter[0]*(153+var_inter[0]*(324.0/5.0*var_inter[0]-162))-135.0/2.0))-1)+val[0]*(1+var_inter[0]*(var_inter[0]*(406.0/5.0+var_inter[0]*(var_inter[0]*(315+var_inter[0]*(324.0/5.0*var_inter[0]-1134.0/5.0))-441.0/2.0))-147.0/10.0))+val[2]*var_inter[0]*(36+var_inter[0]*(var_inter[0]*(1044+var_inter[0]*(var_inter[0]*(1296-1944.0/5.0*var_inter[0])-1674))-1566.0/5.0))+val[3]*var_inter[0]*(var_inter[0]*(1053.0/2.0+var_inter[0]*(var_inter[0]*(3699+var_inter[0]*(972*var_inter[0]-3078))-4149.0/2.0))-45)+val[4]*var_inter[0]*(40+var_inter[0]*(var_inter[0]*(2232+var_inter[0]*(var_inter[0]*(3888-1296*var_inter[0])-4356))-508))+val[5]*var_inter[0]*(var_inter[0]*(297+var_inter[0]*(var_inter[0]*(2889+var_inter[0]*(972*var_inter[0]-2754))-2763.0/2.0))-45.0/2.0)+val[6]*var_inter[0]*(36.0/5.0+var_inter[0]*(var_inter[0]*(468+var_inter[0]*(var_inter[0]*(5184.0/5.0-1944.0/5.0*var_inter[0])-1026))-486.0/5.0))
    else if interpolation_base == "hierarchical"
        return val[1]*var_inter[0]+val[0]*(1-var_inter[0])+val[2]*var_inter[0]*(36+var_inter[0]*(var_inter[0]*(1044+var_inter[0]*(var_inter[0]*(1296-1944.0/5.0*var_inter[0])-1674))-1566.0/5.0))+val[3]*var_inter[0]*(var_inter[0]*(1053.0/2.0+var_inter[0]*(var_inter[0]*(3699+var_inter[0]*(972*var_inter[0]-3078))-4149.0/2.0))-45)+val[4]*var_inter[0]*(40+var_inter[0]*(var_inter[0]*(2232+var_inter[0]*(var_inter[0]*(3888-1296*var_inter[0])-4356))-508))+val[5]*var_inter[0]*(var_inter[0]*(297+var_inter[0]*(var_inter[0]*(2889+var_inter[0]*(972*var_inter[0]-2754))-2763.0/2.0))-45.0/2.0)+val[6]*var_inter[0]*(36.0/5.0+var_inter[0]*(var_inter[0]*(468+var_inter[0]*(var_inter[0]*(5184.0/5.0-1944.0/5.0*var_inter[0])-1026))-486.0/5.0))

#
def interpolation_deg( var_inter, val, interpolation_base, deg ) when deg == 6
    if interpolation_base == "lagrange"
        return val[5]*var_inter[0]*(36.0/5.0+var_inter[0]*(var_inter[0]*(468+var_inter[0]*(var_inter[0]*(5184.0/5.0-1944.0/5.0*var_inter[0])-1026))-486.0/5.0))+(1+var_inter[0]*(var_inter[0]*(406.0/5.0+var_inter[0]*(var_inter[0]*(315+var_inter[0]*(324.0/5.0*var_inter[0]-1134.0/5.0))-441.0/2.0))-147.0/10.0))*val[0]+var_inter[0]*(36+var_inter[0]*(var_inter[0]*(1044+var_inter[0]*(var_inter[0]*(1296-1944.0/5.0*var_inter[0])-1674))-1566.0/5.0))*val[1]+var_inter[0]*(var_inter[0]*(1053.0/2.0+var_inter[0]*(var_inter[0]*(3699+var_inter[0]*(972*var_inter[0]-3078))-4149.0/2.0))-45)*val[2]+val[3]*var_inter[0]*(40+var_inter[0]*(var_inter[0]*(2232+var_inter[0]*(var_inter[0]*(3888-1296*var_inter[0])-4356))-508))+val[4]*var_inter[0]*(var_inter[0]*(297+var_inter[0]*(var_inter[0]*(2889+var_inter[0]*(972*var_inter[0]-2754))-2763.0/2.0))-45.0/2.0)+val[6]*var_inter[0]*(var_inter[0]*(137.0/10.0+var_inter[0]*(var_inter[0]*(153+var_inter[0]*(324.0/5.0*var_inter[0]-162))-135.0/2.0))-1)
    else if interpolation_base == "hierarchical"
        return val[5]*var_inter[0]*(36.0/5.0+var_inter[0]*(var_inter[0]*(468+var_inter[0]*(var_inter[0]*(5184.0/5.0-1944.0/5.0*var_inter[0])-1026))-486.0/5.0))+val[4]*var_inter[0]*(var_inter[0]*(297+var_inter[0]*(var_inter[0]*(2889+var_inter[0]*(972*var_inter[0]-2754))-2763.0/2.0))-45.0/2.0)+val[3]*var_inter[0]*(40+var_inter[0]*(var_inter[0]*(2232+var_inter[0]*(var_inter[0]*(3888-1296*var_inter[0])-4356))-508))+var_inter[0]*(var_inter[0]*(1053.0/2.0+var_inter[0]*(var_inter[0]*(3699+var_inter[0]*(972*var_inter[0]-3078))-4149.0/2.0))-45)*val[2]+(1-var_inter[0])*val[0]+var_inter[0]*(36+var_inter[0]*(var_inter[0]*(1044+var_inter[0]*(var_inter[0]*(1296-1944.0/5.0*var_inter[0])-1674))-1566.0/5.0))*val[1]+var_inter[0]*val[6]

#
def interpolation_deg( var_inter, val, interpolation_base, deg ) when deg == 7
    if interpolation_base == "lagrange"
        return var_inter[0]*(var_inter[0]*(49931.0/360.0+var_inter[0]*(var_inter[0]*(98441.0/36.0+var_inter[0]*(var_inter[0]*(1294139.0/360.0-823543.0/720.0*var_inter[0])-319333.0/72.0))-634207.0/720.0))-49.0/6.0)*val[6]+val[5]*var_inter[0]*(147.0/5.0+var_inter[0]*(var_inter[0]*(45962.0/15.0+var_inter[0]*(var_inter[0]*(1159683.0/80.0+var_inter[0]*(823543.0/240.0*var_inter[0]-2705927.0/240.0))-444185.0/48.0))-9849.0/20.0))+(1+var_inter[0]*(var_inter[0]*(22981.0/180.0+var_inter[0]*(var_inter[0]*(16807.0/18.0+var_inter[0]*(var_inter[0]*(117649.0/180.0-117649.0/720.0*var_inter[0])-386561.0/360.0))-331681.0/720.0))-363.0/20.0))*val[0]+val[1]*var_inter[0]*(49+var_inter[0]*(var_inter[0]*(109417.0/45.0+var_inter[0]*(var_inter[0]*(991613.0/144.0+var_inter[0]*(823543.0/720.0*var_inter[0]-352947.0/80.0))-88837.0/16.0))-10927.0/20.0))+var_inter[0]*(var_inter[0]*(43071.0/40.0+var_inter[0]*(var_inter[0]*(170471.0/12.0+var_inter[0]*(var_inter[0]*(1529437.0/120.0-823543.0/240.0*var_inter[0])-151263.0/8.0))-1347647.0/240.0))-147.0/2.0)*val[2]+val[3]*var_inter[0]*(245.0/3.0+var_inter[0]*(var_inter[0]*(133427.0/18.0+var_inter[0]*(var_inter[0]*(4151329.0/144.0+var_inter[0]*(823543.0/144.0*var_inter[0]-2941225.0/144.0))-2926819.0/144.0))-46501.0/36.0))+val[4]*var_inter[0]*(var_inter[0]*(2009.0/2.0+var_inter[0]*(var_inter[0]*(52822.0/3.0+var_inter[0]*(var_inter[0]*(117649.0/6.0-823543.0/144.0*var_inter[0])-1899191.0/72.0))-872935.0/144.0))-245.0/4.0)+val[7]*var_inter[0]*(1+var_inter[0]*(var_inter[0]*(9947.0/90.0+var_inter[0]*(var_inter[0]*(84035.0/144.0+var_inter[0]*(117649.0/720.0*var_inter[0]-117649.0/240.0))-16807.0/48.0))-343.0/20.0))
    else if interpolation_base == "hierarchical"
        return var_inter[0]*(var_inter[0]*(49931.0/360.0+var_inter[0]*(var_inter[0]*(98441.0/36.0+var_inter[0]*(var_inter[0]*(1294139.0/360.0-823543.0/720.0*var_inter[0])-319333.0/72.0))-634207.0/720.0))-49.0/6.0)*val[6]+val[5]*var_inter[0]*(147.0/5.0+var_inter[0]*(var_inter[0]*(45962.0/15.0+var_inter[0]*(var_inter[0]*(1159683.0/80.0+var_inter[0]*(823543.0/240.0*var_inter[0]-2705927.0/240.0))-444185.0/48.0))-9849.0/20.0))+val[4]*var_inter[0]*(var_inter[0]*(2009.0/2.0+var_inter[0]*(var_inter[0]*(52822.0/3.0+var_inter[0]*(var_inter[0]*(117649.0/6.0-823543.0/144.0*var_inter[0])-1899191.0/72.0))-872935.0/144.0))-245.0/4.0)+val[3]*var_inter[0]*(245.0/3.0+var_inter[0]*(var_inter[0]*(133427.0/18.0+var_inter[0]*(var_inter[0]*(4151329.0/144.0+var_inter[0]*(823543.0/144.0*var_inter[0]-2941225.0/144.0))-2926819.0/144.0))-46501.0/36.0))+(1-var_inter[0])*val[0]+val[1]*var_inter[0]*(49+var_inter[0]*(var_inter[0]*(109417.0/45.0+var_inter[0]*(var_inter[0]*(991613.0/144.0+var_inter[0]*(823543.0/720.0*var_inter[0]-352947.0/80.0))-88837.0/16.0))-10927.0/20.0))+var_inter[0]*(var_inter[0]*(43071.0/40.0+var_inter[0]*(var_inter[0]*(170471.0/12.0+var_inter[0]*(var_inter[0]*(1529437.0/120.0-823543.0/240.0*var_inter[0])-151263.0/8.0))-1347647.0/240.0))-147.0/2.0)*val[2]+var_inter[0]*val[7]

#
def interpolation_deg( var_inter, val, interpolation_base, deg ) when deg == 8
    if interpolation_base == "lagrange"
        return var_inter[0]*(var_inter[0]*(2764+var_inter[0]*(var_inter[0]*(703552.0/9.0+var_inter[0]*(var_inter[0]*(1712128.0/9.0+var_inter[0]*(262144.0/9.0*var_inter[0]-1048576.0/9.0))-1466368.0/9.0))-186496.0/9.0))-140)*val[4]+var_inter[0]*(448.0/3.0+var_inter[0]*(var_inter[0]*(102016.0/5.0+var_inter[0]*(var_inter[0]*(145408+var_inter[0]*(var_inter[0]*(1441792.0/15.0-1048576.0/45.0*var_inter[0])-2441216.0/15.0))-1097728.0/15.0))-128192.0/45.0))*val[3]+var_inter[0]*(64+var_inter[0]*(var_inter[0]*(44672.0/9.0+var_inter[0]*(var_inter[0]*(235520.0/9.0+var_inter[0]*(var_inter[0]*(131072.0/9.0-1048576.0/315.0*var_inter[0])-1196032.0/45.0))-673792.0/45.0))-30784.0/35.0))*val[1]+val[0]*(1+var_inter[0]*(var_inter[0]*(59062.0/315.0+var_inter[0]*(var_inter[0]*(34208.0/15.0+var_inter[0]*(var_inter[0]*(53248.0/15.0+var_inter[0]*(131072.0/315.0*var_inter[0]-65536.0/35.0))-18432.0/5.0))-4272.0/5.0))-761.0/35.0))+var_inter[0]*(var_inter[0]*(9936.0/5.0+var_inter[0]*(var_inter[0]*(1956992.0/45.0+var_inter[0]*(var_inter[0]*(3915776.0/45.0+var_inter[0]*(524288.0/45.0*var_inter[0]-2228224.0/45.0))-733184.0/9.0))-587296.0/45.0))-112)*val[2]+var_inter[0]*(448.0/5.0+var_inter[0]*(var_inter[0]*(626048.0/45.0+var_inter[0]*(var_inter[0]*(5285888.0/45.0+var_inter[0]*(var_inter[0]*(4063232.0/45.0-1048576.0/45.0*var_inter[0])-6406144.0/45.0))-2443264.0/45.0))-9024.0/5.0))*val[5]+var_inter[0]*(var_inter[0]*(34288.0/45.0+var_inter[0]*(var_inter[0]*(358784.0/15.0+var_inter[0]*(var_inter[0]*(999424.0/15.0+var_inter[0]*(524288.0/45.0*var_inter[0]-131072.0/3.0))-53248))-5984))-112.0/3.0)*val[6]+var_inter[0]*(64.0/7.0+var_inter[0]*(var_inter[0]*(67456.0/45.0+var_inter[0]*(var_inter[0]*(124928.0/9.0+var_inter[0]*(var_inter[0]*(3801088.0/315.0-1048576.0/315.0*var_inter[0])-802816.0/45.0))-274432.0/45.0))-6592.0/35.0))*val[7]+var_inter[0]*(var_inter[0]*(726.0/35.0+var_inter[0]*(var_inter[0]*(30944.0/45.0+var_inter[0]*(var_inter[0]*(94208.0/45.0+var_inter[0]*(131072.0/315.0*var_inter[0]-65536.0/45.0))-14336.0/9.0))-7504.0/45.0))-1)*val[8]
    else if interpolation_base == "hierarchical"
        return var_inter[0]*(448.0/3.0+var_inter[0]*(var_inter[0]*(102016.0/5.0+var_inter[0]*(var_inter[0]*(145408+var_inter[0]*(var_inter[0]*(1441792.0/15.0-1048576.0/45.0*var_inter[0])-2441216.0/15.0))-1097728.0/15.0))-128192.0/45.0))*val[3]+(1-var_inter[0])*val[0]+var_inter[0]*(64+var_inter[0]*(var_inter[0]*(44672.0/9.0+var_inter[0]*(var_inter[0]*(235520.0/9.0+var_inter[0]*(var_inter[0]*(131072.0/9.0-1048576.0/315.0*var_inter[0])-1196032.0/45.0))-673792.0/45.0))-30784.0/35.0))*val[1]+var_inter[0]*(var_inter[0]*(9936.0/5.0+var_inter[0]*(var_inter[0]*(1956992.0/45.0+var_inter[0]*(var_inter[0]*(3915776.0/45.0+var_inter[0]*(524288.0/45.0*var_inter[0]-2228224.0/45.0))-733184.0/9.0))-587296.0/45.0))-112)*val[2]+var_inter[0]*(var_inter[0]*(2764+var_inter[0]*(var_inter[0]*(703552.0/9.0+var_inter[0]*(var_inter[0]*(1712128.0/9.0+var_inter[0]*(262144.0/9.0*var_inter[0]-1048576.0/9.0))-1466368.0/9.0))-186496.0/9.0))-140)*val[4]+var_inter[0]*(448.0/5.0+var_inter[0]*(var_inter[0]*(626048.0/45.0+var_inter[0]*(var_inter[0]*(5285888.0/45.0+var_inter[0]*(var_inter[0]*(4063232.0/45.0-1048576.0/45.0*var_inter[0])-6406144.0/45.0))-2443264.0/45.0))-9024.0/5.0))*val[5]+var_inter[0]*(var_inter[0]*(34288.0/45.0+var_inter[0]*(var_inter[0]*(358784.0/15.0+var_inter[0]*(var_inter[0]*(999424.0/15.0+var_inter[0]*(524288.0/45.0*var_inter[0]-131072.0/3.0))-53248))-5984))-112.0/3.0)*val[6]+var_inter[0]*(64.0/7.0+var_inter[0]*(var_inter[0]*(67456.0/45.0+var_inter[0]*(var_inter[0]*(124928.0/9.0+var_inter[0]*(var_inter[0]*(3801088.0/315.0-1048576.0/315.0*var_inter[0])-802816.0/45.0))-274432.0/45.0))-6592.0/35.0))*val[7]+var_inter[0]*val[8]

#
def interpolation_deg( var_inter, val, interpolation_base, deg ) when deg == 9
    if interpolation_base == "lagrange"
        return var_inter[0]*(1134.0/5.0+var_inter[0]*(var_inter[0]*(795339.0/16.0+var_inter[0]*(var_inter[0]*(215023653.0/320.0+var_inter[0]*(var_inter[0]*(35606547.0/32.0+var_inter[0]*(43046721.0/320.0*var_inter[0]-4782969.0/8.0))-18009945.0/16.0))-3844017.0/16.0))-21465.0/4.0))*val[5]+var_inter[0]*(var_inter[0]*(526419.0/80.0+var_inter[0]*(var_inter[0]*(89119521.0/320.0+var_inter[0]*(var_inter[0]*(195629337.0/160.0+var_inter[0]*(var_inter[0]*(196101729.0/320.0-43046721.0/320.0*var_inter[0])-187598673.0/160.0))-241241409.0/320.0))-4752351.0/80.0))-567.0/2.0)*val[4]+val[0]*(1+var_inter[0]*(var_inter[0]*(58635.0/224.0+var_inter[0]*(var_inter[0]*(623295.0/128.0+var_inter[0]*(var_inter[0]*(885735.0/64.0+var_inter[0]*(var_inter[0]*(4782969.0/896.0-4782969.0/4480.0*var_inter[0])-5137263.0/448.0))-6589431.0/640.0))-40707.0/28.0))-7129.0/280.0))+val[1]*var_inter[0]*(81+var_inter[0]*(var_inter[0]*(10307331.0/1120.0+var_inter[0]*(var_inter[0]*(51221727.0/640.0+var_inter[0]*(var_inter[0]*(31355019.0/320.0+var_inter[0]*(43046721.0/4480.0*var_inter[0]-52612659.0/1120.0))-4546773.0/40.0))-5589243.0/160.0))-373329.0/280.0))+val[2]*var_inter[0]*(var_inter[0]*(475389.0/140.0+var_inter[0]*(var_inter[0]*(18152829.0/160.0+var_inter[0]*(var_inter[0]*(33244587.0/80.0+var_inter[0]*(var_inter[0]*(205667667.0/1120.0-43046721.0/1120.0*var_inter[0])-3720087.0/10.0))-44529507.0/160.0))-15190173.0/560.0))-162)+var_inter[0]*(252+var_inter[0]*(var_inter[0]*(1959363.0/40.0+var_inter[0]*(var_inter[0]*(91020753.0/160.0+var_inter[0]*(var_inter[0]*(16474671.0/20.0+var_inter[0]*(14348907.0/160.0*var_inter[0]-33480783.0/80.0))-71035947.0/80.0))-8776431.0/40.0))-56601.0/10.0))*val[3]+val[6]*var_inter[0]*(var_inter[0]*(60381.0/20.0+var_inter[0]*(var_inter[0]*(22480173.0/160.0+var_inter[0]*(var_inter[0]*(55447011.0/80.0+var_inter[0]*(var_inter[0]*(62178597.0/160.0-14348907.0/160.0*var_inter[0])-28166373.0/40.0))-64448703.0/160.0))-2276289.0/80.0))-126)+val[7]*var_inter[0]*(324.0/7.0+var_inter[0]*(var_inter[0]*(2989629.0/280.0+var_inter[0]*(var_inter[0]*(25043337.0/160.0+var_inter[0]*(var_inter[0]*(80247591.0/280.0+var_inter[0]*(43046721.0/1120.0*var_inter[0]-90876411.0/560.0))-22025277.0/80.0))-2142531.0/40.0))-78327.0/70.0))+val[8]*var_inter[0]*(var_inter[0]*(275967.0/1120.0+var_inter[0]*(var_inter[0]*(7712091.0/640.0+var_inter[0]*(var_inter[0]*(20490003.0/320.0+var_inter[0]*(var_inter[0]*(176969853.0/4480.0-43046721.0/4480.0*var_inter[0])-21789081.0/320.0))-22878207.0/640.0))-1328967.0/560.0))-81.0/8.0)+val[9]*var_inter[0]*(1+var_inter[0]*(var_inter[0]*(265779.0/1120.0+var_inter[0]*(var_inter[0]*(2337903.0/640.0+var_inter[0]*(var_inter[0]*(2302911.0/320.0+var_inter[0]*(4782969.0/4480.0*var_inter[0]-4782969.0/1120.0))-531441.0/80.0))-194643.0/160.0))-6849.0/280.0))
    else if interpolation_base == "hierarchical"
        return var_inter[0]*(1134.0/5.0+var_inter[0]*(var_inter[0]*(795339.0/16.0+var_inter[0]*(var_inter[0]*(215023653.0/320.0+var_inter[0]*(var_inter[0]*(35606547.0/32.0+var_inter[0]*(43046721.0/320.0*var_inter[0]-4782969.0/8.0))-18009945.0/16.0))-3844017.0/16.0))-21465.0/4.0))*val[5]+var_inter[0]*(var_inter[0]*(526419.0/80.0+var_inter[0]*(var_inter[0]*(89119521.0/320.0+var_inter[0]*(var_inter[0]*(195629337.0/160.0+var_inter[0]*(var_inter[0]*(196101729.0/320.0-43046721.0/320.0*var_inter[0])-187598673.0/160.0))-241241409.0/320.0))-4752351.0/80.0))-567.0/2.0)*val[4]+var_inter[0]*(252+var_inter[0]*(var_inter[0]*(1959363.0/40.0+var_inter[0]*(var_inter[0]*(91020753.0/160.0+var_inter[0]*(var_inter[0]*(16474671.0/20.0+var_inter[0]*(14348907.0/160.0*var_inter[0]-33480783.0/80.0))-71035947.0/80.0))-8776431.0/40.0))-56601.0/10.0))*val[3]+val[2]*var_inter[0]*(var_inter[0]*(475389.0/140.0+var_inter[0]*(var_inter[0]*(18152829.0/160.0+var_inter[0]*(var_inter[0]*(33244587.0/80.0+var_inter[0]*(var_inter[0]*(205667667.0/1120.0-43046721.0/1120.0*var_inter[0])-3720087.0/10.0))-44529507.0/160.0))-15190173.0/560.0))-162)+val[1]*var_inter[0]*(81+var_inter[0]*(var_inter[0]*(10307331.0/1120.0+var_inter[0]*(var_inter[0]*(51221727.0/640.0+var_inter[0]*(var_inter[0]*(31355019.0/320.0+var_inter[0]*(43046721.0/4480.0*var_inter[0]-52612659.0/1120.0))-4546773.0/40.0))-5589243.0/160.0))-373329.0/280.0))+(1-var_inter[0])*val[0]+val[6]*var_inter[0]*(var_inter[0]*(60381.0/20.0+var_inter[0]*(var_inter[0]*(22480173.0/160.0+var_inter[0]*(var_inter[0]*(55447011.0/80.0+var_inter[0]*(var_inter[0]*(62178597.0/160.0-14348907.0/160.0*var_inter[0])-28166373.0/40.0))-64448703.0/160.0))-2276289.0/80.0))-126)+val[7]*var_inter[0]*(324.0/7.0+var_inter[0]*(var_inter[0]*(2989629.0/280.0+var_inter[0]*(var_inter[0]*(25043337.0/160.0+var_inter[0]*(var_inter[0]*(80247591.0/280.0+var_inter[0]*(43046721.0/1120.0*var_inter[0]-90876411.0/560.0))-22025277.0/80.0))-2142531.0/40.0))-78327.0/70.0))+val[8]*var_inter[0]*(var_inter[0]*(275967.0/1120.0+var_inter[0]*(var_inter[0]*(7712091.0/640.0+var_inter[0]*(var_inter[0]*(20490003.0/320.0+var_inter[0]*(var_inter[0]*(176969853.0/4480.0-43046721.0/4480.0*var_inter[0])-21789081.0/320.0))-22878207.0/640.0))-1328967.0/560.0))-81.0/8.0)+var_inter[0]*val[9]

#
def interpolation_vertex( var_inter, val_vertex )
    return var_inter[0]*val_vertex[1]+val_vertex[0]*(1-var_inter[0])
#
def nb_children( sub_nvi ) when sub_nvi==0
    return 1
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==0
    return child_var_inter
def type_child( sub_nvi, num_child ) when sub_nvi==0
    return Bar_7
def node_number_child( sub_nvi, num_child ) when sub_nvi==0
    return 0 .. 7
#
def nb_children( sub_nvi ) when sub_nvi==1
    return 2
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==0
    return [0]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return [0]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==1
    return [1]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return [1]
def normal( var_inter, pos_nodes )
    assert( 0, "normal is defined only for nb_dim == nvi + 1" )
#
def jac_mat( var_inter, pos_nodes )
    res := Mat[ type_promote(var_inter[0],pos_nodes[0][0],mul), Gen[ 1, 1 ] ]()
    R_0 := pos_nodes[6][0]; R_1 := pos_nodes[5][0]; R_2 := pos_nodes[2][0]; R_3 := pos_nodes[1][0];
    R_4 := pos_nodes[0][0]; R_5 := pos_nodes[3][0]; R_6 := var_inter[0]; R_7 := (-11664.0/5.0)*R_6;
    R_8 := 5184.0+R_7; R_8 = R_6*R_8; R_8 = (-4104.0)+R_8; R_8 = R_6*R_8;
    R_8 = 1404.0+R_8; R_8 = R_6*R_8; R_8 = (-972.0/5.0)+R_8; R_8 = R_6*R_8;
    R_8 = (36.0/5.0)+R_8; R_8 = R_0*R_8; R_7 = 6480.0+R_7; R_7 = R_6*R_7;
    R_7 = (-6696.0)+R_7; R_7 = R_6*R_7; R_7 = 3132.0+R_7; R_7 = R_6*R_7;
    R_7 = (-3132.0/5.0)+R_7; R_7 = R_6*R_7; R_7 = 36.0+R_7; R_7 = R_2*R_7;
    R_2 = (1944.0/5.0)*R_6; R_0 = (-810.0)+R_2; R_0 = R_6*R_0; R_0 = 612.0+R_0;
    R_0 = R_6*R_0; R_0 = -202.5+R_0; R_0 = R_6*R_0; R_0 = (137.0/5.0)+R_0;
    R_0 = R_6*R_0; R_0 = (-1.0)+R_0; R_0 = R_3*R_0; R_2 = (-1134.0)+R_2;
    R_2 = R_6*R_2; R_2 = 1260.0+R_2; R_2 = R_6*R_2; R_2 = -661.5+R_2;
    R_2 = R_6*R_2; R_2 = (812.0/5.0)+R_2; R_2 = R_6*R_2; R_2 = (-147.0/10.0)+R_2;
    R_2 = R_4*R_2; R_0 = R_2+R_0; R_7 = R_0+R_7; R_0 = 5832.0*R_6;
    R_2 = (-13770.0)+R_0; R_2 = R_6*R_2; R_2 = 11556.0+R_2; R_2 = R_6*R_2;
    R_2 = -4144.5+R_2; R_2 = R_6*R_2; R_2 = 594.0+R_2; R_2 = R_6*R_2;
    R_2 = -22.5+R_2; R_2 = R_1*R_2; R_0 = (-15390.0)+R_0; R_0 = R_6*R_0;
    R_0 = 14796.0+R_0; R_0 = R_6*R_0; R_0 = -6223.5+R_0; R_0 = R_6*R_0;
    R_0 = 1053.0+R_0; R_0 = R_6*R_0; R_0 = (-45.0)+R_0; R_0 = R_5*R_0;
    R_7 = R_0+R_7; R_0 = (-7776.0)*R_6; R_0 = 19440.0+R_0; R_0 = R_6*R_0;
    R_0 = (-17424.0)+R_0; R_0 = R_6*R_0; R_0 = 6696.0+R_0; R_0 = R_6*R_0;
    R_0 = (-1016.0)+R_0; R_0 = R_6*R_0; R_0 = 40.0+R_0; R_6 = pos_nodes[4][0];
    R_0 = R_6*R_0; R_7 = R_0+R_7; R_2 = R_7+R_2; R_8 = R_2+R_8;
    res(0,0) = R_8; 
    return res
#
def jac( var_inter, pos_nodes )
    R_0 := pos_nodes[6][0]; R_1 := pos_nodes[5][0]; R_2 := pos_nodes[2][0]; R_3 := pos_nodes[1][0];
    R_4 := pos_nodes[0][0]; R_5 := pos_nodes[3][0]; R_6 := var_inter[0]; R_7 := (-11664.0/5.0)*R_6;
    R_8 := 5184.0+R_7; R_8 = R_6*R_8; R_8 = (-4104.0)+R_8; R_8 = R_6*R_8;
    R_8 = 1404.0+R_8; R_8 = R_6*R_8; R_8 = (-972.0/5.0)+R_8; R_8 = R_6*R_8;
    R_8 = (36.0/5.0)+R_8; R_8 = R_0*R_8; R_7 = 6480.0+R_7; R_7 = R_6*R_7;
    R_7 = (-6696.0)+R_7; R_7 = R_6*R_7; R_7 = 3132.0+R_7; R_7 = R_6*R_7;
    R_7 = (-3132.0/5.0)+R_7; R_7 = R_6*R_7; R_7 = 36.0+R_7; R_7 = R_2*R_7;
    R_2 = (1944.0/5.0)*R_6; R_0 = (-810.0)+R_2; R_0 = R_6*R_0; R_0 = 612.0+R_0;
    R_0 = R_6*R_0; R_0 = -202.5+R_0; R_0 = R_6*R_0; R_0 = (137.0/5.0)+R_0;
    R_0 = R_6*R_0; R_0 = (-1.0)+R_0; R_0 = R_3*R_0; R_2 = (-1134.0)+R_2;
    R_2 = R_6*R_2; R_2 = 1260.0+R_2; R_2 = R_6*R_2; R_2 = -661.5+R_2;
    R_2 = R_6*R_2; R_2 = (812.0/5.0)+R_2; R_2 = R_6*R_2; R_2 = (-147.0/10.0)+R_2;
    R_2 = R_4*R_2; R_0 = R_2+R_0; R_7 = R_0+R_7; R_0 = 5832.0*R_6;
    R_2 = (-13770.0)+R_0; R_2 = R_6*R_2; R_2 = 11556.0+R_2; R_2 = R_6*R_2;
    R_2 = -4144.5+R_2; R_2 = R_6*R_2; R_2 = 594.0+R_2; R_2 = R_6*R_2;
    R_2 = -22.5+R_2; R_2 = R_1*R_2; R_0 = (-15390.0)+R_0; R_0 = R_6*R_0;
    R_0 = 14796.0+R_0; R_0 = R_6*R_0; R_0 = -6223.5+R_0; R_0 = R_6*R_0;
    R_0 = 1053.0+R_0; R_0 = R_6*R_0; R_0 = (-45.0)+R_0; R_0 = R_5*R_0;
    R_7 = R_0+R_7; R_0 = (-7776.0)*R_6; R_0 = 19440.0+R_0; R_0 = R_6*R_0;
    R_0 = (-17424.0)+R_0; R_0 = R_6*R_0; R_0 = 6696.0+R_0; R_0 = R_6*R_0;
    R_0 = (-1016.0)+R_0; R_0 = R_6*R_0; R_0 = 40.0+R_0; R_6 = pos_nodes[4][0];
    R_0 = R_6*R_0; R_7 = R_0+R_7; R_2 = R_7+R_2; R_8 = R_2+R_8;
    res := R_8; 
    return res
#
def inv_jac_mat( var_inter, pos_nodes )
    res := Mat[ type_promote(var_inter[0],pos_nodes[0][0],mul), Gen[ 1, 1 ] ]()
    R_0 := pos_nodes[6][0]; R_1 := pos_nodes[5][0]; R_2 := pos_nodes[2][0]; R_3 := pos_nodes[1][0];
    R_4 := pos_nodes[0][0]; R_5 := pos_nodes[3][0]; R_6 := var_inter[0]; R_7 := (-11664.0/5.0)*R_6;
    R_8 := 5184.0+R_7; R_8 = R_6*R_8; R_8 = (-4104.0)+R_8; R_8 = R_6*R_8;
    R_8 = 1404.0+R_8; R_8 = R_6*R_8; R_8 = (-972.0/5.0)+R_8; R_8 = R_6*R_8;
    R_8 = (36.0/5.0)+R_8; R_8 = R_0*R_8; R_7 = 6480.0+R_7; R_7 = R_6*R_7;
    R_7 = (-6696.0)+R_7; R_7 = R_6*R_7; R_7 = 3132.0+R_7; R_7 = R_6*R_7;
    R_7 = (-3132.0/5.0)+R_7; R_7 = R_6*R_7; R_7 = 36.0+R_7; R_7 = R_2*R_7;
    R_2 = (1944.0/5.0)*R_6; R_0 = (-810.0)+R_2; R_0 = R_6*R_0; R_0 = 612.0+R_0;
    R_0 = R_6*R_0; R_0 = -202.5+R_0; R_0 = R_6*R_0; R_0 = (137.0/5.0)+R_0;
    R_0 = R_6*R_0; R_0 = (-1.0)+R_0; R_0 = R_3*R_0; R_2 = (-1134.0)+R_2;
    R_2 = R_6*R_2; R_2 = 1260.0+R_2; R_2 = R_6*R_2; R_2 = -661.5+R_2;
    R_2 = R_6*R_2; R_2 = (812.0/5.0)+R_2; R_2 = R_6*R_2; R_2 = (-147.0/10.0)+R_2;
    R_2 = R_4*R_2; R_0 = R_2+R_0; R_7 = R_0+R_7; R_0 = 5832.0*R_6;
    R_2 = (-13770.0)+R_0; R_2 = R_6*R_2; R_2 = 11556.0+R_2; R_2 = R_6*R_2;
    R_2 = -4144.5+R_2; R_2 = R_6*R_2; R_2 = 594.0+R_2; R_2 = R_6*R_2;
    R_2 = -22.5+R_2; R_2 = R_1*R_2; R_0 = (-15390.0)+R_0; R_0 = R_6*R_0;
    R_0 = 14796.0+R_0; R_0 = R_6*R_0; R_0 = -6223.5+R_0; R_0 = R_6*R_0;
    R_0 = 1053.0+R_0; R_0 = R_6*R_0; R_0 = (-45.0)+R_0; R_0 = R_5*R_0;
    R_7 = R_0+R_7; R_0 = (-7776.0)*R_6; R_0 = 19440.0+R_0; R_0 = R_6*R_0;
    R_0 = (-17424.0)+R_0; R_0 = R_6*R_0; R_0 = 6696.0+R_0; R_0 = R_6*R_0;
    R_0 = (-1016.0)+R_0; R_0 = R_6*R_0; R_0 = 40.0+R_0; R_6 = pos_nodes[4][0];
    R_0 = R_6*R_0; R_7 = R_0+R_7; R_2 = R_7+R_2; R_8 = R_2+R_8;
    R_8 = 1/R_8; res(0,0) = R_8; 
    return res
#
def measure( var_inter, pos_nodes )
    R_0 := pos_nodes[0][0]; R_0 = (-1.0)*R_0; R_1 := pos_nodes[1][0]; R_0 = R_1+R_0;
    res := R_0; 
    return res
#
def barycenter( var_inter, pos_nodes )
    res := Vec[ type_promote(var_inter[0],pos_nodes[0][0],mul), 1 ]()
    R_0 := pos_nodes[6][0]; R_1 := (-1.0)*R_0; R_2 := pos_nodes[2][0]; R_1 = R_2+R_1;
    R_1 = (9.0/10.0)*R_1; R_3 := (-1.0)*R_2; R_3 = R_0+R_3; R_4 := 36.0*R_3;
    R_3 = 108.0*R_3; R_0 = R_2+R_0; R_2 = (-81.0/10.0)*R_0; R_5 := 540.0*R_0;
    R_6 := (-27.0/5.0)*R_0; R_0 = (-27.0/10.0)*R_0; R_7 := pos_nodes[1][0]; R_8 := (-1.0)*R_7;
    R_9 := pos_nodes[0][0]; R_10 := (-1.0)*R_9; R_10 = R_7+R_10; R_10 = -4.5*R_10;
    R_4 = R_10+R_4; R_8 = R_9+R_8; R_10 = 1/R_8; R_11 := (-1.0/10.0)*R_8;
    R_12 := 13.5*R_8; R_7 = R_9+R_7; R_9 = (3.0/5.0)*R_7; R_13 := (-45.0)*R_7;
    R_14 := (2.0/5.0)*R_7; R_7 = (1.0/5.0)*R_7; R_15 := pos_nodes[4][0]; R_8 = R_15*R_8;
    R_16 := (-147.0)*R_15; R_17 := 2520.0*R_15; R_18 := (-98.0)*R_15; R_14 = R_18+R_14;
    R_14 = R_6+R_14; R_15 = (-49.0)*R_15; R_7 = R_15+R_7; R_0 = R_7+R_0;
    R_7 = pos_nodes[3][0]; R_15 = pos_nodes[5][0]; R_6 = (-1.0)*R_15; R_6 = R_7+R_6;
    R_18 = -4.5*R_6; R_11 = R_18+R_11; R_1 = R_11+R_1; R_11 = 58.5*R_6;
    R_11 = R_4+R_11; R_6 = 175.5*R_6; R_3 = R_6+R_3; R_12 = R_3+R_12;
    R_7 = R_15+R_7; R_15 = 81.0*R_7; R_2 = R_15+R_2; R_16 = R_2+R_16;
    R_16 = R_9+R_16; R_16 = R_1*R_16; R_16 = (-1.0/12.0)*R_16; R_8 = R_16+R_8;
    R_16 = (-1755.0)*R_7; R_16 = R_5+R_16; R_17 = R_16+R_17; R_13 = R_17+R_13;
    R_13 = R_1*R_13; R_1 = 54.0*R_7; R_14 = R_1+R_14; R_11 = R_14*R_11;
    R_7 = 27.0*R_7; R_0 = R_7+R_0; R_12 = R_0*R_12; R_11 = R_12+R_11;
    R_13 = R_11+R_13; R_13 = (-1.0/80.0)*R_13; R_8 = R_13+R_8; R_10 = R_8*R_10;
    res[0] = R_10; 
    return res
#
def inertia_operator_for_barycenter( var_inter, pos_nodes )
    R_0 := pos_nodes[4][0]; R_1 := 2016.0*R_0; R_2 := 504.0*R_0; R_3 := (-147.0)*R_0;
    R_4 := 2520.0*R_0; R_5 := (-98.0)*R_0; R_6 := (-49.0)*R_0; R_7 := pos_nodes[1][0];
    R_8 := (-1.0)*R_7; R_9 := pos_nodes[0][0]; R_10 := (-1.0)*R_9; R_10 = R_7+R_10;
    R_11 := (1.0/5.0)*R_10; R_10 = -4.5*R_10; R_7 = R_9+R_7; R_12 := (-36.0)*R_7;
    R_12 = R_1+R_12; R_1 = (-9.0)*R_7; R_1 = R_2+R_1; R_2 = (3.0/5.0)*R_7;
    R_13 := (-45.0)*R_7; R_14 := (2.0/5.0)*R_7; R_14 = R_5+R_14; R_7 = (1.0/5.0)*R_7;
    R_7 = R_6+R_7; R_8 = R_9+R_8; R_9 = (-162.0)*R_8; R_6 = 4.5*R_8;
    R_5 = 1/R_8; R_15 := R_0*R_8; R_16 := 13.5*R_8; R_8 = (-1.0/10.0)*R_8;
    R_17 := pos_nodes[6][0]; R_18 := (-1.0)*R_17; R_19 := pos_nodes[2][0]; R_20 := (-1.0)*R_19;
    R_20 = R_17+R_20; R_21 := (-648.0)*R_20; R_22 := (-9.0/5.0)*R_20; R_22 = R_11+R_22;
    R_11 = 36.0*R_20; R_11 = R_10+R_11; R_20 = 108.0*R_20; R_17 = R_19+R_17;
    R_10 = 432.0*R_17; R_23 := 108.0*R_17; R_24 := (-81.0/10.0)*R_17; R_25 := 540.0*R_17;
    R_26 := (-27.0/5.0)*R_17; R_27 := R_26+R_14; R_17 = (-27.0/10.0)*R_17; R_17 = R_7+R_17;
    R_18 = R_19+R_18; R_19 = (-36.0)*R_18; R_6 = R_19+R_6; R_18 = (9.0/10.0)*R_18;
    R_19 = pos_nodes[5][0]; R_7 = (-1.0)*R_19; R_28 := pos_nodes[3][0]; R_19 = R_19+R_28;
    R_29 := (-1404.0)*R_19; R_29 = R_12+R_29; R_29 = R_10+R_29; R_10 = (-351.0)*R_19;
    R_1 = R_10+R_1; R_23 = R_1+R_23; R_1 = 81.0*R_19; R_24 = R_1+R_24;
    R_3 = R_24+R_3; R_3 = R_2+R_3; R_2 = (-1755.0)*R_19; R_2 = R_25+R_2;
    R_4 = R_2+R_4; R_13 = R_4+R_13; R_4 = 54.0*R_19; R_14 = R_14+R_4;
    R_14 = R_26+R_14; R_27 = R_4+R_27; R_19 = 27.0*R_19; R_17 = R_19+R_17;
    R_19 = pow(R_17,2); R_7 = R_28+R_7; R_28 = (-810.0)*R_7; R_21 = R_28+R_21;
    R_9 = R_21+R_9; R_21 = (-9.0)*R_7; R_21 = R_22+R_21; R_21 = R_14*R_21;
    R_22 = 58.5*R_7; R_6 = R_6+R_22; R_22 = R_11+R_22; R_22 = R_27*R_22;
    R_27 = 175.5*R_7; R_20 = R_27+R_20; R_16 = R_20+R_16; R_20 = R_17*R_16;
    R_22 = R_20+R_22; R_7 = -4.5*R_7; R_20 = R_7+R_8; R_20 = R_20+R_18;
    R_3 = R_20*R_3; R_3 = (-1.0/12.0)*R_3; R_15 = R_3+R_15; R_13 = R_20*R_13;
    R_13 = R_22+R_13; R_13 = (-1.0/80.0)*R_13; R_15 = R_13+R_15; R_5 = R_15*R_5;
    R_5 = (-1.0)*R_5; R_5 = R_0+R_5; R_0 = R_5*R_6; R_23 = R_5*R_23;
    R_15 = pow(R_5,2); R_9 = R_15*R_9; R_15 = R_15*R_20; R_13 = R_5*R_16;
    R_13 = R_21+R_13; R_13 = R_5*R_13; R_21 = R_5*R_17; R_21 = 2.0*R_21;
    R_18 = R_7+R_18; R_8 = R_18+R_8; R_17 = R_8*R_17; R_17 = R_0+R_17;
    R_17 = R_14*R_17; R_5 = R_5*R_8; R_29 = R_5*R_29; R_17 = R_29+R_17;
    R_17 = 2.0*R_17; R_6 = R_8*R_6; R_6 = R_23+R_6; R_6 = 2.0*R_6;
    R_6 = R_19+R_6; R_6 = R_20*R_6; R_8 = pow(R_8,2); R_21 = R_8+R_21;
    R_16 = R_21*R_16; R_16 = R_6+R_16; R_9 = R_16+R_9; R_17 = R_9+R_17;
    R_17 = (1.0/80.0)*R_17; R_20 = R_21*R_20; R_13 = R_20+R_13; R_13 = (1.0/12.0)*R_13;
    R_15 = R_13+R_15; R_17 = R_15+R_17; res := R_17; 
    return res
