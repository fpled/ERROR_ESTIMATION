static const nvi := 1
static const nb_nodes := 7
static const nb_vertex_nodes := 2
static const center_of_var_inter := [ 1.0/2.0 ]
#
def interpolation( var_inter, val, interpolation_base )
    if interpolation_base == "lagrange"
        return val[1]*var_inter[0]*(36+var_inter[0]*(var_inter[0]*(1044+var_inter[0]*(var_inter[0]*(1296-1944.0/5.0*var_inter[0])-1674))-1566.0/5.0))+val[0]*(1+var_inter[0]*(var_inter[0]*(406.0/5.0+var_inter[0]*(var_inter[0]*(315+var_inter[0]*(324.0/5.0*var_inter[0]-1134.0/5.0))-441.0/2.0))-147.0/10.0))+val[2]*var_inter[0]*(var_inter[0]*(1053.0/2.0+var_inter[0]*(var_inter[0]*(3699+var_inter[0]*(972*var_inter[0]-3078))-4149.0/2.0))-45)+val[3]*var_inter[0]*(40+var_inter[0]*(var_inter[0]*(2232+var_inter[0]*(var_inter[0]*(3888-1296*var_inter[0])-4356))-508))+val[4]*var_inter[0]*(var_inter[0]*(297+var_inter[0]*(var_inter[0]*(2889+var_inter[0]*(972*var_inter[0]-2754))-2763.0/2.0))-45.0/2.0)+val[5]*var_inter[0]*(36.0/5.0+var_inter[0]*(var_inter[0]*(468+var_inter[0]*(var_inter[0]*(5184.0/5.0-1944.0/5.0*var_inter[0])-1026))-486.0/5.0))+val[6]*var_inter[0]*(var_inter[0]*(137.0/10.0+var_inter[0]*(var_inter[0]*(153+var_inter[0]*(324.0/5.0*var_inter[0]-162))-135.0/2.0))-1)
    else if interpolation_base == "hierarchical"
        return val[0]*(1-var_inter[0])+val[1]*var_inter[0]*(36+var_inter[0]*(var_inter[0]*(1044+var_inter[0]*(var_inter[0]*(1296-1944.0/5.0*var_inter[0])-1674))-1566.0/5.0))+val[2]*var_inter[0]*(var_inter[0]*(1053.0/2.0+var_inter[0]*(var_inter[0]*(3699+var_inter[0]*(972*var_inter[0]-3078))-4149.0/2.0))-45)+val[3]*var_inter[0]*(40+var_inter[0]*(var_inter[0]*(2232+var_inter[0]*(var_inter[0]*(3888-1296*var_inter[0])-4356))-508))+val[4]*var_inter[0]*(var_inter[0]*(297+var_inter[0]*(var_inter[0]*(2889+var_inter[0]*(972*var_inter[0]-2754))-2763.0/2.0))-45.0/2.0)+val[5]*var_inter[0]*(36.0/5.0+var_inter[0]*(var_inter[0]*(468+var_inter[0]*(var_inter[0]*(5184.0/5.0-1944.0/5.0*var_inter[0])-1026))-486.0/5.0))+var_inter[0]*val[6]

#
def generic_interpolation( var_inter, val, interpolation_base, deg ) when deg == 6
    if interpolation_base == "lagrange"
        return val[2]*var_inter[0]*(var_inter[0]*(1053.0/2.0+var_inter[0]*(var_inter[0]*(3699+var_inter[0]*(972*var_inter[0]-3078))-4149.0/2.0))-45)+val[0]*(1+var_inter[0]*(var_inter[0]*(406.0/5.0+var_inter[0]*(var_inter[0]*(315+var_inter[0]*(324.0/5.0*var_inter[0]-1134.0/5.0))-441.0/2.0))-147.0/10.0))+val[1]*var_inter[0]*(36+var_inter[0]*(var_inter[0]*(1044+var_inter[0]*(var_inter[0]*(1296-1944.0/5.0*var_inter[0])-1674))-1566.0/5.0))+val[3]*var_inter[0]*(40+var_inter[0]*(var_inter[0]*(2232+var_inter[0]*(var_inter[0]*(3888-1296*var_inter[0])-4356))-508))+val[4]*var_inter[0]*(var_inter[0]*(297+var_inter[0]*(var_inter[0]*(2889+var_inter[0]*(972*var_inter[0]-2754))-2763.0/2.0))-45.0/2.0)+val[5]*var_inter[0]*(36.0/5.0+var_inter[0]*(var_inter[0]*(468+var_inter[0]*(var_inter[0]*(5184.0/5.0-1944.0/5.0*var_inter[0])-1026))-486.0/5.0))+val[6]*var_inter[0]*(var_inter[0]*(137.0/10.0+var_inter[0]*(var_inter[0]*(153+var_inter[0]*(324.0/5.0*var_inter[0]-162))-135.0/2.0))-1)
    else if interpolation_base == "hierarchical"
        return val[5]*var_inter[0]*(36.0/5.0+var_inter[0]*(var_inter[0]*(468+var_inter[0]*(var_inter[0]*(5184.0/5.0-1944.0/5.0*var_inter[0])-1026))-486.0/5.0))+val[1]*var_inter[0]*(36+var_inter[0]*(var_inter[0]*(1044+var_inter[0]*(var_inter[0]*(1296-1944.0/5.0*var_inter[0])-1674))-1566.0/5.0))+val[0]*(1-var_inter[0])+val[2]*var_inter[0]*(var_inter[0]*(1053.0/2.0+var_inter[0]*(var_inter[0]*(3699+var_inter[0]*(972*var_inter[0]-3078))-4149.0/2.0))-45)+val[3]*var_inter[0]*(40+var_inter[0]*(var_inter[0]*(2232+var_inter[0]*(var_inter[0]*(3888-1296*var_inter[0])-4356))-508))+val[4]*var_inter[0]*(var_inter[0]*(297+var_inter[0]*(var_inter[0]*(2889+var_inter[0]*(972*var_inter[0]-2754))-2763.0/2.0))-45.0/2.0)+var_inter[0]*val[6]

#
def interpolation_vertex( var_inter, val_vertex )
    return var_inter[0]*val_vertex[1]+val_vertex[0]*(1-var_inter[0])
#
def nb_children( sub_nvi ) when sub_nvi==0
    return 1
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==0
    return child_var_inter
def type_child( sub_nvi, num_child ) when sub_nvi==0
    return BarGeneric[Int32]
def node_number_child( sub_nvi, num_child ) when sub_nvi==0
    return 0 .. 7
#
def nb_children( sub_nvi ) when sub_nvi==1
    return 2
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==0
    return [0]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return [0]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==1
    return [1]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return [6]
def normal( var_inter, pos_nodes )
    assert( 0, "normal is defined only for nb_dim == nvi + 1" )
#
def jac_mat( var_inter, pos_nodes )
    res := Mat[ type_promote(var_inter[0],pos_nodes[0][0],mul), Gen[ 1, 1 ] ]()
    R_0 := pos_nodes[6][0]; R_1 := pos_nodes[2][0]; R_2 := pos_nodes[1][0]; R_3 := pos_nodes[0][0];
    R_4 := pos_nodes[3][0]; R_5 := pos_nodes[4][0]; R_6 := var_inter[0]; R_7 := (1944.0/5.0)*R_6;
    R_8 := (-810.0)+R_7; R_8 = R_6*R_8; R_8 = 612.0+R_8; R_8 = R_6*R_8;
    R_8 = -202.5+R_8; R_8 = R_6*R_8; R_8 = (137.0/5.0)+R_8; R_8 = R_6*R_8;
    R_8 = (-1.0)+R_8; R_8 = R_0*R_8; R_7 = (-1134.0)+R_7; R_7 = R_6*R_7;
    R_7 = 1260.0+R_7; R_7 = R_6*R_7; R_7 = -661.5+R_7; R_7 = R_6*R_7;
    R_7 = (812.0/5.0)+R_7; R_7 = R_6*R_7; R_7 = (-147.0/10.0)+R_7; R_7 = R_3*R_7;
    R_3 = (-7776.0)*R_6; R_3 = 19440.0+R_3; R_3 = R_6*R_3; R_3 = (-17424.0)+R_3;
    R_3 = R_6*R_3; R_3 = 6696.0+R_3; R_3 = R_6*R_3; R_3 = (-1016.0)+R_3;
    R_3 = R_6*R_3; R_3 = 40.0+R_3; R_3 = R_4*R_3; R_4 = 5832.0*R_6;
    R_0 = (-15390.0)+R_4; R_0 = R_6*R_0; R_0 = 14796.0+R_0; R_0 = R_6*R_0;
    R_0 = -6223.5+R_0; R_0 = R_6*R_0; R_0 = 1053.0+R_0; R_0 = R_6*R_0;
    R_0 = (-45.0)+R_0; R_0 = R_1*R_0; R_4 = (-13770.0)+R_4; R_4 = R_6*R_4;
    R_4 = 11556.0+R_4; R_4 = R_6*R_4; R_4 = -4144.5+R_4; R_4 = R_6*R_4;
    R_4 = 594.0+R_4; R_4 = R_6*R_4; R_4 = -22.5+R_4; R_4 = R_5*R_4;
    R_5 = (-11664.0/5.0)*R_6; R_1 = 6480.0+R_5; R_1 = R_6*R_1; R_1 = (-6696.0)+R_1;
    R_1 = R_6*R_1; R_1 = 3132.0+R_1; R_1 = R_6*R_1; R_1 = (-3132.0/5.0)+R_1;
    R_1 = R_6*R_1; R_1 = 36.0+R_1; R_1 = R_2*R_1; R_1 = R_7+R_1;
    R_0 = R_1+R_0; R_0 = R_3+R_0; R_0 = R_4+R_0; R_5 = 5184.0+R_5;
    R_5 = R_6*R_5; R_5 = (-4104.0)+R_5; R_5 = R_6*R_5; R_5 = 1404.0+R_5;
    R_5 = R_6*R_5; R_5 = (-972.0/5.0)+R_5; R_5 = R_6*R_5; R_5 = (36.0/5.0)+R_5;
    R_6 = pos_nodes[5][0]; R_5 = R_6*R_5; R_0 = R_5+R_0; R_8 = R_0+R_8;
    res(0,0) = R_8; 
    return res
#
def jac( var_inter, pos_nodes )
    R_0 := pos_nodes[6][0]; R_1 := pos_nodes[2][0]; R_2 := pos_nodes[1][0]; R_3 := pos_nodes[0][0];
    R_4 := pos_nodes[3][0]; R_5 := pos_nodes[4][0]; R_6 := var_inter[0]; R_7 := (1944.0/5.0)*R_6;
    R_8 := (-810.0)+R_7; R_8 = R_6*R_8; R_8 = 612.0+R_8; R_8 = R_6*R_8;
    R_8 = -202.5+R_8; R_8 = R_6*R_8; R_8 = (137.0/5.0)+R_8; R_8 = R_6*R_8;
    R_8 = (-1.0)+R_8; R_8 = R_0*R_8; R_7 = (-1134.0)+R_7; R_7 = R_6*R_7;
    R_7 = 1260.0+R_7; R_7 = R_6*R_7; R_7 = -661.5+R_7; R_7 = R_6*R_7;
    R_7 = (812.0/5.0)+R_7; R_7 = R_6*R_7; R_7 = (-147.0/10.0)+R_7; R_7 = R_3*R_7;
    R_3 = (-7776.0)*R_6; R_3 = 19440.0+R_3; R_3 = R_6*R_3; R_3 = (-17424.0)+R_3;
    R_3 = R_6*R_3; R_3 = 6696.0+R_3; R_3 = R_6*R_3; R_3 = (-1016.0)+R_3;
    R_3 = R_6*R_3; R_3 = 40.0+R_3; R_3 = R_4*R_3; R_4 = 5832.0*R_6;
    R_0 = (-15390.0)+R_4; R_0 = R_6*R_0; R_0 = 14796.0+R_0; R_0 = R_6*R_0;
    R_0 = -6223.5+R_0; R_0 = R_6*R_0; R_0 = 1053.0+R_0; R_0 = R_6*R_0;
    R_0 = (-45.0)+R_0; R_0 = R_1*R_0; R_4 = (-13770.0)+R_4; R_4 = R_6*R_4;
    R_4 = 11556.0+R_4; R_4 = R_6*R_4; R_4 = -4144.5+R_4; R_4 = R_6*R_4;
    R_4 = 594.0+R_4; R_4 = R_6*R_4; R_4 = -22.5+R_4; R_4 = R_5*R_4;
    R_5 = (-11664.0/5.0)*R_6; R_1 = 6480.0+R_5; R_1 = R_6*R_1; R_1 = (-6696.0)+R_1;
    R_1 = R_6*R_1; R_1 = 3132.0+R_1; R_1 = R_6*R_1; R_1 = (-3132.0/5.0)+R_1;
    R_1 = R_6*R_1; R_1 = 36.0+R_1; R_1 = R_2*R_1; R_1 = R_7+R_1;
    R_0 = R_1+R_0; R_0 = R_3+R_0; R_0 = R_4+R_0; R_5 = 5184.0+R_5;
    R_5 = R_6*R_5; R_5 = (-4104.0)+R_5; R_5 = R_6*R_5; R_5 = 1404.0+R_5;
    R_5 = R_6*R_5; R_5 = (-972.0/5.0)+R_5; R_5 = R_6*R_5; R_5 = (36.0/5.0)+R_5;
    R_6 = pos_nodes[5][0]; R_5 = R_6*R_5; R_0 = R_5+R_0; R_8 = R_0+R_8;
    res := R_8; 
    return res
#
def inv_jac_mat( var_inter, pos_nodes )
    res := Mat[ type_promote(var_inter[0],pos_nodes[0][0],mul), Gen[ 1, 1 ] ]()
    R_0 := pos_nodes[6][0]; R_1 := pos_nodes[2][0]; R_2 := pos_nodes[1][0]; R_3 := pos_nodes[0][0];
    R_4 := pos_nodes[3][0]; R_5 := pos_nodes[4][0]; R_6 := var_inter[0]; R_7 := (1944.0/5.0)*R_6;
    R_8 := (-810.0)+R_7; R_8 = R_6*R_8; R_8 = 612.0+R_8; R_8 = R_6*R_8;
    R_8 = -202.5+R_8; R_8 = R_6*R_8; R_8 = (137.0/5.0)+R_8; R_8 = R_6*R_8;
    R_8 = (-1.0)+R_8; R_8 = R_0*R_8; R_7 = (-1134.0)+R_7; R_7 = R_6*R_7;
    R_7 = 1260.0+R_7; R_7 = R_6*R_7; R_7 = -661.5+R_7; R_7 = R_6*R_7;
    R_7 = (812.0/5.0)+R_7; R_7 = R_6*R_7; R_7 = (-147.0/10.0)+R_7; R_7 = R_3*R_7;
    R_3 = (-7776.0)*R_6; R_3 = 19440.0+R_3; R_3 = R_6*R_3; R_3 = (-17424.0)+R_3;
    R_3 = R_6*R_3; R_3 = 6696.0+R_3; R_3 = R_6*R_3; R_3 = (-1016.0)+R_3;
    R_3 = R_6*R_3; R_3 = 40.0+R_3; R_3 = R_4*R_3; R_4 = 5832.0*R_6;
    R_0 = (-15390.0)+R_4; R_0 = R_6*R_0; R_0 = 14796.0+R_0; R_0 = R_6*R_0;
    R_0 = -6223.5+R_0; R_0 = R_6*R_0; R_0 = 1053.0+R_0; R_0 = R_6*R_0;
    R_0 = (-45.0)+R_0; R_0 = R_1*R_0; R_4 = (-13770.0)+R_4; R_4 = R_6*R_4;
    R_4 = 11556.0+R_4; R_4 = R_6*R_4; R_4 = -4144.5+R_4; R_4 = R_6*R_4;
    R_4 = 594.0+R_4; R_4 = R_6*R_4; R_4 = -22.5+R_4; R_4 = R_5*R_4;
    R_5 = (-11664.0/5.0)*R_6; R_1 = 6480.0+R_5; R_1 = R_6*R_1; R_1 = (-6696.0)+R_1;
    R_1 = R_6*R_1; R_1 = 3132.0+R_1; R_1 = R_6*R_1; R_1 = (-3132.0/5.0)+R_1;
    R_1 = R_6*R_1; R_1 = 36.0+R_1; R_1 = R_2*R_1; R_1 = R_7+R_1;
    R_0 = R_1+R_0; R_0 = R_3+R_0; R_0 = R_4+R_0; R_5 = 5184.0+R_5;
    R_5 = R_6*R_5; R_5 = (-4104.0)+R_5; R_5 = R_6*R_5; R_5 = 1404.0+R_5;
    R_5 = R_6*R_5; R_5 = (-972.0/5.0)+R_5; R_5 = R_6*R_5; R_5 = (36.0/5.0)+R_5;
    R_6 = pos_nodes[5][0]; R_5 = R_6*R_5; R_0 = R_5+R_0; R_8 = R_0+R_8;
    R_8 = 1/R_8; res(0,0) = R_8; 
    return res
#
def measure( var_inter, pos_nodes )
    R_0 := pos_nodes[0][0]; R_0 = (-1.0)*R_0; R_1 := pos_nodes[6][0]; R_0 = R_1+R_0;
    res := R_0; 
    return res
