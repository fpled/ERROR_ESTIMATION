static const nvi := 2
static const nb_nodes := 4
static const nb_vertex_nodes := 4
static const center_of_var_inter := [ 1.0/2.0, 1.0/2.0 ]
#
def interpolation( var_inter, val, interpolation_base )
    if interpolation_base == "lagrange"
        return (1+(var_inter[1]-1)*var_inter[0]-var_inter[1])*val[0]+(1-var_inter[1])*var_inter[0]*val[1]+(1-var_inter[0])*var_inter[1]*val[2]+var_inter[0]*var_inter[1]*val[3]
    else if interpolation_base == "hierarchical"
        return (1+(var_inter[1]-1)*var_inter[0]-var_inter[1])*val[0]+(1-var_inter[1])*var_inter[0]*val[1]+(1-var_inter[0])*var_inter[1]*val[2]+var_inter[0]*var_inter[1]*val[3]

#
def generic_interpolation( var_inter, val, interpolation_base, deg ) when deg == 1
    if interpolation_base == "lagrange"
        return (1+(var_inter[1]-1)*var_inter[0]-var_inter[1])*val[0]+(1-var_inter[1])*var_inter[0]*val[1]+(1-var_inter[0])*var_inter[1]*val[2]+var_inter[0]*var_inter[1]*val[3]
    else if interpolation_base == "hierarchical"
        return (1+(var_inter[1]-1)*var_inter[0]-var_inter[1])*val[0]+(1-var_inter[1])*var_inter[0]*val[1]+(1-var_inter[0])*var_inter[1]*val[2]+var_inter[0]*var_inter[1]*val[3]

#
def interpolation_vertex( var_inter, val_vertex )
    return (1+(var_inter[1]-1)*var_inter[0]-var_inter[1])*val_vertex[0]+(1-var_inter[1])*var_inter[0]*val_vertex[1]+(1-var_inter[0])*var_inter[1]*val_vertex[2]+var_inter[0]*var_inter[1]*val_vertex[3]
#
def nb_children( sub_nvi ) when sub_nvi==0
    return 1
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==0
    return child_var_inter
def type_child( sub_nvi, num_child ) when sub_nvi==0
    return QuadGeneric[Int32]
def node_number_child( sub_nvi, num_child ) when sub_nvi==0
    return 0 .. 4
#
def nb_children( sub_nvi ) when sub_nvi==1
    return 4
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==0
    return [child_var_inter[0],0]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return BarGeneric[Int32]
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return [0,1]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==1
    return [1,child_var_inter[0]]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return BarGeneric[Int32]
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return [1,3]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==2
    return [1-child_var_inter[0],1]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==2
    return BarGeneric[Int32]
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==2
    return [3,2]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==3
    return [0,1-child_var_inter[0]]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==3
    return BarGeneric[Int32]
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==3
    return [2,0]
#
def nb_children( sub_nvi ) when sub_nvi==2
    return 4
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==2 and num_child==0
    return [0,0]
def type_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==0
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==0
    return [0]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==2 and num_child==1
    return [1,0]
def type_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==1
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==1
    return [1]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==2 and num_child==2
    return [1,1]
def type_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==2
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==2
    return [3]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==2 and num_child==3
    return [0,1]
def type_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==3
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==3
    return [2]
def normal( var_inter, pos_nodes )
    assert( 0, "normal is defined only for nb_dim == nvi + 1" )
#
def jac_mat( var_inter, pos_nodes )
    res := Mat[ type_promote(var_inter[0],pos_nodes[0][0],mul), Gen[ 2, 2 ] ]()
    R_0 := var_inter[0]; R_1 := (-1.0)*R_0; R_1 = 1.0+R_1; R_2 := (-1.0)+R_0;
    R_3 := pos_nodes[3][1]; R_4 := R_3*R_0; R_5 := pos_nodes[1][1]; R_6 := R_0*R_5;
    R_6 = (-1.0)*R_6; R_7 := pos_nodes[0][1]; R_8 := R_7*R_2; R_6 = R_8+R_6;
    R_8 = pos_nodes[2][1]; R_9 := R_1*R_8; R_9 = R_6+R_9; R_4 = R_9+R_4;
    res(1,1) = R_4; R_4 = pos_nodes[3][0]; R_9 = R_0*R_4; R_6 = pos_nodes[1][0];
    R_0 = R_6*R_0; R_0 = (-1.0)*R_0; R_10 := pos_nodes[0][0]; R_2 = R_10*R_2;
    R_0 = R_2+R_0; R_2 = pos_nodes[2][0]; R_1 = R_1*R_2; R_1 = R_0+R_1;
    R_9 = R_1+R_9; res(1,0) = R_9; R_9 = var_inter[1]; R_3 = R_3*R_9;
    R_8 = R_9*R_8; R_8 = (-1.0)*R_8; R_4 = R_9*R_4; R_1 = (-1.0)*R_9;
    R_1 = 1.0+R_1; R_5 = R_1*R_5; R_6 = R_1*R_6; R_1 = (-1.0)+R_9;
    R_7 = R_1*R_7; R_5 = R_7+R_5; R_5 = R_8+R_5; R_3 = R_5+R_3;
    res(0,1) = R_3; R_10 = R_1*R_10; R_6 = R_10+R_6; R_2 = R_9*R_2;
    R_2 = (-1.0)*R_2; R_6 = R_2+R_6; R_4 = R_6+R_4; res(0,0) = R_4;
    return res
#
def jac( var_inter, pos_nodes )
    R_0 := pos_nodes[2][1]; R_1 := (-1.0)*R_0; R_2 := pos_nodes[3][1]; R_1 = R_2+R_1;
    R_3 := pos_nodes[1][1]; R_4 := (-1.0)*R_3; R_4 = R_2+R_4; R_2 = pos_nodes[0][1];
    R_5 := var_inter[1]; R_1 = R_5*R_1; R_6 := (-1.0)*R_5; R_6 = 1.0+R_6;
    R_3 = R_6*R_3; R_7 := (-1.0)+R_5; R_8 := R_7*R_2; R_3 = R_8+R_3;
    R_1 = R_3+R_1; R_3 = pos_nodes[3][0]; R_8 = pos_nodes[1][0]; R_6 = R_6*R_8;
    R_8 = (-1.0)*R_8; R_8 = R_8+R_3; R_9 := pos_nodes[2][0]; R_10 := (-1.0)*R_9;
    R_3 = R_10+R_3; R_3 = R_5*R_3; R_5 = var_inter[0]; R_4 = R_5*R_4;
    R_8 = R_5*R_8; R_10 = (-1.0)*R_5; R_10 = 1.0+R_10; R_0 = R_10*R_0;
    R_9 = R_10*R_9; R_5 = (-1.0)+R_5; R_2 = R_2*R_5; R_0 = R_2+R_0;
    R_4 = R_0+R_4; R_0 = pos_nodes[0][0]; R_7 = R_7*R_0; R_6 = R_7+R_6;
    R_3 = R_6+R_3; R_4 = R_3*R_4; R_5 = R_0*R_5; R_9 = R_5+R_9;
    R_8 = R_9+R_8; R_1 = R_8*R_1; R_1 = (-1.0)*R_1; R_4 = R_1+R_4;
    res := R_4; 
    return res
#
def inv_jac_mat( var_inter, pos_nodes )
    res := Mat[ type_promote(var_inter[0],pos_nodes[0][0],mul), Gen[ 2, 2 ] ]()
    R_0 := var_inter[1]; R_1 := (-1.0)*R_0; R_1 = 1.0+R_1; R_2 := (-1.0)+R_0;
    R_3 := pos_nodes[3][0]; R_4 := pos_nodes[1][0]; R_5 := R_1*R_4; R_4 = (-1.0)*R_4;
    R_4 = R_4+R_3; R_6 := pos_nodes[2][0]; R_7 := (-1.0)*R_6; R_3 = R_7+R_3;
    R_3 = R_0*R_3; R_7 = pos_nodes[0][0]; R_8 := R_2*R_7; R_5 = R_8+R_5;
    R_3 = R_5+R_3; R_5 = pos_nodes[1][1]; R_1 = R_1*R_5; R_5 = (-1.0)*R_5;
    R_8 = pos_nodes[3][1]; R_5 = R_8+R_5; R_9 := pos_nodes[2][1]; R_10 := (-1.0)*R_9;
    R_10 = R_8+R_10; R_10 = R_0*R_10; R_0 = var_inter[0]; R_4 = R_0*R_4;
    R_5 = R_0*R_5; R_8 = (-1.0)*R_0; R_8 = 1.0+R_8; R_6 = R_8*R_6;
    R_9 = R_8*R_9; R_0 = (-1.0)+R_0; R_7 = R_7*R_0; R_6 = R_7+R_6;
    R_4 = R_6+R_4; R_6 = pos_nodes[0][1]; R_2 = R_2*R_6; R_1 = R_2+R_1;
    R_10 = R_1+R_10; R_1 = R_4*R_10; R_1 = (-1.0)*R_1; R_0 = R_6*R_0;
    R_9 = R_0+R_9; R_5 = R_9+R_5; R_9 = R_3*R_5; R_9 = R_1+R_9;
    R_9 = 1/R_9; R_3 = R_3*R_9; res(1,1) = R_3; R_4 = R_4*R_9;
    R_4 = (-1.0)*R_4; res(1,0) = R_4; R_10 = R_10*R_9; R_10 = (-1.0)*R_10;
    res(0,1) = R_10; R_9 = R_5*R_9; res(0,0) = R_9; 
    return res
#
def measure( var_inter, pos_nodes )
    R_0 := pos_nodes[3][0]; R_1 := pos_nodes[2][0]; R_1 = (-1.0)*R_1; R_2 := R_1+R_0;
    R_2 = (-1.0)*R_2; R_3 := pos_nodes[1][0]; R_3 = (-1.0)*R_3; R_0 = R_3+R_0;
    R_0 = (-1.0)*R_0; R_4 := pos_nodes[0][0]; R_0 = R_4+R_0; R_1 = R_0+R_1;
    R_3 = R_4+R_3; R_2 = R_3+R_2; R_3 = pos_nodes[2][1]; R_3 = (-1.0)*R_3;
    R_4 = pos_nodes[1][1]; R_4 = (-1.0)*R_4; R_0 = pos_nodes[3][1]; R_5 := R_0+R_3;
    R_5 = (-1.0)*R_5; R_0 = R_0+R_4; R_0 = (-1.0)*R_0; R_6 := pos_nodes[0][1];
    R_4 = R_6+R_4; R_5 = R_4+R_5; R_5 = R_1*R_5; R_5 = (-1.0)*R_5;
    R_0 = R_6+R_0; R_3 = R_0+R_3; R_2 = R_3*R_2; R_5 = R_2+R_5;
    R_5 = 0.25*R_5; res := R_5; 
    return res
