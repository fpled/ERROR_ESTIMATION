static const nvi := 1
static const nb_nodes := 4
static const nb_vertex_nodes := 2
static const center_of_var_inter := [ 1.0/2.0 ]
#
def interpolation( var_inter, val, interpolation_base )
    if interpolation_base == "lagrange"
        return (1+((9-9.0/2.0*var_inter[0])*var_inter[0]-11.0/2.0)*var_inter[0])*val[0]+var_inter[0]*(9+var_inter[0]*(27.0/2.0*var_inter[0]-45.0/2.0))*val[1]+val[2]*var_inter[0]*(var_inter[0]*(18-27.0/2.0*var_inter[0])-9.0/2.0)+val[3]*var_inter[0]*(1+9.0/2.0*var_inter[0]*(var_inter[0]-1))
    else if interpolation_base == "hierarchical"
        return val[2]*var_inter[0]*(var_inter[0]*(18-27.0/2.0*var_inter[0])-9.0/2.0)+val[0]*(1-var_inter[0])+var_inter[0]*(9+var_inter[0]*(27.0/2.0*var_inter[0]-45.0/2.0))*val[1]+val[3]*var_inter[0]

#
def generic_interpolation( var_inter, val, interpolation_base, deg ) when deg == 3
    if interpolation_base == "lagrange"
        return (1+((9-9.0/2.0*var_inter[0])*var_inter[0]-11.0/2.0)*var_inter[0])*val[0]+val[1]*var_inter[0]*(9+var_inter[0]*(27.0/2.0*var_inter[0]-45.0/2.0))+var_inter[0]*(var_inter[0]*(18-27.0/2.0*var_inter[0])-9.0/2.0)*val[2]+var_inter[0]*(1+9.0/2.0*var_inter[0]*(var_inter[0]-1))*val[3]
    else if interpolation_base == "hierarchical"
        return var_inter[0]*(var_inter[0]*(18-27.0/2.0*var_inter[0])-9.0/2.0)*val[2]+val[1]*var_inter[0]*(9+var_inter[0]*(27.0/2.0*var_inter[0]-45.0/2.0))+val[0]*(1-var_inter[0])+var_inter[0]*val[3]

#
def interpolation_vertex( var_inter, val_vertex )
    return val_vertex[0]*(1-var_inter[0])+var_inter[0]*val_vertex[1]
#
def nb_children( sub_nvi ) when sub_nvi==0
    return 1
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==0
    return child_var_inter
def type_child( sub_nvi, num_child ) when sub_nvi==0
    return BarGeneric[Int32]
def node_number_child( sub_nvi, num_child ) when sub_nvi==0
    return 0 .. 4
#
def nb_children( sub_nvi ) when sub_nvi==1
    return 2
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==0
    return [0]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return [0]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==1
    return [1]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return [3]
def normal( var_inter, pos_nodes )
    res := Vec[ type_promote(var_inter[0],pos_nodes[0][0],mul), 2 ]()
    R_0 := pos_nodes[3][0]; R_1 := pos_nodes[2][0]; R_2 := pos_nodes[0][0]; R_3 := pos_nodes[1][0];
    R_4 := pos_nodes[3][1]; R_5 := pos_nodes[2][1]; R_6 := pos_nodes[1][1]; R_7 := pos_nodes[0][1];
    R_8 := var_inter[0]; R_9 := 3.0*R_8; R_9 = (-2.0)+R_9; R_9 = R_9*R_8;
    R_9 = 4.5*R_9; R_9 = 1.0+R_9; R_0 = R_9*R_0; R_4 = R_9*R_4;
    R_9 = -40.5*R_8; R_9 = 36.0+R_9; R_9 = R_9*R_8; R_9 = -4.5+R_9;
    R_1 = R_9*R_1; R_5 = R_9*R_5; R_9 = 40.5*R_8; R_9 = (-45.0)+R_9;
    R_9 = R_9*R_8; R_9 = 9.0+R_9; R_3 = R_9*R_3; R_6 = R_9*R_6;
    R_9 = -13.5*R_8; R_9 = 18.0+R_9; R_9 = R_8*R_9; R_9 = -5.5+R_9;
    R_2 = R_9*R_2; R_2 = R_3+R_2; R_1 = R_2+R_1; R_0 = R_1+R_0;
    R_1 = pow(R_0,2); R_7 = R_9*R_7; R_6 = R_7+R_6; R_5 = R_6+R_5;
    R_4 = R_5+R_4; R_5 = pow(R_4,2); R_1 = R_5+R_1; R_1 = rsqrt(R_1);
    R_0 = R_0*R_1; R_0 = (-1.0)*R_0; res[1] = R_0; R_1 = R_4*R_1;
    res[0] = R_1; 
    return res
#
def jac_mat( var_inter, pos_nodes )
    res := Mat[ type_promote(var_inter[0],pos_nodes[0][0],mul), Gen[ 1, 2 ] ]()
    R_0 := pos_nodes[3][1]; R_1 := pos_nodes[2][1]; R_2 := pos_nodes[1][1]; R_3 := pos_nodes[0][1];
    R_4 := pos_nodes[3][0]; R_5 := pos_nodes[2][0]; R_6 := pos_nodes[0][0]; R_7 := pos_nodes[1][0];
    R_8 := var_inter[0]; R_9 := 3.0*R_8; R_9 = (-2.0)+R_9; R_9 = R_9*R_8;
    R_9 = 4.5*R_9; R_9 = 1.0+R_9; R_0 = R_9*R_0; R_4 = R_9*R_4;
    R_9 = -40.5*R_8; R_9 = 36.0+R_9; R_9 = R_9*R_8; R_9 = -4.5+R_9;
    R_1 = R_9*R_1; R_5 = R_9*R_5; R_9 = -13.5*R_8; R_9 = 18.0+R_9;
    R_9 = R_8*R_9; R_9 = -5.5+R_9; R_3 = R_9*R_3; R_6 = R_9*R_6;
    R_9 = 40.5*R_8; R_9 = (-45.0)+R_9; R_8 = R_9*R_8; R_8 = 9.0+R_8;
    R_2 = R_8*R_2; R_2 = R_3+R_2; R_1 = R_2+R_1; R_0 = R_1+R_0;
    res(0,1) = R_0; R_7 = R_8*R_7; R_6 = R_7+R_6; R_5 = R_6+R_5;
    R_4 = R_5+R_4; res(0,0) = R_4; 
    return res
#
def jac( var_inter, pos_nodes )
    R_0 := pos_nodes[3][0]; R_1 := pos_nodes[2][0]; R_2 := pos_nodes[0][0]; R_3 := pos_nodes[1][0];
    R_4 := pos_nodes[3][1]; R_5 := pos_nodes[2][1]; R_6 := pos_nodes[1][1]; R_7 := pos_nodes[0][1];
    R_8 := var_inter[0]; R_9 := 3.0*R_8; R_9 = (-2.0)+R_9; R_9 = R_9*R_8;
    R_9 = 4.5*R_9; R_9 = 1.0+R_9; R_0 = R_9*R_0; R_4 = R_9*R_4;
    R_9 = -40.5*R_8; R_9 = 36.0+R_9; R_9 = R_9*R_8; R_9 = -4.5+R_9;
    R_1 = R_9*R_1; R_5 = R_9*R_5; R_9 = 40.5*R_8; R_9 = (-45.0)+R_9;
    R_9 = R_9*R_8; R_9 = 9.0+R_9; R_3 = R_9*R_3; R_6 = R_9*R_6;
    R_9 = -13.5*R_8; R_9 = 18.0+R_9; R_9 = R_8*R_9; R_9 = -5.5+R_9;
    R_2 = R_9*R_2; R_2 = R_3+R_2; R_1 = R_2+R_1; R_0 = R_1+R_0;
    R_0 = pow(R_0,2); R_7 = R_9*R_7; R_6 = R_7+R_6; R_5 = R_6+R_5;
    R_4 = R_5+R_4; R_4 = pow(R_4,2); R_0 = R_4+R_0; R_0 = sqrt(R_0);
    res := R_0; 
    return res
#
def inv_jac_mat( var_inter, pos_nodes )
    assert( 0, "inv_jac_mat() available only when nb var inter == dim" )
#
def measure( var_inter, pos_nodes )
    R_0 := pos_nodes[3][0]; R_1 := (-1.0)*R_0; R_2 := pos_nodes[2][0]; R_3 := (-1.0)*R_2;
    R_4 := pos_nodes[1][0]; R_3 = R_4+R_3; R_5 := 40.5*R_3; R_6 := -3.375*R_3;
    R_3 = 3.375*R_3; R_2 = R_4+R_2; R_2 = R_2+R_1; R_4 = pos_nodes[0][0];
    R_1 = R_4+R_1; R_7 := -13.5*R_1; R_7 = R_5+R_7; R_5 = pow(R_7,2);
    R_8 := 0.125*R_1; R_8 = R_6+R_8; R_6 = R_8*R_7; R_8 = pow(R_8,2);
    R_1 = -0.125*R_1; R_1 = R_3+R_1; R_4 = (-1.0)*R_4; R_0 = R_0+R_4;
    R_0 = 0.125*R_0; R_3 = R_0+R_3; R_2 = R_4+R_2; R_7 = R_2*R_7;
    R_7 = (-1.0)*R_7; R_3 = R_3*R_2; R_1 = R_2*R_1; R_2 = pow(R_2,2);
    R_4 = (-1.0)*R_2; R_0 = pos_nodes[3][1]; R_9 := (-1.0)*R_0; R_10 := pos_nodes[0][1];
    R_9 = R_10+R_9; R_11 := -13.5*R_9; R_9 = 0.125*R_9; R_0 = R_10+R_0;
    R_10 = pos_nodes[1][1]; R_12 := (-1.0)*R_10; R_0 = R_12+R_0; R_12 = pos_nodes[2][1];
    R_12 = (-1.0)*R_12; R_10 = R_10+R_12; R_13 := 40.5*R_10; R_13 = R_11+R_13;
    R_11 = pow(R_13,2); R_5 = R_11+R_5; R_5 = 24.0*R_5; R_10 = -3.375*R_10;
    R_10 = R_9+R_10; R_9 = R_10*R_13; R_6 = R_9+R_6; R_9 = (-270.0)*R_6;
    R_11 = 2.0*R_6; R_14 := 24.0*R_6; R_6 = 4.0*R_6; R_15 := pow(R_10,2);
    R_8 = R_15+R_8; R_15 = sqrt(R_8); R_16 := rsqrt(R_8); R_8 = 1/R_8;
    R_0 = R_12+R_0; R_13 = R_0*R_13; R_7 = R_13+R_7; R_7 = 216.0*R_7;
    R_10 = R_10*R_0; R_3 = R_3+R_10; R_1 = R_10+R_1; R_10 = pow(R_1,2);
    R_10 = R_10*R_8; R_13 = (-1.0)*R_10; R_0 = pow(R_0,2); R_2 = R_0+R_2;
    R_13 = R_2+R_13; R_13 = -2733.75*R_13; R_9 = R_13+R_9; R_1 = R_9*R_1;
    R_1 = R_1*R_8; R_7 = R_1+R_7; R_7 = R_3*R_7; R_7 = 9.0*R_7;
    R_2 = 20.25*R_2; R_11 = R_2+R_11; R_0 = (-1.0)*R_0; R_4 = R_0+R_4;
    R_10 = R_4+R_10; R_4 = (-243.0)*R_10; R_14 = R_4+R_14; R_11 = R_14*R_11;
    R_7 = R_11+R_7; R_8 = R_7*R_8; R_8 = -0.5*R_8; R_5 = R_8+R_5;
    R_5 = R_16*R_5; R_5 = (1.0/3840.0)*R_5; R_10 = -40.5*R_10; R_6 = R_10+R_6;
    R_16 = R_6*R_16; R_16 = (1.0/48.0)*R_16; R_15 = R_16+R_15; R_5 = R_15+R_5;
    res := R_5; 
    return res
