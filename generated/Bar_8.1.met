static const nvi := 1
static const nb_nodes := 8
static const nb_vertex_nodes := 2
static const center_of_var_inter := [ 1.0/2.0 ]
#
def interpolation( var_inter, val, interpolation_base )
    if interpolation_base == "lagrange"
        return val[7]*var_inter[0]*(var_inter[0]*(49931.0/360.0+var_inter[0]*(var_inter[0]*(98441.0/36.0+var_inter[0]*(var_inter[0]*(1294139.0/360.0-823543.0/720.0*var_inter[0])-319333.0/72.0))-634207.0/720.0))-49.0/6.0)+val[4]*var_inter[0]*(245.0/3.0+var_inter[0]*(var_inter[0]*(133427.0/18.0+var_inter[0]*(var_inter[0]*(4151329.0/144.0+var_inter[0]*(823543.0/144.0*var_inter[0]-2941225.0/144.0))-2926819.0/144.0))-46501.0/36.0))+val[0]*(1+var_inter[0]*(var_inter[0]*(22981.0/180.0+var_inter[0]*(var_inter[0]*(16807.0/18.0+var_inter[0]*(var_inter[0]*(117649.0/180.0-117649.0/720.0*var_inter[0])-386561.0/360.0))-331681.0/720.0))-363.0/20.0))+val[1]*var_inter[0]*(1+var_inter[0]*(var_inter[0]*(9947.0/90.0+var_inter[0]*(var_inter[0]*(84035.0/144.0+var_inter[0]*(117649.0/720.0*var_inter[0]-117649.0/240.0))-16807.0/48.0))-343.0/20.0))+val[2]*var_inter[0]*(49+var_inter[0]*(var_inter[0]*(109417.0/45.0+var_inter[0]*(var_inter[0]*(991613.0/144.0+var_inter[0]*(823543.0/720.0*var_inter[0]-352947.0/80.0))-88837.0/16.0))-10927.0/20.0))+val[3]*var_inter[0]*(var_inter[0]*(43071.0/40.0+var_inter[0]*(var_inter[0]*(170471.0/12.0+var_inter[0]*(var_inter[0]*(1529437.0/120.0-823543.0/240.0*var_inter[0])-151263.0/8.0))-1347647.0/240.0))-147.0/2.0)+val[5]*var_inter[0]*(var_inter[0]*(2009.0/2.0+var_inter[0]*(var_inter[0]*(52822.0/3.0+var_inter[0]*(var_inter[0]*(117649.0/6.0-823543.0/144.0*var_inter[0])-1899191.0/72.0))-872935.0/144.0))-245.0/4.0)+val[6]*var_inter[0]*(147.0/5.0+var_inter[0]*(var_inter[0]*(45962.0/15.0+var_inter[0]*(var_inter[0]*(1159683.0/80.0+var_inter[0]*(823543.0/240.0*var_inter[0]-2705927.0/240.0))-444185.0/48.0))-9849.0/20.0))
    else if interpolation_base == "hierarchical"
        return val[7]*var_inter[0]*(var_inter[0]*(49931.0/360.0+var_inter[0]*(var_inter[0]*(98441.0/36.0+var_inter[0]*(var_inter[0]*(1294139.0/360.0-823543.0/720.0*var_inter[0])-319333.0/72.0))-634207.0/720.0))-49.0/6.0)+val[5]*var_inter[0]*(var_inter[0]*(2009.0/2.0+var_inter[0]*(var_inter[0]*(52822.0/3.0+var_inter[0]*(var_inter[0]*(117649.0/6.0-823543.0/144.0*var_inter[0])-1899191.0/72.0))-872935.0/144.0))-245.0/4.0)+val[4]*var_inter[0]*(245.0/3.0+var_inter[0]*(var_inter[0]*(133427.0/18.0+var_inter[0]*(var_inter[0]*(4151329.0/144.0+var_inter[0]*(823543.0/144.0*var_inter[0]-2941225.0/144.0))-2926819.0/144.0))-46501.0/36.0))+val[3]*var_inter[0]*(var_inter[0]*(43071.0/40.0+var_inter[0]*(var_inter[0]*(170471.0/12.0+var_inter[0]*(var_inter[0]*(1529437.0/120.0-823543.0/240.0*var_inter[0])-151263.0/8.0))-1347647.0/240.0))-147.0/2.0)+val[2]*var_inter[0]*(49+var_inter[0]*(var_inter[0]*(109417.0/45.0+var_inter[0]*(var_inter[0]*(991613.0/144.0+var_inter[0]*(823543.0/720.0*var_inter[0]-352947.0/80.0))-88837.0/16.0))-10927.0/20.0))+var_inter[0]*val[1]+val[0]*(1-var_inter[0])+val[6]*var_inter[0]*(147.0/5.0+var_inter[0]*(var_inter[0]*(45962.0/15.0+var_inter[0]*(var_inter[0]*(1159683.0/80.0+var_inter[0]*(823543.0/240.0*var_inter[0]-2705927.0/240.0))-444185.0/48.0))-9849.0/20.0))

#
def interpolation_deg( var_inter, val, interpolation_base, deg ) when deg == 7
    if interpolation_base == "lagrange"
        return val[1]*var_inter[0]*(49+var_inter[0]*(var_inter[0]*(109417.0/45.0+var_inter[0]*(var_inter[0]*(991613.0/144.0+var_inter[0]*(823543.0/720.0*var_inter[0]-352947.0/80.0))-88837.0/16.0))-10927.0/20.0))+(1+var_inter[0]*(var_inter[0]*(22981.0/180.0+var_inter[0]*(var_inter[0]*(16807.0/18.0+var_inter[0]*(var_inter[0]*(117649.0/180.0-117649.0/720.0*var_inter[0])-386561.0/360.0))-331681.0/720.0))-363.0/20.0))*val[0]+val[2]*var_inter[0]*(var_inter[0]*(43071.0/40.0+var_inter[0]*(var_inter[0]*(170471.0/12.0+var_inter[0]*(var_inter[0]*(1529437.0/120.0-823543.0/240.0*var_inter[0])-151263.0/8.0))-1347647.0/240.0))-147.0/2.0)+val[3]*var_inter[0]*(245.0/3.0+var_inter[0]*(var_inter[0]*(133427.0/18.0+var_inter[0]*(var_inter[0]*(4151329.0/144.0+var_inter[0]*(823543.0/144.0*var_inter[0]-2941225.0/144.0))-2926819.0/144.0))-46501.0/36.0))+val[4]*var_inter[0]*(var_inter[0]*(2009.0/2.0+var_inter[0]*(var_inter[0]*(52822.0/3.0+var_inter[0]*(var_inter[0]*(117649.0/6.0-823543.0/144.0*var_inter[0])-1899191.0/72.0))-872935.0/144.0))-245.0/4.0)+val[5]*var_inter[0]*(147.0/5.0+var_inter[0]*(var_inter[0]*(45962.0/15.0+var_inter[0]*(var_inter[0]*(1159683.0/80.0+var_inter[0]*(823543.0/240.0*var_inter[0]-2705927.0/240.0))-444185.0/48.0))-9849.0/20.0))+val[6]*var_inter[0]*(var_inter[0]*(49931.0/360.0+var_inter[0]*(var_inter[0]*(98441.0/36.0+var_inter[0]*(var_inter[0]*(1294139.0/360.0-823543.0/720.0*var_inter[0])-319333.0/72.0))-634207.0/720.0))-49.0/6.0)+var_inter[0]*(1+var_inter[0]*(var_inter[0]*(9947.0/90.0+var_inter[0]*(var_inter[0]*(84035.0/144.0+var_inter[0]*(117649.0/720.0*var_inter[0]-117649.0/240.0))-16807.0/48.0))-343.0/20.0))*val[7]
    else if interpolation_base == "hierarchical"
        return val[6]*var_inter[0]*(var_inter[0]*(49931.0/360.0+var_inter[0]*(var_inter[0]*(98441.0/36.0+var_inter[0]*(var_inter[0]*(1294139.0/360.0-823543.0/720.0*var_inter[0])-319333.0/72.0))-634207.0/720.0))-49.0/6.0)+val[5]*var_inter[0]*(147.0/5.0+var_inter[0]*(var_inter[0]*(45962.0/15.0+var_inter[0]*(var_inter[0]*(1159683.0/80.0+var_inter[0]*(823543.0/240.0*var_inter[0]-2705927.0/240.0))-444185.0/48.0))-9849.0/20.0))+val[4]*var_inter[0]*(var_inter[0]*(2009.0/2.0+var_inter[0]*(var_inter[0]*(52822.0/3.0+var_inter[0]*(var_inter[0]*(117649.0/6.0-823543.0/144.0*var_inter[0])-1899191.0/72.0))-872935.0/144.0))-245.0/4.0)+val[3]*var_inter[0]*(245.0/3.0+var_inter[0]*(var_inter[0]*(133427.0/18.0+var_inter[0]*(var_inter[0]*(4151329.0/144.0+var_inter[0]*(823543.0/144.0*var_inter[0]-2941225.0/144.0))-2926819.0/144.0))-46501.0/36.0))+val[2]*var_inter[0]*(var_inter[0]*(43071.0/40.0+var_inter[0]*(var_inter[0]*(170471.0/12.0+var_inter[0]*(var_inter[0]*(1529437.0/120.0-823543.0/240.0*var_inter[0])-151263.0/8.0))-1347647.0/240.0))-147.0/2.0)+val[1]*var_inter[0]*(49+var_inter[0]*(var_inter[0]*(109417.0/45.0+var_inter[0]*(var_inter[0]*(991613.0/144.0+var_inter[0]*(823543.0/720.0*var_inter[0]-352947.0/80.0))-88837.0/16.0))-10927.0/20.0))+(1-var_inter[0])*val[0]+var_inter[0]*val[7]

#
def interpolation_deg( var_inter, val, interpolation_base, deg ) when deg == 8
    if interpolation_base == "lagrange"
        return val[4]*var_inter[0]*(var_inter[0]*(2764+var_inter[0]*(var_inter[0]*(703552.0/9.0+var_inter[0]*(var_inter[0]*(1712128.0/9.0+var_inter[0]*(262144.0/9.0*var_inter[0]-1048576.0/9.0))-1466368.0/9.0))-186496.0/9.0))-140)+val[2]*var_inter[0]*(var_inter[0]*(9936.0/5.0+var_inter[0]*(var_inter[0]*(1956992.0/45.0+var_inter[0]*(var_inter[0]*(3915776.0/45.0+var_inter[0]*(524288.0/45.0*var_inter[0]-2228224.0/45.0))-733184.0/9.0))-587296.0/45.0))-112)+val[1]*var_inter[0]*(64+var_inter[0]*(var_inter[0]*(44672.0/9.0+var_inter[0]*(var_inter[0]*(235520.0/9.0+var_inter[0]*(var_inter[0]*(131072.0/9.0-1048576.0/315.0*var_inter[0])-1196032.0/45.0))-673792.0/45.0))-30784.0/35.0))+val[0]*(1+var_inter[0]*(var_inter[0]*(59062.0/315.0+var_inter[0]*(var_inter[0]*(34208.0/15.0+var_inter[0]*(var_inter[0]*(53248.0/15.0+var_inter[0]*(131072.0/315.0*var_inter[0]-65536.0/35.0))-18432.0/5.0))-4272.0/5.0))-761.0/35.0))+val[3]*var_inter[0]*(448.0/3.0+var_inter[0]*(var_inter[0]*(102016.0/5.0+var_inter[0]*(var_inter[0]*(145408+var_inter[0]*(var_inter[0]*(1441792.0/15.0-1048576.0/45.0*var_inter[0])-2441216.0/15.0))-1097728.0/15.0))-128192.0/45.0))+val[5]*var_inter[0]*(448.0/5.0+var_inter[0]*(var_inter[0]*(626048.0/45.0+var_inter[0]*(var_inter[0]*(5285888.0/45.0+var_inter[0]*(var_inter[0]*(4063232.0/45.0-1048576.0/45.0*var_inter[0])-6406144.0/45.0))-2443264.0/45.0))-9024.0/5.0))+val[6]*var_inter[0]*(var_inter[0]*(34288.0/45.0+var_inter[0]*(var_inter[0]*(358784.0/15.0+var_inter[0]*(var_inter[0]*(999424.0/15.0+var_inter[0]*(524288.0/45.0*var_inter[0]-131072.0/3.0))-53248))-5984))-112.0/3.0)+val[7]*var_inter[0]*(64.0/7.0+var_inter[0]*(var_inter[0]*(67456.0/45.0+var_inter[0]*(var_inter[0]*(124928.0/9.0+var_inter[0]*(var_inter[0]*(3801088.0/315.0-1048576.0/315.0*var_inter[0])-802816.0/45.0))-274432.0/45.0))-6592.0/35.0))+var_inter[0]*(var_inter[0]*(726.0/35.0+var_inter[0]*(var_inter[0]*(30944.0/45.0+var_inter[0]*(var_inter[0]*(94208.0/45.0+var_inter[0]*(131072.0/315.0*var_inter[0]-65536.0/45.0))-14336.0/9.0))-7504.0/45.0))-1)*val[8]
    else if interpolation_base == "hierarchical"
        return val[5]*var_inter[0]*(448.0/5.0+var_inter[0]*(var_inter[0]*(626048.0/45.0+var_inter[0]*(var_inter[0]*(5285888.0/45.0+var_inter[0]*(var_inter[0]*(4063232.0/45.0-1048576.0/45.0*var_inter[0])-6406144.0/45.0))-2443264.0/45.0))-9024.0/5.0))+val[1]*var_inter[0]*(64+var_inter[0]*(var_inter[0]*(44672.0/9.0+var_inter[0]*(var_inter[0]*(235520.0/9.0+var_inter[0]*(var_inter[0]*(131072.0/9.0-1048576.0/315.0*var_inter[0])-1196032.0/45.0))-673792.0/45.0))-30784.0/35.0))+(1-var_inter[0])*val[0]+val[2]*var_inter[0]*(var_inter[0]*(9936.0/5.0+var_inter[0]*(var_inter[0]*(1956992.0/45.0+var_inter[0]*(var_inter[0]*(3915776.0/45.0+var_inter[0]*(524288.0/45.0*var_inter[0]-2228224.0/45.0))-733184.0/9.0))-587296.0/45.0))-112)+val[3]*var_inter[0]*(448.0/3.0+var_inter[0]*(var_inter[0]*(102016.0/5.0+var_inter[0]*(var_inter[0]*(145408+var_inter[0]*(var_inter[0]*(1441792.0/15.0-1048576.0/45.0*var_inter[0])-2441216.0/15.0))-1097728.0/15.0))-128192.0/45.0))+val[4]*var_inter[0]*(var_inter[0]*(2764+var_inter[0]*(var_inter[0]*(703552.0/9.0+var_inter[0]*(var_inter[0]*(1712128.0/9.0+var_inter[0]*(262144.0/9.0*var_inter[0]-1048576.0/9.0))-1466368.0/9.0))-186496.0/9.0))-140)+val[6]*var_inter[0]*(var_inter[0]*(34288.0/45.0+var_inter[0]*(var_inter[0]*(358784.0/15.0+var_inter[0]*(var_inter[0]*(999424.0/15.0+var_inter[0]*(524288.0/45.0*var_inter[0]-131072.0/3.0))-53248))-5984))-112.0/3.0)+val[7]*var_inter[0]*(64.0/7.0+var_inter[0]*(var_inter[0]*(67456.0/45.0+var_inter[0]*(var_inter[0]*(124928.0/9.0+var_inter[0]*(var_inter[0]*(3801088.0/315.0-1048576.0/315.0*var_inter[0])-802816.0/45.0))-274432.0/45.0))-6592.0/35.0))+var_inter[0]*val[8]

#
def interpolation_deg( var_inter, val, interpolation_base, deg ) when deg == 9
    if interpolation_base == "lagrange"
        return val[4]*var_inter[0]*(var_inter[0]*(526419.0/80.0+var_inter[0]*(var_inter[0]*(89119521.0/320.0+var_inter[0]*(var_inter[0]*(195629337.0/160.0+var_inter[0]*(var_inter[0]*(196101729.0/320.0-43046721.0/320.0*var_inter[0])-187598673.0/160.0))-241241409.0/320.0))-4752351.0/80.0))-567.0/2.0)+var_inter[0]*(81+var_inter[0]*(var_inter[0]*(10307331.0/1120.0+var_inter[0]*(var_inter[0]*(51221727.0/640.0+var_inter[0]*(var_inter[0]*(31355019.0/320.0+var_inter[0]*(43046721.0/4480.0*var_inter[0]-52612659.0/1120.0))-4546773.0/40.0))-5589243.0/160.0))-373329.0/280.0))*val[1]+(1+var_inter[0]*(var_inter[0]*(58635.0/224.0+var_inter[0]*(var_inter[0]*(623295.0/128.0+var_inter[0]*(var_inter[0]*(885735.0/64.0+var_inter[0]*(var_inter[0]*(4782969.0/896.0-4782969.0/4480.0*var_inter[0])-5137263.0/448.0))-6589431.0/640.0))-40707.0/28.0))-7129.0/280.0))*val[0]+var_inter[0]*(var_inter[0]*(475389.0/140.0+var_inter[0]*(var_inter[0]*(18152829.0/160.0+var_inter[0]*(var_inter[0]*(33244587.0/80.0+var_inter[0]*(var_inter[0]*(205667667.0/1120.0-43046721.0/1120.0*var_inter[0])-3720087.0/10.0))-44529507.0/160.0))-15190173.0/560.0))-162)*val[2]+var_inter[0]*(252+var_inter[0]*(var_inter[0]*(1959363.0/40.0+var_inter[0]*(var_inter[0]*(91020753.0/160.0+var_inter[0]*(var_inter[0]*(16474671.0/20.0+var_inter[0]*(14348907.0/160.0*var_inter[0]-33480783.0/80.0))-71035947.0/80.0))-8776431.0/40.0))-56601.0/10.0))*val[3]+val[5]*var_inter[0]*(1134.0/5.0+var_inter[0]*(var_inter[0]*(795339.0/16.0+var_inter[0]*(var_inter[0]*(215023653.0/320.0+var_inter[0]*(var_inter[0]*(35606547.0/32.0+var_inter[0]*(43046721.0/320.0*var_inter[0]-4782969.0/8.0))-18009945.0/16.0))-3844017.0/16.0))-21465.0/4.0))+val[6]*var_inter[0]*(var_inter[0]*(60381.0/20.0+var_inter[0]*(var_inter[0]*(22480173.0/160.0+var_inter[0]*(var_inter[0]*(55447011.0/80.0+var_inter[0]*(var_inter[0]*(62178597.0/160.0-14348907.0/160.0*var_inter[0])-28166373.0/40.0))-64448703.0/160.0))-2276289.0/80.0))-126)+val[7]*var_inter[0]*(324.0/7.0+var_inter[0]*(var_inter[0]*(2989629.0/280.0+var_inter[0]*(var_inter[0]*(25043337.0/160.0+var_inter[0]*(var_inter[0]*(80247591.0/280.0+var_inter[0]*(43046721.0/1120.0*var_inter[0]-90876411.0/560.0))-22025277.0/80.0))-2142531.0/40.0))-78327.0/70.0))+val[8]*var_inter[0]*(var_inter[0]*(275967.0/1120.0+var_inter[0]*(var_inter[0]*(7712091.0/640.0+var_inter[0]*(var_inter[0]*(20490003.0/320.0+var_inter[0]*(var_inter[0]*(176969853.0/4480.0-43046721.0/4480.0*var_inter[0])-21789081.0/320.0))-22878207.0/640.0))-1328967.0/560.0))-81.0/8.0)+val[9]*var_inter[0]*(1+var_inter[0]*(var_inter[0]*(265779.0/1120.0+var_inter[0]*(var_inter[0]*(2337903.0/640.0+var_inter[0]*(var_inter[0]*(2302911.0/320.0+var_inter[0]*(4782969.0/4480.0*var_inter[0]-4782969.0/1120.0))-531441.0/80.0))-194643.0/160.0))-6849.0/280.0))
    else if interpolation_base == "hierarchical"
        return val[7]*var_inter[0]*(324.0/7.0+var_inter[0]*(var_inter[0]*(2989629.0/280.0+var_inter[0]*(var_inter[0]*(25043337.0/160.0+var_inter[0]*(var_inter[0]*(80247591.0/280.0+var_inter[0]*(43046721.0/1120.0*var_inter[0]-90876411.0/560.0))-22025277.0/80.0))-2142531.0/40.0))-78327.0/70.0))+val[6]*var_inter[0]*(var_inter[0]*(60381.0/20.0+var_inter[0]*(var_inter[0]*(22480173.0/160.0+var_inter[0]*(var_inter[0]*(55447011.0/80.0+var_inter[0]*(var_inter[0]*(62178597.0/160.0-14348907.0/160.0*var_inter[0])-28166373.0/40.0))-64448703.0/160.0))-2276289.0/80.0))-126)+val[5]*var_inter[0]*(1134.0/5.0+var_inter[0]*(var_inter[0]*(795339.0/16.0+var_inter[0]*(var_inter[0]*(215023653.0/320.0+var_inter[0]*(var_inter[0]*(35606547.0/32.0+var_inter[0]*(43046721.0/320.0*var_inter[0]-4782969.0/8.0))-18009945.0/16.0))-3844017.0/16.0))-21465.0/4.0))+val[4]*var_inter[0]*(var_inter[0]*(526419.0/80.0+var_inter[0]*(var_inter[0]*(89119521.0/320.0+var_inter[0]*(var_inter[0]*(195629337.0/160.0+var_inter[0]*(var_inter[0]*(196101729.0/320.0-43046721.0/320.0*var_inter[0])-187598673.0/160.0))-241241409.0/320.0))-4752351.0/80.0))-567.0/2.0)+(1-var_inter[0])*val[0]+var_inter[0]*(81+var_inter[0]*(var_inter[0]*(10307331.0/1120.0+var_inter[0]*(var_inter[0]*(51221727.0/640.0+var_inter[0]*(var_inter[0]*(31355019.0/320.0+var_inter[0]*(43046721.0/4480.0*var_inter[0]-52612659.0/1120.0))-4546773.0/40.0))-5589243.0/160.0))-373329.0/280.0))*val[1]+var_inter[0]*(var_inter[0]*(475389.0/140.0+var_inter[0]*(var_inter[0]*(18152829.0/160.0+var_inter[0]*(var_inter[0]*(33244587.0/80.0+var_inter[0]*(var_inter[0]*(205667667.0/1120.0-43046721.0/1120.0*var_inter[0])-3720087.0/10.0))-44529507.0/160.0))-15190173.0/560.0))-162)*val[2]+var_inter[0]*(252+var_inter[0]*(var_inter[0]*(1959363.0/40.0+var_inter[0]*(var_inter[0]*(91020753.0/160.0+var_inter[0]*(var_inter[0]*(16474671.0/20.0+var_inter[0]*(14348907.0/160.0*var_inter[0]-33480783.0/80.0))-71035947.0/80.0))-8776431.0/40.0))-56601.0/10.0))*val[3]+val[8]*var_inter[0]*(var_inter[0]*(275967.0/1120.0+var_inter[0]*(var_inter[0]*(7712091.0/640.0+var_inter[0]*(var_inter[0]*(20490003.0/320.0+var_inter[0]*(var_inter[0]*(176969853.0/4480.0-43046721.0/4480.0*var_inter[0])-21789081.0/320.0))-22878207.0/640.0))-1328967.0/560.0))-81.0/8.0)+var_inter[0]*val[9]

#
def interpolation_deg( var_inter, val, interpolation_base, deg ) when deg == 10
    if interpolation_base == "lagrange"
        return var_inter[0]*(100.0/9.0+var_inter[0]*(var_inter[0]*(4033825.0/1134.0+var_inter[0]*(var_inter[0]*(4341875.0/54.0+var_inter[0]*(var_inter[0]*(7437500.0/27.0+var_inter[0]*(var_inter[0]*(71875000.0/567.0-15625000.0/567.0*var_inter[0])-47187500.0/189.0))-10090625.0/54.0))-24717625.0/1134.0))-6575.0/21.0))*val[9]+val[8]*var_inter[0]*(var_inter[0]*(88325.0/56.0+var_inter[0]*(var_inter[0]*(54486625.0/504.0+var_inter[0]*(var_inter[0]*(32584375.0/36.0+var_inter[0]*(var_inter[0]*(73750000.0/63.0+var_inter[0]*(7812500.0/63.0*var_inter[0]-36718750.0/63.0))-11828125.0/9.0))-28405625.0/72.0))-996675.0/56.0))-225.0/4.0)+val[4]*var_inter[0]*(var_inter[0]*(168775.0/12.0+var_inter[0]*(var_inter[0]*(91073375.0/108.0+var_inter[0]*(var_inter[0]*(107321875.0/18.0+var_inter[0]*(var_inter[0]*(19375000.0/3.0+var_inter[0]*(15625000.0/27.0*var_inter[0]-26562500.0/9.0))-71281250.0/9.0))-102070625.0/36.0))-1792225.0/12.0))-525)+(1+var_inter[0]*(var_inter[0]*(177133.0/504.0+var_inter[0]*(var_inter[0]*(42711625.0/4536.0+var_inter[0]*(var_inter[0]*(4695625.0/108.0+var_inter[0]*(var_inter[0]*(6875000.0/189.0+var_inter[0]*(1562500.0/567.0*var_inter[0]-8593750.0/567.0))-9453125.0/189.0))-5369375.0/216.0))-10511875.0/4536.0))-7381.0/252.0))*val[0]+val[1]*var_inter[0]*(100+var_inter[0]*(var_inter[0]*(1997825.0/126.0+var_inter[0]*(var_inter[0]*(3775625.0/18.0+var_inter[0]*(var_inter[0]*(4187500.0/9.0+var_inter[0]*(var_inter[0]*(3125000.0/21.0-15625000.0/567.0*var_inter[0])-65937500.0/189.0))-20965625.0/54.0))-82992625.0/1134.0))-121525.0/63.0))+val[2]*var_inter[0]*(var_inter[0]*(153025.0/28.0+var_inter[0]*(var_inter[0]*(33095875.0/126.0+var_inter[0]*(var_inter[0]*(56396875.0/36.0+var_inter[0]*(var_inter[0]*(94843750.0/63.0+var_inter[0]*(7812500.0/63.0*var_inter[0]-41406250.0/63.0))-17546875.0/9.0))-57981875.0/72.0))-2898075.0/56.0))-225)+val[3]*var_inter[0]*(400+var_inter[0]*(var_inter[0]*(20028950.0/189.0+var_inter[0]*(var_inter[0]*(16686250.0/9.0+var_inter[0]*(var_inter[0]*(43625000.0/9.0+var_inter[0]*(var_inter[0]*(325000000.0/189.0-62500000.0/189.0*var_inter[0])-242500000.0/63.0))-33868750.0/9.0))-108434750.0/189.0))-654100.0/63.0))+var_inter[0]*(504+var_inter[0]*(var_inter[0]*(149625+var_inter[0]*(var_inter[0]*(27074375.0/9.0+var_inter[0]*(var_inter[0]*(80000000.0/9.0+var_inter[0]*(var_inter[0]*(31250000.0/9.0-6250000.0/9.0*var_inter[0])-66875000.0/9.0))-58608125.0/9.0))-7818625.0/9.0))-13754))*val[5]+var_inter[0]*(var_inter[0]*(174025.0/18.0+var_inter[0]*(var_inter[0]*(34178875.0/54.0+var_inter[0]*(var_inter[0]*(89384375.0/18.0+var_inter[0]*(var_inter[0]*(5937500+var_inter[0]*(15625000.0/27.0*var_inter[0]-76562500.0/27.0))-62468750.0/9.0))-80666875.0/36.0))-11544725.0/108.0))-350)*val[6]+val[7]*var_inter[0]*(1200.0/7.0+var_inter[0]*(var_inter[0]*(1121950.0/21.0+var_inter[0]*(var_inter[0]*(10401250.0/9.0+var_inter[0]*(var_inter[0]*(234625000.0/63.0+var_inter[0]*(var_inter[0]*(100000000.0/63.0-62500000.0/189.0*var_inter[0])-205000000.0/63.0))-7831250.0/3.0))-60659750.0/189.0))-100300.0/21.0))+var_inter[0]*(var_inter[0]*(7129.0/252.0+var_inter[0]*(var_inter[0]*(1130750.0/567.0+var_inter[0]*(var_inter[0]*(1883125.0/108.0+var_inter[0]*(var_inter[0]*(4531250.0/189.0+var_inter[0]*(1562500.0/567.0*var_inter[0]-781250.0/63.0))-78125.0/3.0))-59375.0/8.0))-162875.0/504.0))-1)*val[10]
    else if interpolation_base == "hierarchical"
        return val[8]*var_inter[0]*(var_inter[0]*(88325.0/56.0+var_inter[0]*(var_inter[0]*(54486625.0/504.0+var_inter[0]*(var_inter[0]*(32584375.0/36.0+var_inter[0]*(var_inter[0]*(73750000.0/63.0+var_inter[0]*(7812500.0/63.0*var_inter[0]-36718750.0/63.0))-11828125.0/9.0))-28405625.0/72.0))-996675.0/56.0))-225.0/4.0)+val[7]*var_inter[0]*(1200.0/7.0+var_inter[0]*(var_inter[0]*(1121950.0/21.0+var_inter[0]*(var_inter[0]*(10401250.0/9.0+var_inter[0]*(var_inter[0]*(234625000.0/63.0+var_inter[0]*(var_inter[0]*(100000000.0/63.0-62500000.0/189.0*var_inter[0])-205000000.0/63.0))-7831250.0/3.0))-60659750.0/189.0))-100300.0/21.0))+var_inter[0]*(var_inter[0]*(174025.0/18.0+var_inter[0]*(var_inter[0]*(34178875.0/54.0+var_inter[0]*(var_inter[0]*(89384375.0/18.0+var_inter[0]*(var_inter[0]*(5937500+var_inter[0]*(15625000.0/27.0*var_inter[0]-76562500.0/27.0))-62468750.0/9.0))-80666875.0/36.0))-11544725.0/108.0))-350)*val[6]+var_inter[0]*(504+var_inter[0]*(var_inter[0]*(149625+var_inter[0]*(var_inter[0]*(27074375.0/9.0+var_inter[0]*(var_inter[0]*(80000000.0/9.0+var_inter[0]*(var_inter[0]*(31250000.0/9.0-6250000.0/9.0*var_inter[0])-66875000.0/9.0))-58608125.0/9.0))-7818625.0/9.0))-13754))*val[5]+val[3]*var_inter[0]*(400+var_inter[0]*(var_inter[0]*(20028950.0/189.0+var_inter[0]*(var_inter[0]*(16686250.0/9.0+var_inter[0]*(var_inter[0]*(43625000.0/9.0+var_inter[0]*(var_inter[0]*(325000000.0/189.0-62500000.0/189.0*var_inter[0])-242500000.0/63.0))-33868750.0/9.0))-108434750.0/189.0))-654100.0/63.0))+(1-var_inter[0])*val[0]+val[1]*var_inter[0]*(100+var_inter[0]*(var_inter[0]*(1997825.0/126.0+var_inter[0]*(var_inter[0]*(3775625.0/18.0+var_inter[0]*(var_inter[0]*(4187500.0/9.0+var_inter[0]*(var_inter[0]*(3125000.0/21.0-15625000.0/567.0*var_inter[0])-65937500.0/189.0))-20965625.0/54.0))-82992625.0/1134.0))-121525.0/63.0))+val[2]*var_inter[0]*(var_inter[0]*(153025.0/28.0+var_inter[0]*(var_inter[0]*(33095875.0/126.0+var_inter[0]*(var_inter[0]*(56396875.0/36.0+var_inter[0]*(var_inter[0]*(94843750.0/63.0+var_inter[0]*(7812500.0/63.0*var_inter[0]-41406250.0/63.0))-17546875.0/9.0))-57981875.0/72.0))-2898075.0/56.0))-225)+val[4]*var_inter[0]*(var_inter[0]*(168775.0/12.0+var_inter[0]*(var_inter[0]*(91073375.0/108.0+var_inter[0]*(var_inter[0]*(107321875.0/18.0+var_inter[0]*(var_inter[0]*(19375000.0/3.0+var_inter[0]*(15625000.0/27.0*var_inter[0]-26562500.0/9.0))-71281250.0/9.0))-102070625.0/36.0))-1792225.0/12.0))-525)+var_inter[0]*(100.0/9.0+var_inter[0]*(var_inter[0]*(4033825.0/1134.0+var_inter[0]*(var_inter[0]*(4341875.0/54.0+var_inter[0]*(var_inter[0]*(7437500.0/27.0+var_inter[0]*(var_inter[0]*(71875000.0/567.0-15625000.0/567.0*var_inter[0])-47187500.0/189.0))-10090625.0/54.0))-24717625.0/1134.0))-6575.0/21.0))*val[9]+var_inter[0]*val[10]

#
def interpolation_vertex( var_inter, val_vertex )
    return val_vertex[0]*(1-var_inter[0])+var_inter[0]*val_vertex[1]
#
def nb_children( sub_nvi ) when sub_nvi==0
    return 1
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==0
    return child_var_inter
def type_child( sub_nvi, num_child ) when sub_nvi==0
    return Bar_8
def node_number_child( sub_nvi, num_child ) when sub_nvi==0
    return 0 .. 8
#
def nb_children( sub_nvi ) when sub_nvi==1
    return 2
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==0
    return [0]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return [0]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==1
    return [1]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return [1]
def normal( var_inter, pos_nodes )
    assert( 0, "normal is defined only for nb_dim == nvi + 1" )
#
def jac_mat( var_inter, pos_nodes )
    res := Mat[ type_promote(var_inter[0],pos_nodes[0][0],mul), Gen[ 1, 1 ] ]()
    R_0 := pos_nodes[7][0]; R_1 := pos_nodes[4][0]; R_2 := pos_nodes[3][0]; R_3 := pos_nodes[1][0];
    R_4 := pos_nodes[0][0]; R_5 := pos_nodes[2][0]; R_6 := pos_nodes[5][0]; R_7 := var_inter[0];
    R_8 := (-5764801.0/720.0)*R_7; R_8 = (1294139.0/60.0)+R_8; R_8 = R_7*R_8; R_8 = (-1596665.0/72.0)+R_8;
    R_8 = R_7*R_8; R_8 = (98441.0/9.0)+R_8; R_8 = R_7*R_8; R_8 = (-634207.0/240.0)+R_8;
    R_8 = R_7*R_8; R_8 = (49931.0/180.0)+R_8; R_8 = R_7*R_8; R_8 = (-49.0/6.0)+R_8;
    R_8 = R_0*R_8; R_0 = (5764801.0/144.0)*R_7; R_0 = (-2941225.0/24.0)+R_0; R_0 = R_7*R_0;
    R_0 = (20756645.0/144.0)+R_0; R_0 = R_7*R_0; R_0 = (-2926819.0/36.0)+R_0; R_0 = R_7*R_0;
    R_0 = (133427.0/6.0)+R_0; R_0 = R_7*R_0; R_0 = (-46501.0/18.0)+R_0; R_0 = R_7*R_0;
    R_0 = (245.0/3.0)+R_0; R_0 = R_1*R_0; R_1 = (-5764801.0/240.0)*R_7; R_1 = (1529437.0/20.0)+R_1;
    R_1 = R_7*R_1; R_1 = -94539.4+R_1; R_1 = R_7*R_1; R_1 = (170471.0/3.0)+R_1;
    R_1 = R_7*R_1; R_1 = (-1347647.0/80.0)+R_1; R_1 = R_7*R_1; R_1 = (43071.0/20.0)+R_1;
    R_1 = R_7*R_1; R_1 = -73.5+R_1; R_1 = R_2*R_1; R_2 = (823543.0/720.0)*R_7;
    R_2 = (-117649.0/40.0)+R_2; R_2 = R_7*R_2; R_2 = (420175.0/144.0)+R_2; R_2 = R_7*R_2;
    R_2 = (-16807.0/12.0)+R_2; R_2 = R_7*R_2; R_2 = (9947.0/30.0)+R_2; R_2 = R_7*R_2;
    R_2 = (-343.0/10.0)+R_2; R_2 = R_7*R_2; R_2 = 1.0+R_2; R_2 = R_3*R_2;
    R_3 = (-823543.0/720.0)*R_7; R_3 = (117649.0/30.0)+R_3; R_3 = R_7*R_3; R_3 = (-386561.0/72.0)+R_3;
    R_3 = R_7*R_3; R_3 = (33614.0/9.0)+R_3; R_3 = R_7*R_3; R_3 = (-331681.0/240.0)+R_3;
    R_3 = R_7*R_3; R_3 = (22981.0/90.0)+R_3; R_3 = R_7*R_3; R_3 = (-363.0/20.0)+R_3;
    R_3 = R_4*R_3; R_2 = R_3+R_2; R_3 = (5764801.0/720.0)*R_7; R_3 = (-1058841.0/40.0)+R_3;
    R_3 = R_7*R_3; R_3 = (4958065.0/144.0)+R_3; R_3 = R_7*R_3; R_3 = -22209.2+R_3;
    R_3 = R_7*R_3; R_3 = (109417.0/15.0)+R_3; R_3 = R_7*R_3; R_3 = (-10927.0/10.0)+R_3;
    R_3 = R_7*R_3; R_3 = 49.0+R_3; R_3 = R_5*R_3; R_2 = R_3+R_2;
    R_1 = R_2+R_1; R_0 = R_1+R_0; R_1 = (-5764801.0/144.0)*R_7; R_1 = 117649.0+R_1;
    R_1 = R_7*R_1; R_1 = (-9495955.0/72.0)+R_1; R_1 = R_7*R_1; R_1 = (211288.0/3.0)+R_1;
    R_1 = R_7*R_1; R_1 = (-872935.0/48.0)+R_1; R_1 = R_7*R_1; R_1 = 2009.0+R_1;
    R_1 = R_7*R_1; R_1 = -61.25+R_1; R_1 = R_6*R_1; R_0 = R_1+R_0;
    R_1 = (5764801.0/240.0)*R_7; R_1 = (-2705927.0/40.0)+R_1; R_1 = R_7*R_1; R_1 = (1159683.0/16.0)+R_1;
    R_1 = R_7*R_1; R_1 = (-444185.0/12.0)+R_1; R_1 = R_7*R_1; R_1 = (45962.0/5.0)+R_1;
    R_1 = R_7*R_1; R_1 = (-9849.0/10.0)+R_1; R_1 = R_7*R_1; R_1 = (147.0/5.0)+R_1;
    R_7 = pos_nodes[6][0]; R_1 = R_7*R_1; R_0 = R_1+R_0; R_8 = R_0+R_8;
    res(0,0) = R_8; 
    return res
#
def jac( var_inter, pos_nodes )
    R_0 := pos_nodes[7][0]; R_1 := pos_nodes[4][0]; R_2 := pos_nodes[3][0]; R_3 := pos_nodes[1][0];
    R_4 := pos_nodes[0][0]; R_5 := pos_nodes[2][0]; R_6 := pos_nodes[5][0]; R_7 := var_inter[0];
    R_8 := (-5764801.0/720.0)*R_7; R_8 = (1294139.0/60.0)+R_8; R_8 = R_7*R_8; R_8 = (-1596665.0/72.0)+R_8;
    R_8 = R_7*R_8; R_8 = (98441.0/9.0)+R_8; R_8 = R_7*R_8; R_8 = (-634207.0/240.0)+R_8;
    R_8 = R_7*R_8; R_8 = (49931.0/180.0)+R_8; R_8 = R_7*R_8; R_8 = (-49.0/6.0)+R_8;
    R_8 = R_0*R_8; R_0 = (5764801.0/144.0)*R_7; R_0 = (-2941225.0/24.0)+R_0; R_0 = R_7*R_0;
    R_0 = (20756645.0/144.0)+R_0; R_0 = R_7*R_0; R_0 = (-2926819.0/36.0)+R_0; R_0 = R_7*R_0;
    R_0 = (133427.0/6.0)+R_0; R_0 = R_7*R_0; R_0 = (-46501.0/18.0)+R_0; R_0 = R_7*R_0;
    R_0 = (245.0/3.0)+R_0; R_0 = R_1*R_0; R_1 = (-5764801.0/240.0)*R_7; R_1 = (1529437.0/20.0)+R_1;
    R_1 = R_7*R_1; R_1 = -94539.4+R_1; R_1 = R_7*R_1; R_1 = (170471.0/3.0)+R_1;
    R_1 = R_7*R_1; R_1 = (-1347647.0/80.0)+R_1; R_1 = R_7*R_1; R_1 = (43071.0/20.0)+R_1;
    R_1 = R_7*R_1; R_1 = -73.5+R_1; R_1 = R_2*R_1; R_2 = (823543.0/720.0)*R_7;
    R_2 = (-117649.0/40.0)+R_2; R_2 = R_7*R_2; R_2 = (420175.0/144.0)+R_2; R_2 = R_7*R_2;
    R_2 = (-16807.0/12.0)+R_2; R_2 = R_7*R_2; R_2 = (9947.0/30.0)+R_2; R_2 = R_7*R_2;
    R_2 = (-343.0/10.0)+R_2; R_2 = R_7*R_2; R_2 = 1.0+R_2; R_2 = R_3*R_2;
    R_3 = (-823543.0/720.0)*R_7; R_3 = (117649.0/30.0)+R_3; R_3 = R_7*R_3; R_3 = (-386561.0/72.0)+R_3;
    R_3 = R_7*R_3; R_3 = (33614.0/9.0)+R_3; R_3 = R_7*R_3; R_3 = (-331681.0/240.0)+R_3;
    R_3 = R_7*R_3; R_3 = (22981.0/90.0)+R_3; R_3 = R_7*R_3; R_3 = (-363.0/20.0)+R_3;
    R_3 = R_4*R_3; R_2 = R_3+R_2; R_3 = (5764801.0/720.0)*R_7; R_3 = (-1058841.0/40.0)+R_3;
    R_3 = R_7*R_3; R_3 = (4958065.0/144.0)+R_3; R_3 = R_7*R_3; R_3 = -22209.2+R_3;
    R_3 = R_7*R_3; R_3 = (109417.0/15.0)+R_3; R_3 = R_7*R_3; R_3 = (-10927.0/10.0)+R_3;
    R_3 = R_7*R_3; R_3 = 49.0+R_3; R_3 = R_5*R_3; R_2 = R_3+R_2;
    R_1 = R_2+R_1; R_0 = R_1+R_0; R_1 = (-5764801.0/144.0)*R_7; R_1 = 117649.0+R_1;
    R_1 = R_7*R_1; R_1 = (-9495955.0/72.0)+R_1; R_1 = R_7*R_1; R_1 = (211288.0/3.0)+R_1;
    R_1 = R_7*R_1; R_1 = (-872935.0/48.0)+R_1; R_1 = R_7*R_1; R_1 = 2009.0+R_1;
    R_1 = R_7*R_1; R_1 = -61.25+R_1; R_1 = R_6*R_1; R_0 = R_1+R_0;
    R_1 = (5764801.0/240.0)*R_7; R_1 = (-2705927.0/40.0)+R_1; R_1 = R_7*R_1; R_1 = (1159683.0/16.0)+R_1;
    R_1 = R_7*R_1; R_1 = (-444185.0/12.0)+R_1; R_1 = R_7*R_1; R_1 = (45962.0/5.0)+R_1;
    R_1 = R_7*R_1; R_1 = (-9849.0/10.0)+R_1; R_1 = R_7*R_1; R_1 = (147.0/5.0)+R_1;
    R_7 = pos_nodes[6][0]; R_1 = R_7*R_1; R_0 = R_1+R_0; R_8 = R_0+R_8;
    res := R_8; 
    return res
#
def inv_jac_mat( var_inter, pos_nodes )
    res := Mat[ type_promote(var_inter[0],pos_nodes[0][0],mul), Gen[ 1, 1 ] ]()
    R_0 := pos_nodes[7][0]; R_1 := pos_nodes[4][0]; R_2 := pos_nodes[3][0]; R_3 := pos_nodes[1][0];
    R_4 := pos_nodes[0][0]; R_5 := pos_nodes[2][0]; R_6 := pos_nodes[5][0]; R_7 := var_inter[0];
    R_8 := (-5764801.0/720.0)*R_7; R_8 = (1294139.0/60.0)+R_8; R_8 = R_7*R_8; R_8 = (-1596665.0/72.0)+R_8;
    R_8 = R_7*R_8; R_8 = (98441.0/9.0)+R_8; R_8 = R_7*R_8; R_8 = (-634207.0/240.0)+R_8;
    R_8 = R_7*R_8; R_8 = (49931.0/180.0)+R_8; R_8 = R_7*R_8; R_8 = (-49.0/6.0)+R_8;
    R_8 = R_0*R_8; R_0 = (5764801.0/144.0)*R_7; R_0 = (-2941225.0/24.0)+R_0; R_0 = R_7*R_0;
    R_0 = (20756645.0/144.0)+R_0; R_0 = R_7*R_0; R_0 = (-2926819.0/36.0)+R_0; R_0 = R_7*R_0;
    R_0 = (133427.0/6.0)+R_0; R_0 = R_7*R_0; R_0 = (-46501.0/18.0)+R_0; R_0 = R_7*R_0;
    R_0 = (245.0/3.0)+R_0; R_0 = R_1*R_0; R_1 = (-5764801.0/240.0)*R_7; R_1 = (1529437.0/20.0)+R_1;
    R_1 = R_7*R_1; R_1 = -94539.4+R_1; R_1 = R_7*R_1; R_1 = (170471.0/3.0)+R_1;
    R_1 = R_7*R_1; R_1 = (-1347647.0/80.0)+R_1; R_1 = R_7*R_1; R_1 = (43071.0/20.0)+R_1;
    R_1 = R_7*R_1; R_1 = -73.5+R_1; R_1 = R_2*R_1; R_2 = (823543.0/720.0)*R_7;
    R_2 = (-117649.0/40.0)+R_2; R_2 = R_7*R_2; R_2 = (420175.0/144.0)+R_2; R_2 = R_7*R_2;
    R_2 = (-16807.0/12.0)+R_2; R_2 = R_7*R_2; R_2 = (9947.0/30.0)+R_2; R_2 = R_7*R_2;
    R_2 = (-343.0/10.0)+R_2; R_2 = R_7*R_2; R_2 = 1.0+R_2; R_2 = R_3*R_2;
    R_3 = (-823543.0/720.0)*R_7; R_3 = (117649.0/30.0)+R_3; R_3 = R_7*R_3; R_3 = (-386561.0/72.0)+R_3;
    R_3 = R_7*R_3; R_3 = (33614.0/9.0)+R_3; R_3 = R_7*R_3; R_3 = (-331681.0/240.0)+R_3;
    R_3 = R_7*R_3; R_3 = (22981.0/90.0)+R_3; R_3 = R_7*R_3; R_3 = (-363.0/20.0)+R_3;
    R_3 = R_4*R_3; R_2 = R_3+R_2; R_3 = (5764801.0/720.0)*R_7; R_3 = (-1058841.0/40.0)+R_3;
    R_3 = R_7*R_3; R_3 = (4958065.0/144.0)+R_3; R_3 = R_7*R_3; R_3 = -22209.2+R_3;
    R_3 = R_7*R_3; R_3 = (109417.0/15.0)+R_3; R_3 = R_7*R_3; R_3 = (-10927.0/10.0)+R_3;
    R_3 = R_7*R_3; R_3 = 49.0+R_3; R_3 = R_5*R_3; R_2 = R_3+R_2;
    R_1 = R_2+R_1; R_0 = R_1+R_0; R_1 = (-5764801.0/144.0)*R_7; R_1 = 117649.0+R_1;
    R_1 = R_7*R_1; R_1 = (-9495955.0/72.0)+R_1; R_1 = R_7*R_1; R_1 = (211288.0/3.0)+R_1;
    R_1 = R_7*R_1; R_1 = (-872935.0/48.0)+R_1; R_1 = R_7*R_1; R_1 = 2009.0+R_1;
    R_1 = R_7*R_1; R_1 = -61.25+R_1; R_1 = R_6*R_1; R_0 = R_1+R_0;
    R_1 = (5764801.0/240.0)*R_7; R_1 = (-2705927.0/40.0)+R_1; R_1 = R_7*R_1; R_1 = (1159683.0/16.0)+R_1;
    R_1 = R_7*R_1; R_1 = (-444185.0/12.0)+R_1; R_1 = R_7*R_1; R_1 = (45962.0/5.0)+R_1;
    R_1 = R_7*R_1; R_1 = (-9849.0/10.0)+R_1; R_1 = R_7*R_1; R_1 = (147.0/5.0)+R_1;
    R_7 = pos_nodes[6][0]; R_1 = R_7*R_1; R_0 = R_1+R_0; R_8 = R_0+R_8;
    R_8 = 1/R_8; res(0,0) = R_8; 
    return res
#
def measure( var_inter, pos_nodes )
    R_0 := pos_nodes[4][0]; R_0 = (-823543.0/9216.0)*R_0; R_1 := pos_nodes[2][0]; R_1 = (-823543.0/46080.0)*R_1;
    R_2 := pos_nodes[7][0]; R_2 = (823543.0/46080.0)*R_2; R_3 := pos_nodes[3][0]; R_3 = (823543.0/15360.0)*R_3;
    R_4 := pos_nodes[6][0]; R_4 = (-823543.0/15360.0)*R_4; R_5 := pos_nodes[5][0]; R_5 = (823543.0/9216.0)*R_5;
    R_6 := pos_nodes[0][0]; R_6 = (71569.0/46080.0)*R_6; R_5 = R_6+R_5; R_4 = R_5+R_4;
    R_3 = R_4+R_3; R_2 = R_3+R_2; R_1 = R_2+R_1; R_2 = pos_nodes[1][0];
    R_2 = (-71569.0/46080.0)*R_2; R_1 = R_2+R_1; R_0 = R_1+R_0; res := R_0;
    return res
#
def barycenter( var_inter, pos_nodes )
    res := Vec[ type_promote(var_inter[0],pos_nodes[0][0],mul), 1 ]()
    R_0 := pos_nodes[4][0]; R_1 := (-1.0)*R_0; R_2 := pos_nodes[5][0]; R_3 := R_0+R_2;
    R_4 := (-92659.0/4608.0)*R_3; R_5 := (-92659.0/2304.0)*R_3; R_6 := (996415.0/1152.0)*R_3; R_7 := (1225.0/2048.0)*R_3;
    R_3 = (-92659.0/1536.0)*R_3; R_8 := (-1.0)*R_2; R_8 = R_0+R_8; R_0 = (648613.0/768.0)*R_8;
    R_9 := (648613.0/2304.0)*R_8; R_8 = (-8575.0/1024.0)*R_8; R_1 = R_2+R_1; R_1 = (-823543.0/9216.0)*R_1;
    R_2 = pos_nodes[7][0]; R_10 := (-1.0)*R_2; R_11 := pos_nodes[2][0]; R_12 := R_11+R_2;
    R_13 := (-24451.0/4608.0)*R_12; R_14 := (-24451.0/2304.0)*R_12; R_5 = R_14+R_5; R_14 = (708295.0/1152.0)*R_12;
    R_15 := (49.0/2048.0)*R_12; R_12 = (-24451.0/1536.0)*R_12; R_16 := (-1.0)*R_11; R_16 = R_2+R_16;
    R_2 = (-171157.0/11520.0)*R_16; R_16 = (343.0/5120.0)*R_16; R_10 = R_11+R_10; R_11 = (171157.0/3840.0)*R_10;
    R_0 = R_11+R_0; R_10 = (823543.0/46080.0)*R_10; R_11 = pos_nodes[1][0]; R_17 := (-1.0)*R_11;
    R_18 := pos_nodes[0][0]; R_19 := R_11+R_18; R_20 := (12691.0/23040.0)*R_19; R_21 := (12691.0/11520.0)*R_19;
    R_22 := (-84035.0/1152.0)*R_19; R_22 = R_14+R_22; R_6 = R_22+R_6; R_22 = (-5.0/2048.0)*R_19;
    R_19 = (12691.0/7680.0)*R_19; R_14 = (-1.0)*R_18; R_14 = R_11+R_14; R_14 = (-5.0/1024.0)*R_14;
    R_14 = R_8+R_14; R_14 = R_16+R_14; R_17 = R_18+R_17; R_18 = (-12691.0/3840.0)*R_17;
    R_16 = (-12691.0/11520.0)*R_17; R_17 = (-71569.0/46080.0)*R_17; R_10 = R_17+R_10; R_1 = R_10+R_1;
    R_10 = pos_nodes[3][0]; R_17 = (-1.0)*R_10; R_8 = pos_nodes[6][0]; R_10 = R_10+R_8;
    R_11 = (63651.0/2560.0)*R_10; R_11 = R_20+R_11; R_13 = R_11+R_13; R_13 = R_4+R_13;
    R_4 = (63651.0/1280.0)*R_10; R_4 = R_5+R_4; R_21 = R_4+R_21; R_4 = (-180075.0/128.0)*R_10;
    R_4 = R_6+R_4; R_6 = (-245.0/2048.0)*R_10; R_6 = R_22+R_6; R_15 = R_6+R_15;
    R_7 = R_15+R_7; R_10 = (190953.0/2560.0)*R_10; R_10 = R_19+R_10; R_3 = R_10+R_3;
    R_12 = R_3+R_12; R_17 = R_8+R_17; R_8 = (445557.0/1280.0)*R_17; R_8 = R_0+R_8;
    R_18 = R_8+R_18; R_18 = R_13*R_18; R_13 = (148519.0/1280.0)*R_17; R_16 = R_13+R_16;
    R_16 = R_2+R_16; R_16 = R_9+R_16; R_16 = R_21*R_16; R_21 = (-1715.0/3072.0)*R_17;
    R_14 = R_21+R_14; R_4 = R_14*R_4; R_16 = R_4+R_16; R_18 = R_16+R_18;
    R_18 = (-1.0/80.0)*R_18; R_12 = R_14*R_12; R_12 = (-1.0/12.0)*R_12; R_17 = (823543.0/15360.0)*R_17;
    R_1 = R_17+R_1; R_7 = R_1*R_7; R_7 = R_12+R_7; R_18 = R_7+R_18;
    R_1 = 1/R_1; R_18 = R_1*R_18; res[0] = R_18; 
    return res
#
def inertia_operator_for_barycenter( var_inter, pos_nodes )
    R_0 := pos_nodes[0][0]; R_1 := (-1.0)*R_0; R_2 := pos_nodes[1][0]; R_3 := R_2+R_0;
    R_4 := (12691.0/3840.0)*R_3; R_5 := (-16807.0/288.0)*R_3; R_6 := (12691.0/23040.0)*R_3; R_7 := (12691.0/11520.0)*R_3;
    R_8 := (-84035.0/1152.0)*R_3; R_9 := (12691.0/7680.0)*R_3; R_10 := (-5.0/2048.0)*R_3; R_3 = (-16807.0/1152.0)*R_3;
    R_11 := (-1.0)*R_2; R_11 = R_0+R_11; R_0 = (84035.0/576.0)*R_11; R_12 := (-12691.0/3840.0)*R_11;
    R_13 := (-71569.0/46080.0)*R_11; R_11 = (-12691.0/11520.0)*R_11; R_1 = R_2+R_1; R_1 = (-5.0/1024.0)*R_1;
    R_2 = pos_nodes[5][0]; R_14 := (-1.0)*R_2; R_15 := pos_nodes[4][0]; R_16 := R_15+R_2;
    R_17 := (-92659.0/768.0)*R_16; R_17 = R_4+R_17; R_4 = (199283.0/288.0)*R_16; R_18 := (-92659.0/4608.0)*R_16;
    R_19 := (-92659.0/2304.0)*R_16; R_20 := (996415.0/1152.0)*R_16; R_21 := (-92659.0/1536.0)*R_16; R_22 := (1225.0/2048.0)*R_16;
    R_16 = (199283.0/1152.0)*R_16; R_23 := (-1.0)*R_15; R_23 = R_2+R_23; R_2 = (-648613.0/768.0)*R_23;
    R_24 := (6974905.0/576.0)*R_23; R_25 := (-823543.0/9216.0)*R_23; R_23 = (-648613.0/2304.0)*R_23; R_14 = R_15+R_14;
    R_15 = (648613.0/768.0)*R_14; R_26 := (648613.0/2304.0)*R_14; R_14 = (-8575.0/1024.0)*R_14; R_1 = R_14+R_1;
    R_14 = pos_nodes[2][0]; R_27 := (-1.0)*R_14; R_28 := pos_nodes[7][0]; R_29 := (-1.0)*R_28;
    R_29 = R_14+R_29; R_30 := (-991613.0/576.0)*R_29; R_30 = R_24+R_30; R_24 = (171157.0/3840.0)*R_29;
    R_2 = R_2+R_24; R_15 = R_24+R_15; R_29 = (823543.0/46080.0)*R_29; R_29 = R_13+R_29;
    R_25 = R_29+R_25; R_14 = R_14+R_28; R_29 = (-24451.0/768.0)*R_14; R_29 = R_17+R_29;
    R_17 = (141659.0/288.0)*R_14; R_4 = R_17+R_4; R_17 = (-24451.0/4608.0)*R_14; R_13 = (-24451.0/2304.0)*R_14;
    R_19 = R_13+R_19; R_13 = (708295.0/1152.0)*R_14; R_8 = R_13+R_8; R_20 = R_8+R_20;
    R_8 = (-24451.0/1536.0)*R_14; R_13 = (49.0/2048.0)*R_14; R_14 = (141659.0/1152.0)*R_14; R_27 = R_28+R_27;
    R_28 = (-171157.0/11520.0)*R_27; R_27 = (343.0/5120.0)*R_27; R_1 = R_27+R_1; R_27 = pos_nodes[3][0];
    R_24 = (-1.0)*R_27; R_31 := pos_nodes[6][0]; R_27 = R_27+R_31; R_32 := (190953.0/1280.0)*R_27;
    R_32 = R_29+R_32; R_29 = (-36015.0/32.0)*R_27; R_29 = R_4+R_29; R_5 = R_29+R_5;
    R_29 = (63651.0/2560.0)*R_27; R_29 = R_6+R_29; R_17 = R_29+R_17; R_17 = R_18+R_17;
    R_18 = pow(R_17,2); R_29 = (63651.0/1280.0)*R_27; R_29 = R_19+R_29; R_7 = R_29+R_7;
    R_29 = (-180075.0/128.0)*R_27; R_29 = R_20+R_29; R_20 = (190953.0/2560.0)*R_27; R_20 = R_9+R_20;
    R_21 = R_20+R_21; R_8 = R_21+R_8; R_21 = (-245.0/2048.0)*R_27; R_21 = R_10+R_21;
    R_13 = R_21+R_13; R_21 = R_13+R_22; R_27 = (-36015.0/128.0)*R_27; R_27 = R_3+R_27;
    R_14 = R_27+R_14; R_14 = R_16+R_14; R_24 = R_31+R_24; R_31 = (-420175.0/64.0)*R_24;
    R_31 = R_30+R_31; R_0 = R_31+R_0; R_31 = (445557.0/1280.0)*R_24; R_2 = R_2+R_31;
    R_2 = R_2+R_12; R_31 = R_15+R_31; R_12 = R_31+R_12; R_12 = R_17*R_12;
    R_31 = (823543.0/15360.0)*R_24; R_25 = R_31+R_25; R_21 = R_25*R_21; R_25 = 1/R_25;
    R_31 = (148519.0/1280.0)*R_24; R_11 = R_31+R_11; R_11 = R_28+R_11; R_26 = R_26+R_11;
    R_26 = R_7*R_26; R_23 = R_11+R_23; R_24 = (-1715.0/3072.0)*R_24; R_1 = R_24+R_1;
    R_5 = R_1*R_5; R_24 = R_1*R_17; R_11 = pow(R_1,2); R_29 = R_1*R_29;
    R_26 = R_29+R_26; R_12 = R_26+R_12; R_12 = (-1.0/80.0)*R_12; R_8 = R_1*R_8;
    R_8 = (-1.0/12.0)*R_8; R_21 = R_8+R_21; R_12 = R_21+R_12; R_12 = R_25*R_12;
    R_12 = (-1.0)*R_12; R_12 = R_13+R_12; R_12 = R_22+R_12; R_32 = R_32*R_12;
    R_32 = R_11+R_32; R_32 = R_1*R_32; R_5 = R_5*R_12; R_22 = R_12*R_23;
    R_24 = R_22+R_24; R_7 = R_24*R_7; R_5 = R_7+R_5; R_5 = 2.0*R_5;
    R_17 = R_17*R_12; R_17 = 2.0*R_17; R_17 = R_11+R_17; R_17 = R_2*R_17;
    R_11 = pow(R_12,2); R_2 = R_2*R_11; R_32 = R_2+R_32; R_32 = (1.0/12.0)*R_32;
    R_2 = R_1*R_11; R_32 = R_2+R_32; R_11 = R_0*R_11; R_17 = R_11+R_17;
    R_12 = R_14*R_12; R_23 = R_1*R_23; R_12 = R_23+R_12; R_12 = 2.0*R_12;
    R_18 = R_12+R_18; R_1 = R_18*R_1; R_17 = R_1+R_17; R_5 = R_17+R_5;
    R_5 = (1.0/80.0)*R_5; R_32 = R_5+R_32; res := R_32; 
    return res
