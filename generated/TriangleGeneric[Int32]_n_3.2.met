static const nvi := 2
static const nb_nodes := 10
static const nb_vertex_nodes := 3
static const center_of_var_inter := [ 1.0/3.0, 1.0/3.0 ]
#
def interpolation( var_inter, val, interpolation_base )
    if interpolation_base == "lagrange"
        return 27*val[5]*var_inter[0]*var_inter[1]*(1-var_inter[0]-var_inter[1])+val[0]*(1+var_inter[0]*(var_inter[0]*(9-9.0/2.0*var_inter[0])+var_inter[1]*(18-27.0/2.0*(var_inter[1]+var_inter[0]))-11.0/2.0)+var_inter[1]*(var_inter[1]*(9-9.0/2.0*var_inter[1])-11.0/2.0))+val[1]*var_inter[0]*(9+var_inter[0]*(27*var_inter[1]+27.0/2.0*var_inter[0]-45.0/2.0)+var_inter[1]*(27.0/2.0*var_inter[1]-45.0/2.0))+val[2]*var_inter[0]*(var_inter[0]*(18-27.0/2.0*(var_inter[1]+var_inter[0]))-9.0/2.0*(1-var_inter[1]))+val[3]*var_inter[0]*(1-9.0/2.0*(1-var_inter[0])*var_inter[0])+val[4]*var_inter[1]*(9+var_inter[0]*(27*var_inter[1]+27.0/2.0*var_inter[0]-45.0/2.0)+var_inter[1]*(27.0/2.0*var_inter[1]-45.0/2.0))+val[6]*var_inter[1]*var_inter[0]*(27.0/2.0*var_inter[0]-9.0/2.0)+val[7]*var_inter[1]*(var_inter[1]*(18-27.0/2.0*(var_inter[1]+var_inter[0]))-9.0/2.0*(1-var_inter[0]))+val[8]*var_inter[0]*var_inter[1]*(27.0/2.0*var_inter[1]-9.0/2.0)+val[9]*var_inter[1]*(1-9.0/2.0*var_inter[1]*(1-var_inter[1]))
    else if interpolation_base == "hierarchical"
        return val[7]*var_inter[1]*(18*var_inter[1]-9.0/2.0-9*var_inter[0]-27.0/2.0*(pow(var_inter[1],2)-pow(var_inter[0],2)))+val[6]*var_inter[1]*var_inter[0]*(27.0/2.0*var_inter[0]-9.0/2.0)+27*val[5]*var_inter[0]*var_inter[1]*(1-var_inter[0]-var_inter[1])+val[2]*var_inter[0]*(var_inter[0]*(18-27.0/2.0*(var_inter[1]+var_inter[0]))-9.0/2.0*(1-var_inter[1]))+val[0]*(1-var_inter[0]-var_inter[1])+val[1]*var_inter[0]*(9*(1-var_inter[1])+var_inter[0]*(27.0/2.0*(var_inter[1]+var_inter[0])-45.0/2.0))+val[3]*var_inter[0]+val[4]*var_inter[1]*(9+9.0/2.0*var_inter[0]-45.0/2.0*var_inter[1]-27.0/2.0*(pow(var_inter[0],2)-pow(var_inter[1],2)))+val[8]*var_inter[1]*var_inter[0]*(9-27.0/2.0*var_inter[0])+var_inter[1]*val[9]

#
def generic_interpolation( var_inter, val, interpolation_base, deg ) when deg == 3
    if interpolation_base == "lagrange"
        return var_inter[1]*(var_inter[1]*(18-27.0/2.0*(var_inter[1]+var_inter[0]))-9.0/2.0*(1-var_inter[0]))*val[7]+var_inter[1]*var_inter[0]*(27.0/2.0*var_inter[0]-9.0/2.0)*val[6]+var_inter[0]*(var_inter[0]*(18-27.0/2.0*(var_inter[1]+var_inter[0]))-9.0/2.0*(1-var_inter[1]))*val[2]+val[0]*(1+var_inter[0]*(var_inter[0]*(9-9.0/2.0*var_inter[0])+var_inter[1]*(18-27.0/2.0*(var_inter[1]+var_inter[0]))-11.0/2.0)+var_inter[1]*(var_inter[1]*(9-9.0/2.0*var_inter[1])-11.0/2.0))+val[1]*var_inter[0]*(9+var_inter[1]*(27.0/2.0*var_inter[1]+27*var_inter[0]-45.0/2.0)+var_inter[0]*(27.0/2.0*var_inter[0]-45.0/2.0))+val[3]*var_inter[0]*(1-9.0/2.0*(1-var_inter[0])*var_inter[0])+var_inter[1]*(9+var_inter[0]*(27*var_inter[1]+27.0/2.0*var_inter[0]-45.0/2.0)+var_inter[1]*(27.0/2.0*var_inter[1]-45.0/2.0))*val[4]+27*val[5]*var_inter[1]*var_inter[0]*(1-var_inter[0]-var_inter[1])+var_inter[0]*var_inter[1]*(27.0/2.0*var_inter[1]-9.0/2.0)*val[8]+var_inter[1]*(1-9.0/2.0*var_inter[1]*(1-var_inter[1]))*val[9]
    else if interpolation_base == "hierarchical"
        return var_inter[1]*val[9]+val[7]*var_inter[1]*(var_inter[0]*(27.0/2.0*var_inter[0]-9)+var_inter[1]*(18-27.0/2.0*var_inter[1])-9.0/2.0)+var_inter[1]*var_inter[0]*(27.0/2.0*var_inter[0]-9.0/2.0)*val[6]+27*var_inter[0]*var_inter[1]*(1-var_inter[0]-var_inter[1])*val[5]+var_inter[0]*(var_inter[0]*(18-27.0/2.0*(var_inter[1]+var_inter[0]))-9.0/2.0*(1-var_inter[1]))*val[2]+(1-var_inter[0]-var_inter[1])*val[0]+val[1]*var_inter[0]*(9*(1-var_inter[1])+var_inter[0]*(27.0/2.0*(var_inter[1]+var_inter[0])-45.0/2.0))+var_inter[0]*val[3]+val[4]*var_inter[1]*(9+9.0/2.0*var_inter[0]+27.0/2.0*(pow(var_inter[1],2)-pow(var_inter[0],2))-45.0/2.0*var_inter[1])+var_inter[1]*var_inter[0]*(9-27.0/2.0*var_inter[0])*val[8]

#
def interpolation_vertex( var_inter, val_vertex )
    return var_inter[0]*val_vertex[1]+val_vertex[0]*(1-var_inter[0]-var_inter[1])+var_inter[1]*val_vertex[2]
#
def nb_children( sub_nvi ) when sub_nvi==0
    return 1
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==0
    return child_var_inter
def type_child( sub_nvi, num_child ) when sub_nvi==0
    return TriangleGeneric[Int32]
def node_number_child( sub_nvi, num_child ) when sub_nvi==0
    return 0 .. 10
#
def nb_children( sub_nvi ) when sub_nvi==1
    return 3
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==0
    return [child_var_inter[0]*(1+9.0/2.0*child_var_inter[0]*(child_var_inter[0]-1))+2.0/3.0*child_var_inter[0]*(child_var_inter[0]*(18-27.0/2.0*child_var_inter[0])-9.0/2.0)+1.0/3.0*child_var_inter[0]*(9+child_var_inter[0]*(27.0/2.0*child_var_inter[0]-45.0/2.0)),0]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return BarGeneric[Int32]
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return [0,1,2,3]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==1
    return [1+2.0/3.0*child_var_inter[0]*(9+child_var_inter[0]*(27.0/2.0*child_var_inter[0]-45.0/2.0))+child_var_inter[0]*(child_var_inter[0]*(9-9.0/2.0*child_var_inter[0])-11.0/2.0)+1.0/3.0*child_var_inter[0]*(child_var_inter[0]*(18-27.0/2.0*child_var_inter[0])-9.0/2.0),2.0/3.0*child_var_inter[0]*(child_var_inter[0]*(18-27.0/2.0*child_var_inter[0])-9.0/2.0)+1.0/3.0*child_var_inter[0]*(9+child_var_inter[0]*(27.0/2.0*child_var_inter[0]-45.0/2.0))+child_var_inter[0]*(1+9.0/2.0*child_var_inter[0]*(child_var_inter[0]-1))]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return BarGeneric[Int32]
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return [3,6,8,9]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==2
    return [0,1+2.0/3.0*child_var_inter[0]*(9+child_var_inter[0]*(27.0/2.0*child_var_inter[0]-45.0/2.0))+child_var_inter[0]*(child_var_inter[0]*(9-9.0/2.0*child_var_inter[0])-11.0/2.0)+1.0/3.0*((18-27.0/2.0*child_var_inter[0])*child_var_inter[0]-9.0/2.0)*child_var_inter[0]]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==2
    return BarGeneric[Int32]
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==2
    return [9,7,4,0]
#
def nb_children( sub_nvi ) when sub_nvi==2
    return 3
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==2 and num_child==0
    return [0,0]
def type_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==0
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==0
    return [0]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==2 and num_child==1
    return [1,0]
def type_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==1
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==1
    return [3]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==2 and num_child==2
    return [0,1]
def type_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==2
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==2
    return [9]
def normal( var_inter, pos_nodes )
    assert( 0, "normal is defined only for nb_dim == nvi + 1" )
#
def jac_mat( var_inter, pos_nodes )
    res := Mat[ type_promote(var_inter[0],pos_nodes[0][0],mul), Gen[ 2, 2 ] ]()
    R_0 := pos_nodes[9][1]; R_1 := pos_nodes[9][0]; R_2 := pos_nodes[8][1]; R_3 := pos_nodes[7][1];
    R_4 := pos_nodes[6][1]; R_5 := pos_nodes[5][1]; R_6 := pos_nodes[3][1]; R_7 := pos_nodes[2][1];
    R_8 := pos_nodes[0][1]; R_9 := pos_nodes[1][1]; R_10 := pos_nodes[4][1]; R_11 := pos_nodes[7][0];
    R_12 := pos_nodes[6][0]; R_13 := pos_nodes[5][0]; R_14 := pos_nodes[4][0]; R_15 := pos_nodes[3][0];
    R_16 := pos_nodes[2][0]; R_17 := pos_nodes[1][0]; R_18 := var_inter[0]; R_19 := (-27.0)*R_18;
    R_20 := 13.5*R_18; R_21 := -4.5+R_20; R_21 = R_18*R_21; R_22 := R_4*R_21;
    R_21 = R_12*R_21; R_23 := -22.5+R_20; R_23 = R_18*R_23; R_24 := 54.0*R_18;
    R_25 := -13.5*R_18; R_26 := 4.5+R_25; R_26 = R_18*R_26; R_27 := R_7*R_26;
    R_26 = R_16*R_26; R_28 := (-1.0)*R_18; R_29 := 1.0+R_28; R_29 = -4.5*R_29;
    R_30 := 27.0*R_18; R_31 := -4.5+R_30; R_32 := (-2.0)*R_18; R_33 := (-3.0)*R_18;
    R_33 = 2.0+R_33; R_33 = R_18*R_33; R_33 = -4.5*R_33; R_33 = 1.0+R_33;
    R_6 = R_6*R_33; R_33 = R_15*R_33; R_15 = -40.5*R_18; R_34 := 40.5*R_18;
    R_35 := pos_nodes[0][0]; R_36 := var_inter[1]; R_37 := 3.0*R_36; R_37 = (-2.0)+R_37;
    R_37 = R_36*R_37; R_37 = 4.5*R_37; R_37 = 1.0+R_37; R_37 = R_0*R_37;
    R_0 = -40.5*R_36; R_19 = R_0+R_19; R_19 = 36.0+R_19; R_19 = R_36*R_19;
    R_19 = R_29+R_19; R_29 = R_3*R_19; R_19 = R_11*R_19; R_0 = 40.5*R_36;
    R_30 = R_0+R_30; R_30 = (-45.0)+R_30; R_30 = R_36*R_30; R_24 = R_0+R_24;
    R_24 = (-45.0)+R_24; R_24 = R_36*R_24; R_23 = R_24+R_23; R_23 = 9.0+R_23;
    R_23 = R_14*R_23; R_24 = (-2.0)*R_36; R_24 = R_28+R_24; R_24 = 1.0+R_24;
    R_24 = R_18*R_24; R_28 = R_5*R_24; R_28 = 27.0*R_28; R_24 = R_13*R_24;
    R_24 = 27.0*R_24; R_0 = 27.0*R_36; R_20 = R_0+R_20; R_20 = -22.5+R_20;
    R_20 = R_18*R_20; R_20 = R_30+R_20; R_20 = 9.0+R_20; R_20 = R_20*R_10;
    R_0 = -4.5+R_0; R_0 = R_18*R_0; R_30 = R_2*R_0; R_38 := (-3.0)*R_36;
    R_38 = 2.0+R_38; R_38 = R_36*R_38; R_38 = -4.5*R_38; R_38 = 1.0+R_38;
    R_38 = R_1*R_38; R_1 = -13.5*R_36; R_39 := 18.0+R_1; R_39 = R_36*R_39;
    R_1 = 4.5+R_1; R_1 = R_36*R_1; R_3 = R_3*R_1; R_1 = R_11*R_1;
    R_31 = R_36*R_31; R_4 = R_4*R_31; R_31 = R_12*R_31; R_12 = (-27.0)*R_36;
    R_25 = R_25+R_12; R_25 = 18.0+R_25; R_25 = R_18*R_25; R_39 = R_25+R_39;
    R_39 = -5.5+R_39; R_25 = R_8*R_39; R_39 = R_35*R_39; R_15 = R_12+R_15;
    R_15 = 36.0+R_15; R_15 = R_18*R_15; R_12 = (-1.0)*R_36; R_32 = R_12+R_32;
    R_32 = 1.0+R_32; R_32 = R_36*R_32; R_5 = R_5*R_32; R_5 = 27.0*R_5;
    R_32 = R_13*R_32; R_32 = 27.0*R_32; R_12 = 1.0+R_12; R_12 = -4.5*R_12;
    R_15 = R_12+R_15; R_7 = R_7*R_15; R_15 = R_16*R_15; R_16 = 54.0*R_36;
    R_34 = R_16+R_34; R_34 = (-45.0)+R_34; R_34 = R_18*R_34; R_16 = R_36+R_18;
    R_12 = 27.0*R_16; R_12 = -22.5+R_12; R_18 = R_18*R_12; R_13 = R_9*R_18;
    R_13 = R_25+R_13; R_27 = R_13+R_27; R_20 = R_27+R_20; R_20 = R_28+R_20;
    R_20 = R_22+R_20; R_20 = R_29+R_20; R_20 = R_30+R_20; R_20 = R_37+R_20;
    res(1,1) = R_20; R_18 = R_17*R_18; R_18 = R_39+R_18; R_26 = R_18+R_26;
    R_23 = R_26+R_23; R_23 = R_24+R_23; R_21 = R_23+R_21; R_19 = R_21+R_19;
    R_12 = R_36*R_12; R_10 = R_10*R_12; R_12 = R_14*R_12; R_14 = -13.5*R_16;
    R_14 = 18.0+R_14; R_14 = R_16*R_14; R_14 = -5.5+R_14; R_8 = R_8*R_14;
    R_14 = R_35*R_14; R_35 = 13.5*R_36; R_16 = -22.5+R_35; R_16 = R_36*R_16;
    R_34 = R_16+R_34; R_34 = 9.0+R_34; R_9 = R_9*R_34; R_8 = R_9+R_8;
    R_7 = R_8+R_7; R_6 = R_7+R_6; R_6 = R_10+R_6; R_5 = R_6+R_5;
    R_4 = R_5+R_4; R_3 = R_4+R_3; R_34 = R_17*R_34; R_34 = R_14+R_34;
    R_15 = R_34+R_15; R_33 = R_15+R_33; R_12 = R_33+R_12; R_32 = R_12+R_32;
    R_31 = R_32+R_31; R_1 = R_31+R_1; R_35 = -4.5+R_35; R_35 = R_36*R_35;
    R_2 = R_2*R_35; R_2 = R_3+R_2; res(0,1) = R_2; R_2 = pos_nodes[8][0];
    R_0 = R_2*R_0; R_19 = R_0+R_19; R_19 = R_38+R_19; res(1,0) = R_19;
    R_35 = R_2*R_35; R_1 = R_35+R_1; res(0,0) = R_1; 
    return res
#
def jac( var_inter, pos_nodes )
    R_0 := pos_nodes[9][0]; R_1 := pos_nodes[3][1]; R_2 := pos_nodes[1][1]; R_3 := pos_nodes[8][1];
    R_4 := pos_nodes[6][1]; R_5 := pos_nodes[5][1]; R_6 := pos_nodes[2][1]; R_7 := pos_nodes[4][1];
    R_8 := pos_nodes[0][1]; R_9 := pos_nodes[7][1]; R_10 := pos_nodes[9][1]; R_11 := pos_nodes[3][0];
    R_12 := pos_nodes[2][0]; R_13 := pos_nodes[1][0]; R_14 := pos_nodes[0][0]; R_15 := pos_nodes[4][0];
    R_16 := pos_nodes[6][0]; R_17 := var_inter[0]; R_18 := 54.0*R_17; R_19 := 13.5*R_17;
    R_20 := -22.5+R_19; R_20 = R_17*R_20; R_21 := -4.5+R_19; R_22 := R_16*R_21;
    R_21 = R_4*R_21; R_23 := -13.5*R_17; R_24 := 4.5+R_23; R_25 := R_12*R_24;
    R_24 = R_6*R_24; R_26 := (-27.0)*R_17; R_27 := (-1.0)*R_17; R_28 := 1.0+R_27;
    R_28 = -4.5*R_28; R_29 := (-3.0)*R_17; R_29 = 2.0+R_29; R_29 = R_17*R_29;
    R_29 = -4.5*R_29; R_29 = 1.0+R_29; R_1 = R_1*R_29; R_29 = R_11*R_29;
    R_11 = -40.5*R_17; R_30 := 40.5*R_17; R_31 := 27.0*R_17; R_32 := -4.5+R_31;
    R_4 = R_4*R_32; R_32 = R_16*R_32; R_16 = (-2.0)*R_17; R_33 := pos_nodes[5][0];
    R_34 := pos_nodes[8][0]; R_35 := var_inter[1]; R_36 := (-3.0)*R_35; R_36 = 2.0+R_36;
    R_36 = R_35*R_36; R_36 = -4.5*R_36; R_36 = 1.0+R_36; R_36 = R_0*R_36;
    R_0 = (-2.0)*R_35; R_0 = R_27+R_0; R_0 = 1.0+R_0; R_27 = R_33*R_0;
    R_27 = 27.0*R_27; R_0 = R_5*R_0; R_0 = 27.0*R_0; R_37 := 27.0*R_35;
    R_38 := -4.5+R_37; R_39 := R_34*R_38; R_38 = R_3*R_38; R_38 = R_21+R_38;
    R_38 = R_0+R_38; R_38 = R_24+R_38; R_19 = R_37+R_19; R_19 = -22.5+R_19;
    R_19 = R_17*R_19; R_37 = 40.5*R_35; R_18 = R_37+R_18; R_18 = (-45.0)+R_18;
    R_18 = R_35*R_18; R_20 = R_18+R_20; R_20 = 9.0+R_20; R_20 = R_15*R_20;
    R_31 = R_37+R_31; R_31 = (-45.0)+R_31; R_31 = R_35*R_31; R_19 = R_31+R_19;
    R_19 = 9.0+R_19; R_19 = R_19*R_7; R_31 = -40.5*R_35; R_26 = R_31+R_26;
    R_26 = 36.0+R_26; R_26 = R_35*R_26; R_26 = R_28+R_26; R_28 = R_9*R_26;
    R_31 = 3.0*R_35; R_31 = (-2.0)+R_31; R_31 = R_35*R_31; R_31 = 4.5*R_31;
    R_31 = 1.0+R_31; R_31 = R_10*R_31; R_28 = R_31+R_28; R_31 = (-27.0)*R_35;
    R_23 = R_23+R_31; R_23 = 18.0+R_23; R_23 = R_17*R_23; R_11 = R_31+R_11;
    R_11 = 36.0+R_11; R_11 = R_17*R_11; R_31 = 54.0*R_35; R_30 = R_31+R_30;
    R_30 = (-45.0)+R_30; R_30 = R_17*R_30; R_31 = R_35+R_17; R_10 = -13.5*R_31;
    R_10 = 18.0+R_10; R_10 = R_31*R_10; R_10 = -5.5+R_10; R_37 = R_8*R_10;
    R_10 = R_14*R_10; R_31 = 27.0*R_31; R_31 = -22.5+R_31; R_18 = R_13*R_31;
    R_18 = R_39+R_18; R_27 = R_18+R_27; R_25 = R_27+R_25; R_22 = R_25+R_22;
    R_22 = R_22*R_17; R_7 = R_7*R_31; R_4 = R_7+R_4; R_7 = R_2*R_31;
    R_7 = R_38+R_7; R_17 = R_7*R_17; R_31 = R_15*R_31; R_15 = (-1.0)*R_35;
    R_7 = 1.0+R_15; R_7 = -4.5*R_7; R_11 = R_7+R_11; R_6 = R_6*R_11;
    R_11 = R_12*R_11; R_16 = R_15+R_16; R_16 = 1.0+R_16; R_5 = R_5*R_16;
    R_5 = 27.0*R_5; R_4 = R_5+R_4; R_16 = R_33*R_16; R_16 = 27.0*R_16;
    R_33 = 13.5*R_35; R_5 = -22.5+R_33; R_5 = R_35*R_5; R_30 = R_5+R_30;
    R_30 = 9.0+R_30; R_2 = R_2*R_30; R_1 = R_2+R_1; R_6 = R_1+R_6;
    R_37 = R_6+R_37; R_30 = R_13*R_30; R_30 = R_10+R_30; R_11 = R_30+R_11;
    R_29 = R_11+R_29; R_33 = -4.5+R_33; R_3 = R_3*R_33; R_33 = R_34*R_33;
    R_16 = R_33+R_16; R_33 = -13.5*R_35; R_34 = 18.0+R_33; R_34 = R_35*R_34;
    R_34 = R_23+R_34; R_34 = -5.5+R_34; R_14 = R_14*R_34; R_36 = R_14+R_36;
    R_20 = R_36+R_20; R_34 = R_8*R_34; R_34 = R_28+R_34; R_19 = R_34+R_19;
    R_17 = R_19+R_17; R_33 = 4.5+R_33; R_9 = R_9*R_33; R_9 = R_4+R_9;
    R_3 = R_9+R_3; R_3 = R_3*R_35; R_3 = R_37+R_3; R_37 = pos_nodes[7][0];
    R_26 = R_37*R_26; R_26 = R_20+R_26; R_22 = R_26+R_22; R_22 = R_3*R_22;
    R_22 = (-1.0)*R_22; R_33 = R_37*R_33; R_16 = R_33+R_16; R_32 = R_16+R_32;
    R_31 = R_32+R_31; R_35 = R_31*R_35; R_29 = R_35+R_29; R_17 = R_29*R_17;
    R_22 = R_17+R_22; res := R_22; 
    return res
#
def inv_jac_mat( var_inter, pos_nodes )
    res := Mat[ type_promote(var_inter[0],pos_nodes[0][0],mul), Gen[ 2, 2 ] ]()
    R_0 := pos_nodes[9][0]; R_1 := pos_nodes[3][1]; R_2 := pos_nodes[3][0]; R_3 := pos_nodes[2][0];
    R_4 := pos_nodes[1][0]; R_5 := pos_nodes[0][0]; R_6 := pos_nodes[4][0]; R_7 := pos_nodes[6][0];
    R_8 := pos_nodes[5][0]; R_9 := pos_nodes[8][0]; R_10 := pos_nodes[7][0]; R_11 := pos_nodes[1][1];
    R_12 := pos_nodes[8][1]; R_13 := pos_nodes[6][1]; R_14 := pos_nodes[5][1]; R_15 := pos_nodes[2][1];
    R_16 := pos_nodes[4][1]; R_17 := pos_nodes[0][1]; R_18 := var_inter[0]; R_19 := 54.0*R_18;
    R_20 := (-3.0)*R_18; R_20 = 2.0+R_20; R_20 = R_18*R_20; R_20 = -4.5*R_20;
    R_20 = 1.0+R_20; R_1 = R_1*R_20; R_20 = R_2*R_20; R_2 = -40.5*R_18;
    R_21 := 40.5*R_18; R_22 := (-2.0)*R_18; R_23 := 13.5*R_18; R_24 := -22.5+R_23;
    R_24 = R_18*R_24; R_25 := -4.5+R_23; R_26 := R_7*R_25; R_25 = R_13*R_25;
    R_27 := 27.0*R_18; R_28 := -4.5+R_27; R_13 = R_13*R_28; R_28 = R_7*R_28;
    R_7 = -13.5*R_18; R_29 := 4.5+R_7; R_30 := R_3*R_29; R_29 = R_15*R_29;
    R_31 := (-27.0)*R_18; R_32 := (-1.0)*R_18; R_33 := 1.0+R_32; R_33 = -4.5*R_33;
    R_34 := pos_nodes[7][1]; R_35 := var_inter[1]; R_36 := (-3.0)*R_35; R_36 = 2.0+R_36;
    R_36 = R_35*R_36; R_36 = -4.5*R_36; R_36 = 1.0+R_36; R_36 = R_0*R_36;
    R_0 = 54.0*R_35; R_21 = R_0+R_21; R_21 = (-45.0)+R_21; R_21 = R_18*R_21;
    R_0 = (-1.0)*R_35; R_37 := 1.0+R_0; R_37 = -4.5*R_37; R_22 = R_0+R_22;
    R_22 = 1.0+R_22; R_0 = R_14*R_22; R_0 = 27.0*R_0; R_22 = R_8*R_22;
    R_22 = 27.0*R_22; R_38 := 13.5*R_35; R_39 := -22.5+R_38; R_39 = R_35*R_39;
    R_21 = R_39+R_21; R_21 = 9.0+R_21; R_39 = R_11*R_21; R_1 = R_39+R_1;
    R_21 = R_4*R_21; R_38 = -4.5+R_38; R_39 = R_12*R_38; R_38 = R_9*R_38;
    R_22 = R_38+R_22; R_38 = R_35+R_18; R_40 := -13.5*R_38; R_40 = 18.0+R_40;
    R_40 = R_38*R_40; R_40 = -5.5+R_40; R_41 := R_17*R_40; R_40 = R_5*R_40;
    R_21 = R_40+R_21; R_38 = 27.0*R_38; R_38 = -22.5+R_38; R_4 = R_4*R_38;
    R_40 = R_16*R_38; R_13 = R_40+R_13; R_13 = R_0+R_13; R_0 = R_6*R_38;
    R_38 = R_11*R_38; R_11 = (-2.0)*R_35; R_11 = R_32+R_11; R_11 = 1.0+R_11;
    R_8 = R_8*R_11; R_8 = 27.0*R_8; R_11 = R_14*R_11; R_11 = 27.0*R_11;
    R_14 = 27.0*R_35; R_32 = -4.5+R_14; R_9 = R_9*R_32; R_4 = R_9+R_4;
    R_8 = R_4+R_8; R_30 = R_8+R_30; R_26 = R_30+R_26; R_26 = R_26*R_18;
    R_32 = R_12*R_32; R_32 = R_25+R_32; R_32 = R_11+R_32; R_32 = R_29+R_32;
    R_38 = R_32+R_38; R_38 = R_38*R_18; R_23 = R_14+R_23; R_23 = -22.5+R_23;
    R_23 = R_18*R_23; R_14 = 40.5*R_35; R_19 = R_14+R_19; R_19 = (-45.0)+R_19;
    R_19 = R_35*R_19; R_24 = R_19+R_24; R_24 = 9.0+R_24; R_24 = R_6*R_24;
    R_27 = R_14+R_27; R_27 = (-45.0)+R_27; R_27 = R_35*R_27; R_23 = R_27+R_23;
    R_23 = 9.0+R_23; R_16 = R_23*R_16; R_23 = -13.5*R_35; R_27 = 4.5+R_23;
    R_14 = R_34*R_27; R_14 = R_13+R_14; R_39 = R_14+R_39; R_39 = R_39*R_35;
    R_27 = R_10*R_27; R_22 = R_27+R_22; R_28 = R_22+R_28; R_0 = R_28+R_0;
    R_0 = R_0*R_35; R_23 = 18.0+R_23; R_23 = R_35*R_23; R_28 = (-27.0)*R_35;
    R_2 = R_28+R_2; R_2 = 36.0+R_2; R_2 = R_18*R_2; R_2 = R_37+R_2;
    R_15 = R_15*R_2; R_15 = R_1+R_15; R_41 = R_15+R_41; R_39 = R_41+R_39;
    R_2 = R_3*R_2; R_2 = R_21+R_2; R_20 = R_2+R_20; R_20 = R_0+R_20;
    R_28 = R_7+R_28; R_28 = 18.0+R_28; R_28 = R_18*R_28; R_23 = R_28+R_23;
    R_23 = -5.5+R_23; R_5 = R_5*R_23; R_36 = R_5+R_36; R_24 = R_36+R_24;
    R_23 = R_17*R_23; R_17 = -40.5*R_35; R_31 = R_17+R_31; R_31 = 36.0+R_31;
    R_31 = R_35*R_31; R_31 = R_33+R_31; R_10 = R_10*R_31; R_10 = R_24+R_10;
    R_26 = R_10+R_26; R_10 = R_39*R_26; R_10 = (-1.0)*R_10; R_31 = R_34*R_31;
    R_34 = 3.0*R_35; R_34 = (-2.0)+R_34; R_34 = R_35*R_34; R_34 = 4.5*R_34;
    R_34 = 1.0+R_34; R_35 = pos_nodes[9][1]; R_34 = R_35*R_34; R_31 = R_34+R_31;
    R_23 = R_31+R_23; R_16 = R_23+R_16; R_38 = R_16+R_38; R_16 = R_20*R_38;
    R_10 = R_16+R_10; R_10 = 1/R_10; R_20 = R_20*R_10; res(1,1) = R_20;
    R_26 = R_26*R_10; R_26 = (-1.0)*R_26; res(1,0) = R_26; R_39 = R_39*R_10;
    R_39 = (-1.0)*R_39; res(0,1) = R_39; R_10 = R_38*R_10; res(0,0) = R_10;
    return res
#
def measure( var_inter, pos_nodes )
    R_0 := pos_nodes[3][1]; R_1 := 0.125*R_0; R_2 := -0.125*R_0; R_3 := (-1.0)*R_0;
    R_4 := pos_nodes[9][0]; R_5 := (-1.0)*R_4; R_6 := pos_nodes[3][0]; R_7 := 0.125*R_6;
    R_8 := -0.125*R_6; R_9 := pos_nodes[5][1]; R_10 := (27.0/16.0)*R_9; R_11 := 27.0*R_9;
    R_12 := -20.25*R_9; R_13 := -13.5*R_9; R_14 := (-27.0/16.0)*R_9; R_15 := 13.5*R_9;
    R_16 := 20.25*R_9; R_17 := (-27.0)*R_9; R_18 := (-54.0)*R_9; R_19 := pos_nodes[6][0];
    R_20 := -2.25*R_19; R_21 := 2.25*R_19; R_22 := (-1.0)*R_19; R_23 := R_6+R_22;
    R_23 = 13.5*R_23; R_24 := pos_nodes[2][0]; R_25 := -1.125*R_24; R_26 := 1.125*R_24;
    R_27 := (-27.0)*R_24; R_28 := (-1.0)*R_24; R_29 := R_19+R_28; R_29 = (-9.0)*R_29;
    R_30 := R_24+R_22; R_31 := 9.0*R_30; R_30 = (-9.0)*R_30; R_32 := pos_nodes[0][0];
    R_33 := (-13.0/32.0)*R_32; R_34 := (13.0/32.0)*R_32; R_5 = R_32+R_5; R_35 := (-13.0/32.0)*R_5;
    R_5 = -13.5*R_5; R_36 := R_32+R_4; R_37 := (-1.0)*R_32; R_38 := R_4+R_37;
    R_39 := -13.5*R_38; R_40 := (-13.0/32.0)*R_38; R_38 = 1.125*R_38; R_41 := pos_nodes[7][0];
    R_4 = R_41+R_4; R_4 = R_37+R_4; R_42 := (-1.0)*R_41; R_37 = R_41+R_37;
    R_43 := R_41+R_32; R_44 := pos_nodes[8][0]; R_45 := R_44+R_42; R_45 = (9.0/32.0)*R_45;
    R_46 := R_19+R_44; R_32 = R_44+R_32; R_32 = R_32+R_42; R_32 = -1.125*R_32;
    R_47 := (-1.0)*R_44; R_48 := R_41+R_47; R_48 = (9.0/32.0)*R_48; R_37 = R_37+R_47;
    R_49 := -1.125*R_37; R_49 = R_20+R_49; R_37 = 13.5*R_37; R_43 = R_47+R_43;
    R_50 := 2.25*R_43; R_51 := -3.375*R_43; R_27 = R_51+R_27; R_51 = -2.25*R_43;
    R_52 := pos_nodes[1][0]; R_53 := (45.0/32.0)*R_52; R_54 := R_52+R_24; R_54 = R_54+R_22;
    R_54 = R_54+R_47; R_54 = 1.125*R_54; R_35 = R_54+R_35; R_54 = -11.25*R_52;
    R_55 := (-45.0/32.0)*R_52; R_55 = R_26+R_55; R_55 = R_8+R_55; R_8 = -3.375*R_52;
    R_26 = 16.875*R_52; R_26 = R_27+R_26; R_27 = R_52+R_47; R_27 = 4.5*R_27;
    R_19 = R_19+R_52; R_19 = R_47+R_19; R_19 = R_28+R_19; R_47 = -13.5*R_19;
    R_19 = 13.5*R_19; R_44 = R_44+R_52; R_56 := (-27.0)*R_44; R_57 := 13.5*R_44;
    R_44 = 27.0*R_44; R_58 := 3.375*R_52; R_32 = R_58+R_32; R_58 = 40.5*R_52;
    R_37 = R_58+R_37; R_58 = 11.25*R_52; R_51 = R_58+R_51; R_52 = (-1.0)*R_52;
    R_46 = R_52+R_46; R_46 = R_28+R_46; R_46 = 1.125*R_46; R_46 = R_40+R_46;
    R_43 = R_52+R_43; R_43 = -13.5*R_43; R_52 = pos_nodes[4][0]; R_40 = (9.0/16.0)*R_52;
    R_28 = -4.5*R_52; R_58 = (-9.0/16.0)*R_52; R_59 := -6.75*R_52; R_60 := R_52+R_42;
    R_61 := (27.0/32.0)*R_60; R_61 = R_35+R_61; R_35 = (-27.0/32.0)*R_60; R_35 = R_46+R_35;
    R_46 = 3.375*R_60; R_46 = R_38+R_46; R_46 = R_46+R_30; R_46 = R_27+R_46;
    R_60 = 40.5*R_60; R_60 = R_5+R_60; R_5 = R_41+R_52; R_5 = (-1.0)*R_5;
    R_5 = R_5+R_36; R_27 = -2.25*R_5; R_5 = -13.5*R_5; R_6 = R_52+R_6;
    R_38 = -4.5*R_6; R_38 = R_49+R_38; R_8 = R_38+R_8; R_6 = 4.5*R_6;
    R_32 = R_6+R_32; R_32 = R_32+R_21; R_6 = 4.5*R_52; R_52 = (-1.0)*R_52;
    R_41 = R_41+R_52; R_41 = 40.5*R_41; R_39 = R_41+R_39; R_36 = R_36+R_52;
    R_42 = R_36+R_42; R_42 = 13.5*R_42; R_4 = R_4+R_52; R_36 = -3.375*R_4;
    R_36 = R_47+R_36; R_4 = 3.375*R_4; R_19 = R_4+R_19; R_4 = pos_nodes[5][0];
    R_47 = (27.0/16.0)*R_4; R_47 = R_40+R_47; R_7 = R_47+R_7; R_25 = R_7+R_25;
    R_53 = R_25+R_53; R_53 = R_33+R_53; R_53 = R_20+R_53; R_53 = R_45+R_53;
    R_45 = 54.0*R_4; R_42 = R_45+R_42; R_56 = R_42+R_56; R_42 = 13.5*R_4;
    R_42 = R_54+R_42; R_28 = R_42+R_28; R_50 = R_28+R_50; R_29 = R_50+R_29;
    R_31 = R_50+R_31; R_50 = (-27.0/16.0)*R_4; R_55 = R_50+R_55; R_55 = R_58+R_55;
    R_34 = R_55+R_34; R_21 = R_34+R_21; R_21 = R_48+R_21; R_48 = (-27.0)*R_4;
    R_27 = R_48+R_27; R_57 = R_27+R_57; R_27 = 20.25*R_4; R_27 = R_26+R_27;
    R_59 = R_27+R_59; R_59 = R_23+R_59; R_23 = (-54.0)*R_4; R_44 = R_23+R_44;
    R_44 = R_5+R_44; R_24 = R_24+R_4; R_5 = 6.75*R_24; R_8 = R_5+R_8;
    R_5 = -6.75*R_24; R_32 = R_5+R_32; R_24 = R_22+R_24; R_24 = (-27.0)*R_24;
    R_24 = R_37+R_24; R_37 = -13.5*R_4; R_37 = R_51+R_37; R_6 = R_37+R_6;
    R_30 = R_6+R_30; R_52 = R_4+R_52; R_52 = (-27.0)*R_52; R_43 = R_52+R_43;
    R_52 = pos_nodes[6][1]; R_4 = -2.25*R_52; R_6 = 2.25*R_52; R_3 = R_52+R_3;
    R_37 = 13.5*R_3; R_3 = -13.5*R_3; R_51 = (-1.0)*R_52; R_22 = pos_nodes[2][1];
    R_5 = -1.125*R_22; R_23 = 27.0*R_22; R_27 = 1.125*R_22; R_26 = (-1.0)*R_22;
    R_26 = R_52+R_26; R_26 = (-9.0)*R_26; R_52 = (-27.0)*R_22; R_48 = R_22+R_9;
    R_34 = -6.75*R_48; R_48 = R_48+R_51; R_48 = (-27.0)*R_48; R_55 = R_22+R_51;
    R_58 = 9.0*R_55; R_55 = (-9.0)*R_55; R_50 = pos_nodes[1][1]; R_28 = (45.0/32.0)*R_50;
    R_42 = -16.875*R_50; R_54 = 11.25*R_50; R_45 = (-45.0/32.0)*R_50; R_20 = -11.25*R_50;
    R_20 = R_15+R_20; R_15 = R_50+R_22; R_15 = R_51+R_15; R_33 = 3.375*R_50;
    R_25 = 16.875*R_50; R_7 = 40.5*R_50; R_48 = R_7+R_48; R_7 = (-1.0)*R_50;
    R_47 = pos_nodes[8][1]; R_22 = R_47+R_22; R_22 = R_51+R_22; R_22 = R_22+R_7;
    R_22 = -13.5*R_22; R_51 = (-1.0)*R_47; R_15 = R_15+R_51; R_40 = 1.125*R_15;
    R_15 = -1.125*R_15; R_41 = R_50+R_51; R_41 = -4.5*R_41; R_41 = R_26+R_41;
    R_50 = R_47+R_50; R_26 = -13.5*R_50; R_38 = 13.5*R_50; R_50 = 27.0*R_50;
    R_50 = R_18+R_50; R_18 = R_47+R_7; R_18 = -4.5*R_18; R_49 = pos_nodes[4][1];
    R_62 := (9.0/16.0)*R_49; R_62 = R_10+R_62; R_10 = 6.75*R_49; R_10 = R_12+R_10;
    R_10 = R_42+R_10; R_10 = R_23+R_10; R_23 = 4.5*R_49; R_23 = R_13+R_23;
    R_23 = R_54+R_23; R_54 = (-9.0/16.0)*R_49; R_13 = -4.5*R_49; R_20 = R_13+R_20;
    R_0 = R_0+R_49; R_0 = 4.5*R_0; R_13 = -6.75*R_49; R_13 = R_16+R_13;
    R_16 = (-1.0)*R_49; R_9 = R_9+R_16; R_9 = (-27.0)*R_9; R_42 = pos_nodes[7][1];
    R_12 = (-1.0)*R_42; R_63 := R_49+R_12; R_64 := (27.0/32.0)*R_63; R_64 = R_40+R_64;
    R_63 = 3.375*R_63; R_63 = R_18+R_63; R_40 = R_47+R_12; R_65 := (9.0/32.0)*R_40;
    R_66 := (-9.0/32.0)*R_40; R_49 = R_42+R_49; R_49 = (-1.0)*R_49; R_67 := R_42+R_16;
    R_68 := (27.0/32.0)*R_67; R_68 = R_15+R_68; R_15 = 3.375*R_67; R_69 := -40.5*R_67;
    R_67 = -3.375*R_67; R_70 := pos_nodes[9][1]; R_71 := R_42+R_70; R_49 = R_70+R_49;
    R_72 := (-1.0)*R_70; R_73 := pos_nodes[0][1]; R_74 := (-13.0/32.0)*R_73; R_62 = R_74+R_62;
    R_62 = R_4+R_62; R_62 = R_1+R_62; R_28 = R_62+R_28; R_28 = R_5+R_28;
    R_28 = R_65+R_28; R_28 = R_28*R_60; R_28 = (1.0/96.0)*R_28; R_65 = R_70+R_73;
    R_65 = R_65+R_12; R_65 = R_65+R_16; R_65 = 2.25*R_65; R_11 = R_65+R_11;
    R_11 = R_26+R_11; R_11 = R_11*R_24; R_11 = (1.0/192.0)*R_11; R_26 = (13.0/32.0)*R_73;
    R_26 = R_26+R_6; R_26 = R_54+R_26; R_26 = R_14+R_26; R_2 = R_26+R_2;
    R_45 = R_2+R_45; R_27 = R_45+R_27; R_27 = R_66+R_27; R_66 = R_27*R_46;
    R_66 = (1.0/12.0)*R_66; R_45 = R_27*R_19; R_45 = (-1.0/24.0)*R_45; R_2 = R_27*R_60;
    R_2 = (-1.0/96.0)*R_2; R_27 = R_35*R_27; R_27 = -0.5*R_27; R_26 = R_42+R_73;
    R_26 = R_51+R_26; R_7 = R_7+R_26; R_7 = -13.5*R_7; R_7 = R_9+R_7;
    R_9 = R_19*R_7; R_9 = (-1.0/640.0)*R_9; R_14 = R_35*R_7; R_14 = (-1.0/96.0)*R_14;
    R_39 = R_39*R_7; R_39 = (1.0/2560.0)*R_39; R_61 = R_61*R_7; R_61 = (1.0/96.0)*R_61;
    R_54 = R_46*R_7; R_54 = (1.0/160.0)*R_54; R_36 = R_36*R_7; R_36 = (1.0/1152.0)*R_36;
    R_7 = R_60*R_7; R_7 = (-13.0/7680.0)*R_7; R_65 = -2.25*R_26; R_65 = R_23+R_65;
    R_65 = R_55+R_65; R_23 = R_65*R_44; R_23 = (1.0/160.0)*R_23; R_65 = R_65*R_57;
    R_65 = (-1.0/96.0)*R_65; R_26 = 2.25*R_26; R_20 = R_26+R_20; R_20 = R_58+R_20;
    R_20 = R_20*R_57; R_20 = (1.0/96.0)*R_20; R_47 = R_47+R_73; R_47 = R_12+R_47;
    R_47 = -1.125*R_47; R_47 = R_6+R_47; R_0 = R_47+R_0; R_33 = R_0+R_33;
    R_33 = R_34+R_33; R_34 = R_33*R_46; R_34 = (-1.0/24.0)*R_34; R_0 = R_33*R_60;
    R_0 = (1.0/160.0)*R_0; R_47 = R_35*R_33; R_47 = (1.0/12.0)*R_47; R_33 = R_33*R_19;
    R_33 = (1.0/80.0)*R_33; R_6 = (-1.0)*R_73; R_71 = R_71+R_6; R_16 = R_71+R_16;
    R_16 = 3.375*R_16; R_22 = R_16+R_22; R_16 = R_22*R_59; R_16 = (1.0/160.0)*R_16;
    R_71 = R_22*R_32; R_71 = (-1.0/80.0)*R_71; R_12 = R_22*R_43; R_12 = (7.0/2880.0)*R_12;
    R_22 = R_22*R_21; R_22 = (1.0/24.0)*R_22; R_40 = R_40+R_6; R_58 = -3.375*R_40;
    R_10 = R_58+R_10; R_10 = R_37+R_10; R_10 = R_10*R_60; R_10 = (1.0/1152.0)*R_10;
    R_40 = 3.375*R_40; R_13 = R_40+R_13; R_25 = R_13+R_25; R_52 = R_25+R_52;
    R_52 = R_3+R_52; R_35 = R_35*R_52; R_35 = (-1.0/24.0)*R_35; R_46 = R_46*R_52;
    R_46 = (1.0/80.0)*R_46; R_19 = R_19*R_52; R_19 = (-1.0/160.0)*R_19; R_60 = R_52*R_60;
    R_60 = (-1.0/640.0)*R_60; R_42 = R_42+R_6; R_51 = R_42+R_51; R_51 = 13.5*R_51;
    R_51 = R_48+R_51; R_56 = R_56*R_51; R_56 = (1.0/1152.0)*R_56; R_36 = R_56+R_36;
    R_10 = R_36+R_10; R_57 = R_57*R_51; R_57 = (1.0/160.0)*R_57; R_51 = R_44*R_51;
    R_51 = (-1.0/640.0)*R_51; R_6 = R_70+R_6; R_70 = 1.125*R_6; R_63 = R_70+R_63;
    R_63 = R_55+R_63; R_63 = R_21*R_63; R_63 = (-1.0/12.0)*R_63; R_6 = 13.5*R_6;
    R_69 = R_6+R_69; R_53 = R_53*R_69; R_53 = (-1.0/96.0)*R_53; R_6 = R_21*R_69;
    R_6 = (1.0/96.0)*R_6; R_70 = R_59*R_69; R_70 = (7.0/2880.0)*R_70; R_70 = R_10+R_70;
    R_70 = R_7+R_70; R_54 = R_70+R_54; R_54 = R_23+R_54; R_0 = R_54+R_0;
    R_54 = R_69*R_43; R_54 = (1.0/480.0)*R_54; R_8 = R_8*R_69; R_8 = (1.0/192.0)*R_8;
    R_69 = R_32*R_69; R_69 = (-1.0/960.0)*R_69; R_49 = R_49+R_73; R_23 = -2.25*R_49;
    R_23 = R_17+R_23; R_38 = R_23+R_38; R_31 = R_31*R_38; R_31 = (-1.0/96.0)*R_31;
    R_23 = R_30*R_38; R_23 = (1.0/96.0)*R_23; R_38 = R_38*R_24; R_38 = (-1.0/960.0)*R_38;
    R_49 = -13.5*R_49; R_50 = R_49+R_50; R_29 = R_29*R_50; R_29 = (1.0/192.0)*R_29;
    R_29 = R_0+R_29; R_11 = R_29+R_11; R_45 = R_11+R_45; R_34 = R_45+R_34;
    R_22 = R_34+R_22; R_24 = R_50*R_24; R_24 = (7.0/2880.0)*R_24; R_50 = R_30*R_50;
    R_50 = (-1.0/960.0)*R_50; R_72 = R_73+R_72; R_73 = (-13.0/32.0)*R_72; R_73 = R_64+R_73;
    R_73 = R_73*R_43; R_73 = (-1.0/96.0)*R_73; R_64 = (13.0/32.0)*R_72; R_64 = R_68+R_64;
    R_68 = R_64*R_43; R_68 = (1.0/96.0)*R_68; R_30 = R_64*R_32; R_30 = (-1.0/12.0)*R_30;
    R_21 = R_21*R_64; R_21 = 0.5*R_21; R_64 = R_59*R_64; R_64 = (1.0/24.0)*R_64;
    R_34 = 1.125*R_72; R_34 = R_41+R_34; R_15 = R_34+R_15; R_15 = R_15*R_43;
    R_15 = (1.0/192.0)*R_15; R_72 = -1.125*R_72; R_67 = R_72+R_67; R_18 = R_67+R_18;
    R_55 = R_18+R_55; R_32 = R_55*R_32; R_32 = (1.0/24.0)*R_32; R_32 = R_22+R_32;
    R_30 = R_32+R_30; R_66 = R_30+R_66; R_68 = R_66+R_68; R_61 = R_68+R_61;
    R_28 = R_61+R_28; R_6 = R_28+R_6; R_39 = R_6+R_39; R_14 = R_39+R_14;
    R_14 = R_2+R_14; R_53 = R_14+R_53; R_53 = R_73+R_53; R_53 = R_31+R_53;
    R_53 = R_65+R_53; R_53 = R_27+R_53; R_53 = R_21+R_53; R_53 = R_54+R_53;
    R_53 = R_20+R_53; R_53 = R_23+R_53; R_53 = R_47+R_53; R_53 = R_63+R_53;
    R_53 = R_64+R_53; R_53 = R_35+R_53; R_53 = R_8+R_53; R_53 = R_15+R_53;
    R_53 = R_57+R_53; R_12 = R_53+R_12; R_12 = R_24+R_12; R_71 = R_12+R_71;
    R_59 = R_55*R_59; R_59 = (-1.0/80.0)*R_59; R_71 = R_59+R_71; R_71 = R_46+R_71;
    R_71 = R_33+R_71; R_16 = R_71+R_16; R_16 = R_19+R_16; R_16 = R_60+R_16;
    R_16 = R_51+R_16; R_9 = R_16+R_9; R_9 = R_69+R_9; R_9 = R_38+R_9;
    R_9 = R_50+R_9; R_43 = R_55*R_43; R_43 = (-1.0/960.0)*R_43; R_9 = R_43+R_9;
    res := R_9; 
    return res
