static const nvi := 1
static const nb_nodes := 10
static const nb_vertex_nodes := 2
static const center_of_var_inter := [ 1.0/2.0 ]
#
def interpolation( var_inter, val, interpolation_base )
    if interpolation_base == "lagrange"
        return (252+((1959363.0/40.0+((91020753.0/160.0+(var_inter[0]*(16474671.0/20.0+var_inter[0]*(14348907.0/160.0*var_inter[0]-33480783.0/80.0))-71035947.0/80.0)*var_inter[0])*var_inter[0]-8776431.0/40.0)*var_inter[0])*var_inter[0]-56601.0/10.0)*var_inter[0])*var_inter[0]*val[3]+(1+((58635.0/224.0+((623295.0/128.0+((885735.0/64.0+((4782969.0/896.0-4782969.0/4480.0*var_inter[0])*var_inter[0]-5137263.0/448.0)*var_inter[0])*var_inter[0]-6589431.0/640.0)*var_inter[0])*var_inter[0]-40707.0/28.0)*var_inter[0])*var_inter[0]-7129.0/280.0)*var_inter[0])*val[0]+val[1]*var_inter[0]*(81+var_inter[0]*(var_inter[0]*(10307331.0/1120.0+var_inter[0]*(var_inter[0]*(51221727.0/640.0+var_inter[0]*(var_inter[0]*(31355019.0/320.0+var_inter[0]*(43046721.0/4480.0*var_inter[0]-52612659.0/1120.0))-4546773.0/40.0))-5589243.0/160.0))-373329.0/280.0))+val[2]*var_inter[0]*(var_inter[0]*(475389.0/140.0+var_inter[0]*(var_inter[0]*(18152829.0/160.0+var_inter[0]*(var_inter[0]*(33244587.0/80.0+var_inter[0]*(var_inter[0]*(205667667.0/1120.0-43046721.0/1120.0*var_inter[0])-3720087.0/10.0))-44529507.0/160.0))-15190173.0/560.0))-162)+val[4]*var_inter[0]*(var_inter[0]*(526419.0/80.0+var_inter[0]*(var_inter[0]*(89119521.0/320.0+var_inter[0]*(var_inter[0]*(195629337.0/160.0+var_inter[0]*(var_inter[0]*(196101729.0/320.0-43046721.0/320.0*var_inter[0])-187598673.0/160.0))-241241409.0/320.0))-4752351.0/80.0))-567.0/2.0)+val[5]*var_inter[0]*(1134.0/5.0+var_inter[0]*(var_inter[0]*(795339.0/16.0+var_inter[0]*(var_inter[0]*(215023653.0/320.0+var_inter[0]*(var_inter[0]*(35606547.0/32.0+var_inter[0]*(43046721.0/320.0*var_inter[0]-4782969.0/8.0))-18009945.0/16.0))-3844017.0/16.0))-21465.0/4.0))+val[6]*var_inter[0]*(var_inter[0]*(60381.0/20.0+var_inter[0]*(var_inter[0]*(22480173.0/160.0+var_inter[0]*(var_inter[0]*(55447011.0/80.0+var_inter[0]*(var_inter[0]*(62178597.0/160.0-14348907.0/160.0*var_inter[0])-28166373.0/40.0))-64448703.0/160.0))-2276289.0/80.0))-126)+val[7]*var_inter[0]*(324.0/7.0+var_inter[0]*(var_inter[0]*(2989629.0/280.0+var_inter[0]*(var_inter[0]*(25043337.0/160.0+var_inter[0]*(var_inter[0]*(80247591.0/280.0+var_inter[0]*(43046721.0/1120.0*var_inter[0]-90876411.0/560.0))-22025277.0/80.0))-2142531.0/40.0))-78327.0/70.0))+val[8]*var_inter[0]*(var_inter[0]*(275967.0/1120.0+var_inter[0]*(var_inter[0]*(7712091.0/640.0+var_inter[0]*(var_inter[0]*(20490003.0/320.0+var_inter[0]*(var_inter[0]*(176969853.0/4480.0-43046721.0/4480.0*var_inter[0])-21789081.0/320.0))-22878207.0/640.0))-1328967.0/560.0))-81.0/8.0)+val[9]*var_inter[0]*(1+var_inter[0]*(var_inter[0]*(265779.0/1120.0+var_inter[0]*(var_inter[0]*(2337903.0/640.0+var_inter[0]*(var_inter[0]*(2302911.0/320.0+var_inter[0]*(4782969.0/4480.0*var_inter[0]-4782969.0/1120.0))-531441.0/80.0))-194643.0/160.0))-6849.0/280.0))
    else if interpolation_base == "hierarchical"
        return val[8]*var_inter[0]*(var_inter[0]*(275967.0/1120.0+var_inter[0]*(var_inter[0]*(7712091.0/640.0+var_inter[0]*(var_inter[0]*(20490003.0/320.0+var_inter[0]*(var_inter[0]*(176969853.0/4480.0-43046721.0/4480.0*var_inter[0])-21789081.0/320.0))-22878207.0/640.0))-1328967.0/560.0))-81.0/8.0)+val[7]*var_inter[0]*(324.0/7.0+var_inter[0]*(var_inter[0]*(2989629.0/280.0+var_inter[0]*(var_inter[0]*(25043337.0/160.0+var_inter[0]*(var_inter[0]*(80247591.0/280.0+var_inter[0]*(43046721.0/1120.0*var_inter[0]-90876411.0/560.0))-22025277.0/80.0))-2142531.0/40.0))-78327.0/70.0))+val[6]*var_inter[0]*(var_inter[0]*(60381.0/20.0+var_inter[0]*(var_inter[0]*(22480173.0/160.0+var_inter[0]*(var_inter[0]*(55447011.0/80.0+var_inter[0]*(var_inter[0]*(62178597.0/160.0-14348907.0/160.0*var_inter[0])-28166373.0/40.0))-64448703.0/160.0))-2276289.0/80.0))-126)+val[5]*var_inter[0]*(1134.0/5.0+var_inter[0]*(var_inter[0]*(795339.0/16.0+var_inter[0]*(var_inter[0]*(215023653.0/320.0+var_inter[0]*(var_inter[0]*(35606547.0/32.0+var_inter[0]*(43046721.0/320.0*var_inter[0]-4782969.0/8.0))-18009945.0/16.0))-3844017.0/16.0))-21465.0/4.0))+val[4]*var_inter[0]*(var_inter[0]*(526419.0/80.0+var_inter[0]*(var_inter[0]*(89119521.0/320.0+var_inter[0]*(var_inter[0]*(195629337.0/160.0+var_inter[0]*(var_inter[0]*(196101729.0/320.0-43046721.0/320.0*var_inter[0])-187598673.0/160.0))-241241409.0/320.0))-4752351.0/80.0))-567.0/2.0)+(252+((1959363.0/40.0+((91020753.0/160.0+(var_inter[0]*(16474671.0/20.0+var_inter[0]*(14348907.0/160.0*var_inter[0]-33480783.0/80.0))-71035947.0/80.0)*var_inter[0])*var_inter[0]-8776431.0/40.0)*var_inter[0])*var_inter[0]-56601.0/10.0)*var_inter[0])*var_inter[0]*val[3]+val[0]*(1-var_inter[0])+val[1]*var_inter[0]*(81+var_inter[0]*(var_inter[0]*(10307331.0/1120.0+var_inter[0]*(var_inter[0]*(51221727.0/640.0+var_inter[0]*(var_inter[0]*(31355019.0/320.0+var_inter[0]*(43046721.0/4480.0*var_inter[0]-52612659.0/1120.0))-4546773.0/40.0))-5589243.0/160.0))-373329.0/280.0))+val[2]*var_inter[0]*(var_inter[0]*(475389.0/140.0+var_inter[0]*(var_inter[0]*(18152829.0/160.0+var_inter[0]*(var_inter[0]*(33244587.0/80.0+var_inter[0]*(var_inter[0]*(205667667.0/1120.0-43046721.0/1120.0*var_inter[0])-3720087.0/10.0))-44529507.0/160.0))-15190173.0/560.0))-162)+var_inter[0]*val[9]

#
def generic_interpolation( var_inter, val, interpolation_base, deg ) when deg == 9
    if interpolation_base == "lagrange"
        return val[2]*var_inter[0]*(var_inter[0]*(475389.0/140.0+var_inter[0]*(var_inter[0]*(18152829.0/160.0+var_inter[0]*(var_inter[0]*(33244587.0/80.0+var_inter[0]*(var_inter[0]*(205667667.0/1120.0-43046721.0/1120.0*var_inter[0])-3720087.0/10.0))-44529507.0/160.0))-15190173.0/560.0))-162)+val[1]*var_inter[0]*(81+var_inter[0]*(var_inter[0]*(10307331.0/1120.0+var_inter[0]*(var_inter[0]*(51221727.0/640.0+var_inter[0]*(var_inter[0]*(31355019.0/320.0+var_inter[0]*(43046721.0/4480.0*var_inter[0]-52612659.0/1120.0))-4546773.0/40.0))-5589243.0/160.0))-373329.0/280.0))+(1+((58635.0/224.0+((623295.0/128.0+((885735.0/64.0+((4782969.0/896.0-4782969.0/4480.0*var_inter[0])*var_inter[0]-5137263.0/448.0)*var_inter[0])*var_inter[0]-6589431.0/640.0)*var_inter[0])*var_inter[0]-40707.0/28.0)*var_inter[0])*var_inter[0]-7129.0/280.0)*var_inter[0])*val[0]+(252+((1959363.0/40.0+((91020753.0/160.0+(var_inter[0]*(16474671.0/20.0+var_inter[0]*(14348907.0/160.0*var_inter[0]-33480783.0/80.0))-71035947.0/80.0)*var_inter[0])*var_inter[0]-8776431.0/40.0)*var_inter[0])*var_inter[0]-56601.0/10.0)*var_inter[0])*var_inter[0]*val[3]+var_inter[0]*(var_inter[0]*(526419.0/80.0+var_inter[0]*(var_inter[0]*(89119521.0/320.0+var_inter[0]*(var_inter[0]*(195629337.0/160.0+var_inter[0]*(var_inter[0]*(196101729.0/320.0-43046721.0/320.0*var_inter[0])-187598673.0/160.0))-241241409.0/320.0))-4752351.0/80.0))-567.0/2.0)*val[4]+var_inter[0]*(1134.0/5.0+var_inter[0]*(var_inter[0]*(795339.0/16.0+var_inter[0]*(var_inter[0]*(215023653.0/320.0+var_inter[0]*(var_inter[0]*(35606547.0/32.0+var_inter[0]*(43046721.0/320.0*var_inter[0]-4782969.0/8.0))-18009945.0/16.0))-3844017.0/16.0))-21465.0/4.0))*val[5]+var_inter[0]*(var_inter[0]*(60381.0/20.0+var_inter[0]*(var_inter[0]*(22480173.0/160.0+var_inter[0]*(var_inter[0]*(55447011.0/80.0+var_inter[0]*(var_inter[0]*(62178597.0/160.0-14348907.0/160.0*var_inter[0])-28166373.0/40.0))-64448703.0/160.0))-2276289.0/80.0))-126)*val[6]+var_inter[0]*(324.0/7.0+var_inter[0]*(var_inter[0]*(2989629.0/280.0+var_inter[0]*(var_inter[0]*(25043337.0/160.0+var_inter[0]*(var_inter[0]*(80247591.0/280.0+var_inter[0]*(43046721.0/1120.0*var_inter[0]-90876411.0/560.0))-22025277.0/80.0))-2142531.0/40.0))-78327.0/70.0))*val[7]+var_inter[0]*(var_inter[0]*(275967.0/1120.0+var_inter[0]*(var_inter[0]*(7712091.0/640.0+var_inter[0]*(var_inter[0]*(20490003.0/320.0+var_inter[0]*(var_inter[0]*(176969853.0/4480.0-43046721.0/4480.0*var_inter[0])-21789081.0/320.0))-22878207.0/640.0))-1328967.0/560.0))-81.0/8.0)*val[8]+var_inter[0]*(1+var_inter[0]*(var_inter[0]*(265779.0/1120.0+var_inter[0]*(var_inter[0]*(2337903.0/640.0+var_inter[0]*(var_inter[0]*(2302911.0/320.0+var_inter[0]*(4782969.0/4480.0*var_inter[0]-4782969.0/1120.0))-531441.0/80.0))-194643.0/160.0))-6849.0/280.0))*val[9]
    else if interpolation_base == "hierarchical"
        return val[1]*var_inter[0]*(81+var_inter[0]*(var_inter[0]*(10307331.0/1120.0+var_inter[0]*(var_inter[0]*(51221727.0/640.0+var_inter[0]*(var_inter[0]*(31355019.0/320.0+var_inter[0]*(43046721.0/4480.0*var_inter[0]-52612659.0/1120.0))-4546773.0/40.0))-5589243.0/160.0))-373329.0/280.0))+(1-var_inter[0])*val[0]+val[2]*var_inter[0]*(var_inter[0]*(475389.0/140.0+var_inter[0]*(var_inter[0]*(18152829.0/160.0+var_inter[0]*(var_inter[0]*(33244587.0/80.0+var_inter[0]*(var_inter[0]*(205667667.0/1120.0-43046721.0/1120.0*var_inter[0])-3720087.0/10.0))-44529507.0/160.0))-15190173.0/560.0))-162)+(252+((1959363.0/40.0+((91020753.0/160.0+(var_inter[0]*(16474671.0/20.0+var_inter[0]*(14348907.0/160.0*var_inter[0]-33480783.0/80.0))-71035947.0/80.0)*var_inter[0])*var_inter[0]-8776431.0/40.0)*var_inter[0])*var_inter[0]-56601.0/10.0)*var_inter[0])*var_inter[0]*val[3]+var_inter[0]*(var_inter[0]*(526419.0/80.0+var_inter[0]*(var_inter[0]*(89119521.0/320.0+var_inter[0]*(var_inter[0]*(195629337.0/160.0+var_inter[0]*(var_inter[0]*(196101729.0/320.0-43046721.0/320.0*var_inter[0])-187598673.0/160.0))-241241409.0/320.0))-4752351.0/80.0))-567.0/2.0)*val[4]+var_inter[0]*(1134.0/5.0+var_inter[0]*(var_inter[0]*(795339.0/16.0+var_inter[0]*(var_inter[0]*(215023653.0/320.0+var_inter[0]*(var_inter[0]*(35606547.0/32.0+var_inter[0]*(43046721.0/320.0*var_inter[0]-4782969.0/8.0))-18009945.0/16.0))-3844017.0/16.0))-21465.0/4.0))*val[5]+var_inter[0]*(var_inter[0]*(60381.0/20.0+var_inter[0]*(var_inter[0]*(22480173.0/160.0+var_inter[0]*(var_inter[0]*(55447011.0/80.0+var_inter[0]*(var_inter[0]*(62178597.0/160.0-14348907.0/160.0*var_inter[0])-28166373.0/40.0))-64448703.0/160.0))-2276289.0/80.0))-126)*val[6]+var_inter[0]*(324.0/7.0+var_inter[0]*(var_inter[0]*(2989629.0/280.0+var_inter[0]*(var_inter[0]*(25043337.0/160.0+var_inter[0]*(var_inter[0]*(80247591.0/280.0+var_inter[0]*(43046721.0/1120.0*var_inter[0]-90876411.0/560.0))-22025277.0/80.0))-2142531.0/40.0))-78327.0/70.0))*val[7]+var_inter[0]*(var_inter[0]*(275967.0/1120.0+var_inter[0]*(var_inter[0]*(7712091.0/640.0+var_inter[0]*(var_inter[0]*(20490003.0/320.0+var_inter[0]*(var_inter[0]*(176969853.0/4480.0-43046721.0/4480.0*var_inter[0])-21789081.0/320.0))-22878207.0/640.0))-1328967.0/560.0))-81.0/8.0)*val[8]+var_inter[0]*val[9]

#
def interpolation_vertex( var_inter, val_vertex )
    return val_vertex[0]*(1-var_inter[0])+val_vertex[1]*var_inter[0]
#
def nb_children( sub_nvi ) when sub_nvi==0
    return 1
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==0
    return child_var_inter
def type_child( sub_nvi, num_child ) when sub_nvi==0
    return BarGeneric[Int32]
def node_number_child( sub_nvi, num_child ) when sub_nvi==0
    return 0 .. 10
#
def nb_children( sub_nvi ) when sub_nvi==1
    return 2
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==0
    return [0]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return [0]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==1
    return [1]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return [9]
def normal( var_inter, pos_nodes )
    assert( 0, "normal is defined only for nb_dim == nvi + 1" )
#
def jac_mat( var_inter, pos_nodes )
    res := Mat[ type_promote(var_inter[0],pos_nodes[0][0],mul), Gen[ 1, 1 ] ]()
    R_0 := pos_nodes[9][0]; R_1 := pos_nodes[8][0]; R_2 := pos_nodes[7][0]; R_3 := pos_nodes[6][0];
    R_4 := pos_nodes[4][0]; R_5 := pos_nodes[3][0]; R_6 := pos_nodes[0][0]; R_7 := pos_nodes[1][0];
    R_8 := pos_nodes[2][0]; R_9 := var_inter[0]; R_10 := (43046721.0/4480.0)*R_9; R_10 = (-4782969.0/140.0)+R_10;
    R_10 = R_9*R_10; R_10 = (16120377.0/320.0)+R_10; R_10 = R_9*R_10; R_10 = (-1594323.0/40.0)+R_10;
    R_10 = R_9*R_10; R_10 = (2337903.0/128.0)+R_10; R_10 = R_9*R_10; R_10 = (-194643.0/40.0)+R_10;
    R_10 = R_9*R_10; R_10 = (797337.0/1120.0)+R_10; R_10 = R_9*R_10; R_10 = (-6849.0/140.0)+R_10;
    R_10 = R_9*R_10; R_10 = 1.0+R_10; R_10 = R_0*R_10; R_0 = (-387420489.0/4480.0)*R_9;
    R_0 = (176969853.0/560.0)+R_0; R_0 = R_9*R_0; R_0 = (-152523567.0/320.0)+R_0; R_0 = R_9*R_0;
    R_0 = (61470009.0/160.0)+R_0; R_0 = R_9*R_0; R_0 = (-22878207.0/128.0)+R_0; R_0 = R_9*R_0;
    R_0 = (7712091.0/160.0)+R_0; R_0 = R_9*R_0; R_0 = (-3986901.0/560.0)+R_0; R_0 = R_9*R_0;
    R_0 = (275967.0/560.0)+R_0; R_0 = R_9*R_0; R_0 = -10.125+R_0; R_0 = R_1*R_0;
    R_1 = (387420489.0/1120.0)*R_9; R_1 = (-90876411.0/70.0)+R_1; R_1 = R_9*R_1; R_1 = (80247591.0/40.0)+R_1;
    R_1 = R_9*R_1; R_1 = (-66075831.0/40.0)+R_1; R_1 = R_9*R_1; R_1 = (25043337.0/32.0)+R_1;
    R_1 = R_9*R_1; R_1 = (-2142531.0/10.0)+R_1; R_1 = R_9*R_1; R_1 = (8968887.0/280.0)+R_1;
    R_1 = R_9*R_1; R_1 = (-78327.0/35.0)+R_1; R_1 = R_9*R_1; R_1 = (324.0/7.0)+R_1;
    R_1 = R_2*R_1; R_2 = (-129140163.0/160.0)*R_9; R_2 = (62178597.0/20.0)+R_2; R_2 = R_9*R_2;
    R_2 = (-197164611.0/40.0)+R_2; R_2 = R_9*R_2; R_2 = (166341033.0/40.0)+R_2; R_2 = R_9*R_2;
    R_2 = (-64448703.0/32.0)+R_2; R_2 = R_9*R_2; R_2 = (22480173.0/40.0)+R_2; R_2 = R_9*R_2;
    R_2 = (-6828867.0/80.0)+R_2; R_2 = R_9*R_2; R_2 = (60381.0/10.0)+R_2; R_2 = R_9*R_2;
    R_2 = (-126.0)+R_2; R_2 = R_3*R_2; R_3 = (-387420489.0/320.0)*R_9; R_3 = (196101729.0/40.0)+R_3;
    R_3 = R_9*R_3; R_3 = (-1313190711.0/160.0)+R_3; R_3 = R_9*R_3; R_3 = (586888011.0/80.0)+R_3;
    R_3 = R_9*R_3; R_3 = (-241241409.0/64.0)+R_3; R_3 = R_9*R_3; R_3 = (89119521.0/80.0)+R_3;
    R_3 = R_9*R_3; R_3 = (-14257053.0/80.0)+R_3; R_3 = R_9*R_3; R_3 = (526419.0/40.0)+R_3;
    R_3 = R_9*R_3; R_3 = -283.5+R_3; R_3 = R_4*R_3; R_4 = (129140163.0/160.0)*R_9;
    R_4 = (-33480783.0/10.0)+R_4; R_4 = R_9*R_4; R_4 = (115322697.0/20.0)+R_4; R_4 = R_9*R_4;
    R_4 = (-213107841.0/40.0)+R_4; R_4 = R_9*R_4; R_4 = (91020753.0/32.0)+R_4; R_4 = R_9*R_4;
    R_4 = (-8776431.0/10.0)+R_4; R_4 = R_9*R_4; R_4 = (5878089.0/40.0)+R_4; R_4 = R_9*R_4;
    R_4 = (-56601.0/5.0)+R_4; R_4 = R_9*R_4; R_4 = 252.0+R_4; R_4 = R_5*R_4;
    R_5 = (-43046721.0/4480.0)*R_9; R_5 = (4782969.0/112.0)+R_5; R_5 = R_9*R_5; R_5 = (-5137263.0/64.0)+R_5;
    R_5 = R_9*R_5; R_5 = (2657205.0/32.0)+R_5; R_5 = R_9*R_5; R_5 = (-6589431.0/128.0)+R_5;
    R_5 = R_9*R_5; R_5 = (623295.0/32.0)+R_5; R_5 = R_9*R_5; R_5 = (-122121.0/28.0)+R_5;
    R_5 = R_9*R_5; R_5 = (58635.0/112.0)+R_5; R_5 = R_9*R_5; R_5 = (-7129.0/280.0)+R_5;
    R_5 = R_6*R_5; R_6 = (387420489.0/4480.0)*R_9; R_6 = (-52612659.0/140.0)+R_6; R_6 = R_9*R_6;
    R_6 = (219485133.0/320.0)+R_6; R_6 = R_9*R_6; R_6 = (-13640319.0/20.0)+R_6; R_6 = R_9*R_6;
    R_6 = (51221727.0/128.0)+R_6; R_6 = R_9*R_6; R_6 = (-5589243.0/40.0)+R_6; R_6 = R_9*R_6;
    R_6 = (30921993.0/1120.0)+R_6; R_6 = R_9*R_6; R_6 = (-373329.0/140.0)+R_6; R_6 = R_9*R_6;
    R_6 = 81.0+R_6; R_6 = R_7*R_6; R_5 = R_6+R_5; R_6 = (-387420489.0/1120.0)*R_9;
    R_6 = (205667667.0/140.0)+R_6; R_6 = R_6*R_9; R_6 = (-26040609.0/10.0)+R_6; R_6 = R_6*R_9;
    R_6 = (99733761.0/40.0)+R_6; R_6 = R_6*R_9; R_6 = (-44529507.0/32.0)+R_6; R_6 = R_6*R_9;
    R_6 = (18152829.0/40.0)+R_6; R_6 = R_6*R_9; R_6 = (-45570519.0/560.0)+R_6; R_6 = R_6*R_9;
    R_6 = (475389.0/70.0)+R_6; R_6 = R_6*R_9; R_6 = (-162.0)+R_6; R_6 = R_8*R_6;
    R_5 = R_6+R_5; R_4 = R_5+R_4; R_3 = R_4+R_3; R_4 = (387420489.0/320.0)*R_9;
    R_4 = (-4782969.0)+R_4; R_4 = R_9*R_4; R_4 = (249245829.0/32.0)+R_4; R_4 = R_9*R_4;
    R_4 = -6.75373e+06+R_4; R_4 = R_9*R_4; R_4 = (215023653.0/64.0)+R_4; R_4 = R_9*R_4;
    R_4 = -961004+R_4; R_4 = R_9*R_4; R_4 = (2386017.0/16.0)+R_4; R_4 = R_9*R_4;
    R_4 = -10732.5+R_4; R_4 = R_9*R_4; R_4 = (1134.0/5.0)+R_4; R_9 = pos_nodes[5][0];
    R_4 = R_9*R_4; R_3 = R_4+R_3; R_2 = R_3+R_2; R_1 = R_2+R_1;
    R_0 = R_1+R_0; R_10 = R_0+R_10; res(0,0) = R_10; 
    return res
#
def jac( var_inter, pos_nodes )
    R_0 := pos_nodes[9][0]; R_1 := pos_nodes[8][0]; R_2 := pos_nodes[7][0]; R_3 := pos_nodes[6][0];
    R_4 := pos_nodes[4][0]; R_5 := pos_nodes[3][0]; R_6 := pos_nodes[0][0]; R_7 := pos_nodes[1][0];
    R_8 := pos_nodes[2][0]; R_9 := var_inter[0]; R_10 := (43046721.0/4480.0)*R_9; R_10 = (-4782969.0/140.0)+R_10;
    R_10 = R_9*R_10; R_10 = (16120377.0/320.0)+R_10; R_10 = R_9*R_10; R_10 = (-1594323.0/40.0)+R_10;
    R_10 = R_9*R_10; R_10 = (2337903.0/128.0)+R_10; R_10 = R_9*R_10; R_10 = (-194643.0/40.0)+R_10;
    R_10 = R_9*R_10; R_10 = (797337.0/1120.0)+R_10; R_10 = R_9*R_10; R_10 = (-6849.0/140.0)+R_10;
    R_10 = R_9*R_10; R_10 = 1.0+R_10; R_10 = R_0*R_10; R_0 = (-387420489.0/4480.0)*R_9;
    R_0 = (176969853.0/560.0)+R_0; R_0 = R_9*R_0; R_0 = (-152523567.0/320.0)+R_0; R_0 = R_9*R_0;
    R_0 = (61470009.0/160.0)+R_0; R_0 = R_9*R_0; R_0 = (-22878207.0/128.0)+R_0; R_0 = R_9*R_0;
    R_0 = (7712091.0/160.0)+R_0; R_0 = R_9*R_0; R_0 = (-3986901.0/560.0)+R_0; R_0 = R_9*R_0;
    R_0 = (275967.0/560.0)+R_0; R_0 = R_9*R_0; R_0 = -10.125+R_0; R_0 = R_1*R_0;
    R_1 = (387420489.0/1120.0)*R_9; R_1 = (-90876411.0/70.0)+R_1; R_1 = R_9*R_1; R_1 = (80247591.0/40.0)+R_1;
    R_1 = R_9*R_1; R_1 = (-66075831.0/40.0)+R_1; R_1 = R_9*R_1; R_1 = (25043337.0/32.0)+R_1;
    R_1 = R_9*R_1; R_1 = (-2142531.0/10.0)+R_1; R_1 = R_9*R_1; R_1 = (8968887.0/280.0)+R_1;
    R_1 = R_9*R_1; R_1 = (-78327.0/35.0)+R_1; R_1 = R_9*R_1; R_1 = (324.0/7.0)+R_1;
    R_1 = R_2*R_1; R_2 = (-129140163.0/160.0)*R_9; R_2 = (62178597.0/20.0)+R_2; R_2 = R_9*R_2;
    R_2 = (-197164611.0/40.0)+R_2; R_2 = R_9*R_2; R_2 = (166341033.0/40.0)+R_2; R_2 = R_9*R_2;
    R_2 = (-64448703.0/32.0)+R_2; R_2 = R_9*R_2; R_2 = (22480173.0/40.0)+R_2; R_2 = R_9*R_2;
    R_2 = (-6828867.0/80.0)+R_2; R_2 = R_9*R_2; R_2 = (60381.0/10.0)+R_2; R_2 = R_9*R_2;
    R_2 = (-126.0)+R_2; R_2 = R_3*R_2; R_3 = (-387420489.0/320.0)*R_9; R_3 = (196101729.0/40.0)+R_3;
    R_3 = R_9*R_3; R_3 = (-1313190711.0/160.0)+R_3; R_3 = R_9*R_3; R_3 = (586888011.0/80.0)+R_3;
    R_3 = R_9*R_3; R_3 = (-241241409.0/64.0)+R_3; R_3 = R_9*R_3; R_3 = (89119521.0/80.0)+R_3;
    R_3 = R_9*R_3; R_3 = (-14257053.0/80.0)+R_3; R_3 = R_9*R_3; R_3 = (526419.0/40.0)+R_3;
    R_3 = R_9*R_3; R_3 = -283.5+R_3; R_3 = R_4*R_3; R_4 = (129140163.0/160.0)*R_9;
    R_4 = (-33480783.0/10.0)+R_4; R_4 = R_9*R_4; R_4 = (115322697.0/20.0)+R_4; R_4 = R_9*R_4;
    R_4 = (-213107841.0/40.0)+R_4; R_4 = R_9*R_4; R_4 = (91020753.0/32.0)+R_4; R_4 = R_9*R_4;
    R_4 = (-8776431.0/10.0)+R_4; R_4 = R_9*R_4; R_4 = (5878089.0/40.0)+R_4; R_4 = R_9*R_4;
    R_4 = (-56601.0/5.0)+R_4; R_4 = R_9*R_4; R_4 = 252.0+R_4; R_4 = R_5*R_4;
    R_5 = (-43046721.0/4480.0)*R_9; R_5 = (4782969.0/112.0)+R_5; R_5 = R_9*R_5; R_5 = (-5137263.0/64.0)+R_5;
    R_5 = R_9*R_5; R_5 = (2657205.0/32.0)+R_5; R_5 = R_9*R_5; R_5 = (-6589431.0/128.0)+R_5;
    R_5 = R_9*R_5; R_5 = (623295.0/32.0)+R_5; R_5 = R_9*R_5; R_5 = (-122121.0/28.0)+R_5;
    R_5 = R_9*R_5; R_5 = (58635.0/112.0)+R_5; R_5 = R_9*R_5; R_5 = (-7129.0/280.0)+R_5;
    R_5 = R_6*R_5; R_6 = (387420489.0/4480.0)*R_9; R_6 = (-52612659.0/140.0)+R_6; R_6 = R_9*R_6;
    R_6 = (219485133.0/320.0)+R_6; R_6 = R_9*R_6; R_6 = (-13640319.0/20.0)+R_6; R_6 = R_9*R_6;
    R_6 = (51221727.0/128.0)+R_6; R_6 = R_9*R_6; R_6 = (-5589243.0/40.0)+R_6; R_6 = R_9*R_6;
    R_6 = (30921993.0/1120.0)+R_6; R_6 = R_9*R_6; R_6 = (-373329.0/140.0)+R_6; R_6 = R_9*R_6;
    R_6 = 81.0+R_6; R_6 = R_7*R_6; R_5 = R_6+R_5; R_6 = (-387420489.0/1120.0)*R_9;
    R_6 = (205667667.0/140.0)+R_6; R_6 = R_6*R_9; R_6 = (-26040609.0/10.0)+R_6; R_6 = R_6*R_9;
    R_6 = (99733761.0/40.0)+R_6; R_6 = R_6*R_9; R_6 = (-44529507.0/32.0)+R_6; R_6 = R_6*R_9;
    R_6 = (18152829.0/40.0)+R_6; R_6 = R_6*R_9; R_6 = (-45570519.0/560.0)+R_6; R_6 = R_6*R_9;
    R_6 = (475389.0/70.0)+R_6; R_6 = R_6*R_9; R_6 = (-162.0)+R_6; R_6 = R_8*R_6;
    R_5 = R_6+R_5; R_4 = R_5+R_4; R_3 = R_4+R_3; R_4 = (387420489.0/320.0)*R_9;
    R_4 = (-4782969.0)+R_4; R_4 = R_9*R_4; R_4 = (249245829.0/32.0)+R_4; R_4 = R_9*R_4;
    R_4 = -6.75373e+06+R_4; R_4 = R_9*R_4; R_4 = (215023653.0/64.0)+R_4; R_4 = R_9*R_4;
    R_4 = -961004+R_4; R_4 = R_9*R_4; R_4 = (2386017.0/16.0)+R_4; R_4 = R_9*R_4;
    R_4 = -10732.5+R_4; R_4 = R_9*R_4; R_4 = (1134.0/5.0)+R_4; R_9 = pos_nodes[5][0];
    R_4 = R_9*R_4; R_3 = R_4+R_3; R_2 = R_3+R_2; R_1 = R_2+R_1;
    R_0 = R_1+R_0; R_10 = R_0+R_10; res := R_10; 
    return res
#
def inv_jac_mat( var_inter, pos_nodes )
    res := Mat[ type_promote(var_inter[0],pos_nodes[0][0],mul), Gen[ 1, 1 ] ]()
    R_0 := pos_nodes[9][0]; R_1 := pos_nodes[8][0]; R_2 := pos_nodes[7][0]; R_3 := pos_nodes[6][0];
    R_4 := pos_nodes[4][0]; R_5 := pos_nodes[3][0]; R_6 := pos_nodes[0][0]; R_7 := pos_nodes[1][0];
    R_8 := pos_nodes[2][0]; R_9 := var_inter[0]; R_10 := (43046721.0/4480.0)*R_9; R_10 = (-4782969.0/140.0)+R_10;
    R_10 = R_9*R_10; R_10 = (16120377.0/320.0)+R_10; R_10 = R_9*R_10; R_10 = (-1594323.0/40.0)+R_10;
    R_10 = R_9*R_10; R_10 = (2337903.0/128.0)+R_10; R_10 = R_9*R_10; R_10 = (-194643.0/40.0)+R_10;
    R_10 = R_9*R_10; R_10 = (797337.0/1120.0)+R_10; R_10 = R_9*R_10; R_10 = (-6849.0/140.0)+R_10;
    R_10 = R_9*R_10; R_10 = 1.0+R_10; R_10 = R_0*R_10; R_0 = (-387420489.0/4480.0)*R_9;
    R_0 = (176969853.0/560.0)+R_0; R_0 = R_9*R_0; R_0 = (-152523567.0/320.0)+R_0; R_0 = R_9*R_0;
    R_0 = (61470009.0/160.0)+R_0; R_0 = R_9*R_0; R_0 = (-22878207.0/128.0)+R_0; R_0 = R_9*R_0;
    R_0 = (7712091.0/160.0)+R_0; R_0 = R_9*R_0; R_0 = (-3986901.0/560.0)+R_0; R_0 = R_9*R_0;
    R_0 = (275967.0/560.0)+R_0; R_0 = R_9*R_0; R_0 = -10.125+R_0; R_0 = R_1*R_0;
    R_1 = (387420489.0/1120.0)*R_9; R_1 = (-90876411.0/70.0)+R_1; R_1 = R_9*R_1; R_1 = (80247591.0/40.0)+R_1;
    R_1 = R_9*R_1; R_1 = (-66075831.0/40.0)+R_1; R_1 = R_9*R_1; R_1 = (25043337.0/32.0)+R_1;
    R_1 = R_9*R_1; R_1 = (-2142531.0/10.0)+R_1; R_1 = R_9*R_1; R_1 = (8968887.0/280.0)+R_1;
    R_1 = R_9*R_1; R_1 = (-78327.0/35.0)+R_1; R_1 = R_9*R_1; R_1 = (324.0/7.0)+R_1;
    R_1 = R_2*R_1; R_2 = (-129140163.0/160.0)*R_9; R_2 = (62178597.0/20.0)+R_2; R_2 = R_9*R_2;
    R_2 = (-197164611.0/40.0)+R_2; R_2 = R_9*R_2; R_2 = (166341033.0/40.0)+R_2; R_2 = R_9*R_2;
    R_2 = (-64448703.0/32.0)+R_2; R_2 = R_9*R_2; R_2 = (22480173.0/40.0)+R_2; R_2 = R_9*R_2;
    R_2 = (-6828867.0/80.0)+R_2; R_2 = R_9*R_2; R_2 = (60381.0/10.0)+R_2; R_2 = R_9*R_2;
    R_2 = (-126.0)+R_2; R_2 = R_3*R_2; R_3 = (-387420489.0/320.0)*R_9; R_3 = (196101729.0/40.0)+R_3;
    R_3 = R_9*R_3; R_3 = (-1313190711.0/160.0)+R_3; R_3 = R_9*R_3; R_3 = (586888011.0/80.0)+R_3;
    R_3 = R_9*R_3; R_3 = (-241241409.0/64.0)+R_3; R_3 = R_9*R_3; R_3 = (89119521.0/80.0)+R_3;
    R_3 = R_9*R_3; R_3 = (-14257053.0/80.0)+R_3; R_3 = R_9*R_3; R_3 = (526419.0/40.0)+R_3;
    R_3 = R_9*R_3; R_3 = -283.5+R_3; R_3 = R_4*R_3; R_4 = (129140163.0/160.0)*R_9;
    R_4 = (-33480783.0/10.0)+R_4; R_4 = R_9*R_4; R_4 = (115322697.0/20.0)+R_4; R_4 = R_9*R_4;
    R_4 = (-213107841.0/40.0)+R_4; R_4 = R_9*R_4; R_4 = (91020753.0/32.0)+R_4; R_4 = R_9*R_4;
    R_4 = (-8776431.0/10.0)+R_4; R_4 = R_9*R_4; R_4 = (5878089.0/40.0)+R_4; R_4 = R_9*R_4;
    R_4 = (-56601.0/5.0)+R_4; R_4 = R_9*R_4; R_4 = 252.0+R_4; R_4 = R_5*R_4;
    R_5 = (-43046721.0/4480.0)*R_9; R_5 = (4782969.0/112.0)+R_5; R_5 = R_9*R_5; R_5 = (-5137263.0/64.0)+R_5;
    R_5 = R_9*R_5; R_5 = (2657205.0/32.0)+R_5; R_5 = R_9*R_5; R_5 = (-6589431.0/128.0)+R_5;
    R_5 = R_9*R_5; R_5 = (623295.0/32.0)+R_5; R_5 = R_9*R_5; R_5 = (-122121.0/28.0)+R_5;
    R_5 = R_9*R_5; R_5 = (58635.0/112.0)+R_5; R_5 = R_9*R_5; R_5 = (-7129.0/280.0)+R_5;
    R_5 = R_6*R_5; R_6 = (387420489.0/4480.0)*R_9; R_6 = (-52612659.0/140.0)+R_6; R_6 = R_9*R_6;
    R_6 = (219485133.0/320.0)+R_6; R_6 = R_9*R_6; R_6 = (-13640319.0/20.0)+R_6; R_6 = R_9*R_6;
    R_6 = (51221727.0/128.0)+R_6; R_6 = R_9*R_6; R_6 = (-5589243.0/40.0)+R_6; R_6 = R_9*R_6;
    R_6 = (30921993.0/1120.0)+R_6; R_6 = R_9*R_6; R_6 = (-373329.0/140.0)+R_6; R_6 = R_9*R_6;
    R_6 = 81.0+R_6; R_6 = R_7*R_6; R_5 = R_6+R_5; R_6 = (-387420489.0/1120.0)*R_9;
    R_6 = (205667667.0/140.0)+R_6; R_6 = R_6*R_9; R_6 = (-26040609.0/10.0)+R_6; R_6 = R_6*R_9;
    R_6 = (99733761.0/40.0)+R_6; R_6 = R_6*R_9; R_6 = (-44529507.0/32.0)+R_6; R_6 = R_6*R_9;
    R_6 = (18152829.0/40.0)+R_6; R_6 = R_6*R_9; R_6 = (-45570519.0/560.0)+R_6; R_6 = R_6*R_9;
    R_6 = (475389.0/70.0)+R_6; R_6 = R_6*R_9; R_6 = (-162.0)+R_6; R_6 = R_8*R_6;
    R_5 = R_6+R_5; R_4 = R_5+R_4; R_3 = R_4+R_3; R_4 = (387420489.0/320.0)*R_9;
    R_4 = (-4782969.0)+R_4; R_4 = R_9*R_4; R_4 = (249245829.0/32.0)+R_4; R_4 = R_9*R_4;
    R_4 = -6.75373e+06+R_4; R_4 = R_9*R_4; R_4 = (215023653.0/64.0)+R_4; R_4 = R_9*R_4;
    R_4 = -961004+R_4; R_4 = R_9*R_4; R_4 = (2386017.0/16.0)+R_4; R_4 = R_9*R_4;
    R_4 = -10732.5+R_4; R_4 = R_9*R_4; R_4 = (1134.0/5.0)+R_4; R_9 = pos_nodes[5][0];
    R_4 = R_9*R_4; R_3 = R_4+R_3; R_2 = R_3+R_2; R_1 = R_2+R_1;
    R_0 = R_1+R_0; R_10 = R_0+R_10; R_10 = 1/R_10; res(0,0) = R_10;
    return res
#
def measure( var_inter, pos_nodes )
    R_0 := pos_nodes[6][0]; R_0 = (-2657205.0/8192.0)*R_0; R_1 := pos_nodes[8][0]; R_1 = (-531441.0/32768.0)*R_1;
    R_2 := pos_nodes[7][0]; R_2 = (31355019.0/286720.0)*R_2; R_3 := pos_nodes[5][0]; R_3 = (44109603.0/81920.0)*R_3;
    R_4 := pos_nodes[9][0]; R_4 = (1324027.0/1146880.0)*R_4; R_5 := pos_nodes[3][0]; R_5 = (2657205.0/8192.0)*R_5;
    R_4 = R_5+R_4; R_5 = pos_nodes[2][0]; R_5 = (-31355019.0/286720.0)*R_5; R_4 = R_5+R_4;
    R_5 = pos_nodes[4][0]; R_5 = (-44109603.0/81920.0)*R_5; R_4 = R_5+R_4; R_3 = R_4+R_3;
    R_2 = R_3+R_2; R_3 = pos_nodes[0][0]; R_3 = (-1324027.0/1146880.0)*R_3; R_2 = R_3+R_2;
    R_3 = pos_nodes[1][0]; R_3 = (531441.0/32768.0)*R_3; R_2 = R_3+R_2; R_1 = R_2+R_1;
    R_0 = R_1+R_0; res := R_0; 
    return res
