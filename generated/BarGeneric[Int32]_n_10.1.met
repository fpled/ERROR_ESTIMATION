static const nvi := 1
static const nb_nodes := 11
static const nb_vertex_nodes := 2
static const center_of_var_inter := [ 1.0/2.0 ]
#
def interpolation( var_inter, val, interpolation_base )
    if interpolation_base == "lagrange"
        return val[10]*var_inter[0]*(var_inter[0]*(7129.0/252.0+var_inter[0]*(var_inter[0]*(1130750.0/567.0+var_inter[0]*(var_inter[0]*(1883125.0/108.0+var_inter[0]*(var_inter[0]*(4531250.0/189.0+var_inter[0]*(1562500.0/567.0*var_inter[0]-781250.0/63.0))-78125.0/3.0))-59375.0/8.0))-162875.0/504.0))-1)+val[9]*var_inter[0]*(100.0/9.0+var_inter[0]*(var_inter[0]*(4033825.0/1134.0+var_inter[0]*(var_inter[0]*(4341875.0/54.0+var_inter[0]*(var_inter[0]*(7437500.0/27.0+var_inter[0]*(var_inter[0]*(71875000.0/567.0-15625000.0/567.0*var_inter[0])-47187500.0/189.0))-10090625.0/54.0))-24717625.0/1134.0))-6575.0/21.0))+val[8]*var_inter[0]*(var_inter[0]*(88325.0/56.0+var_inter[0]*(var_inter[0]*(54486625.0/504.0+var_inter[0]*(var_inter[0]*(32584375.0/36.0+var_inter[0]*(var_inter[0]*(73750000.0/63.0+var_inter[0]*(7812500.0/63.0*var_inter[0]-36718750.0/63.0))-11828125.0/9.0))-28405625.0/72.0))-996675.0/56.0))-225.0/4.0)+var_inter[0]*(var_inter[0]*(168775.0/12.0+var_inter[0]*(var_inter[0]*(91073375.0/108.0+var_inter[0]*(var_inter[0]*(107321875.0/18.0+var_inter[0]*(var_inter[0]*(19375000.0/3.0+var_inter[0]*(15625000.0/27.0*var_inter[0]-26562500.0/9.0))-71281250.0/9.0))-102070625.0/36.0))-1792225.0/12.0))-525)*val[4]+val[2]*var_inter[0]*(var_inter[0]*(153025.0/28.0+var_inter[0]*(var_inter[0]*(33095875.0/126.0+var_inter[0]*(var_inter[0]*(56396875.0/36.0+var_inter[0]*(var_inter[0]*(94843750.0/63.0+var_inter[0]*(7812500.0/63.0*var_inter[0]-41406250.0/63.0))-17546875.0/9.0))-57981875.0/72.0))-2898075.0/56.0))-225)+val[0]*(1+var_inter[0]*(var_inter[0]*(177133.0/504.0+var_inter[0]*(var_inter[0]*(42711625.0/4536.0+var_inter[0]*(var_inter[0]*(4695625.0/108.0+var_inter[0]*(var_inter[0]*(6875000.0/189.0+var_inter[0]*(1562500.0/567.0*var_inter[0]-8593750.0/567.0))-9453125.0/189.0))-5369375.0/216.0))-10511875.0/4536.0))-7381.0/252.0))+val[1]*var_inter[0]*(100+var_inter[0]*(var_inter[0]*(1997825.0/126.0+var_inter[0]*(var_inter[0]*(3775625.0/18.0+var_inter[0]*(var_inter[0]*(4187500.0/9.0+var_inter[0]*(var_inter[0]*(3125000.0/21.0-15625000.0/567.0*var_inter[0])-65937500.0/189.0))-20965625.0/54.0))-82992625.0/1134.0))-121525.0/63.0))+val[3]*var_inter[0]*(400+var_inter[0]*(var_inter[0]*(20028950.0/189.0+var_inter[0]*(var_inter[0]*(16686250.0/9.0+var_inter[0]*(var_inter[0]*(43625000.0/9.0+var_inter[0]*(var_inter[0]*(325000000.0/189.0-62500000.0/189.0*var_inter[0])-242500000.0/63.0))-33868750.0/9.0))-108434750.0/189.0))-654100.0/63.0))+var_inter[0]*(504+var_inter[0]*(var_inter[0]*(149625+var_inter[0]*(var_inter[0]*(27074375.0/9.0+var_inter[0]*(var_inter[0]*(80000000.0/9.0+var_inter[0]*(var_inter[0]*(31250000.0/9.0-6250000.0/9.0*var_inter[0])-66875000.0/9.0))-58608125.0/9.0))-7818625.0/9.0))-13754))*val[5]+val[6]*var_inter[0]*(var_inter[0]*(174025.0/18.0+var_inter[0]*(var_inter[0]*(34178875.0/54.0+var_inter[0]*(var_inter[0]*(89384375.0/18.0+var_inter[0]*(var_inter[0]*(5937500+var_inter[0]*(15625000.0/27.0*var_inter[0]-76562500.0/27.0))-62468750.0/9.0))-80666875.0/36.0))-11544725.0/108.0))-350)+val[7]*var_inter[0]*(1200.0/7.0+var_inter[0]*(var_inter[0]*(1121950.0/21.0+var_inter[0]*(var_inter[0]*(10401250.0/9.0+var_inter[0]*(var_inter[0]*(234625000.0/63.0+var_inter[0]*(var_inter[0]*(100000000.0/63.0-62500000.0/189.0*var_inter[0])-205000000.0/63.0))-7831250.0/3.0))-60659750.0/189.0))-100300.0/21.0))
    else if interpolation_base == "hierarchical"
        return val[9]*var_inter[0]*(100.0/9.0+var_inter[0]*(var_inter[0]*(4033825.0/1134.0+var_inter[0]*(var_inter[0]*(4341875.0/54.0+var_inter[0]*(var_inter[0]*(7437500.0/27.0+var_inter[0]*(var_inter[0]*(71875000.0/567.0-15625000.0/567.0*var_inter[0])-47187500.0/189.0))-10090625.0/54.0))-24717625.0/1134.0))-6575.0/21.0))+val[8]*var_inter[0]*(var_inter[0]*(88325.0/56.0+var_inter[0]*(var_inter[0]*(54486625.0/504.0+var_inter[0]*(var_inter[0]*(32584375.0/36.0+var_inter[0]*(var_inter[0]*(73750000.0/63.0+var_inter[0]*(7812500.0/63.0*var_inter[0]-36718750.0/63.0))-11828125.0/9.0))-28405625.0/72.0))-996675.0/56.0))-225.0/4.0)+val[7]*var_inter[0]*(1200.0/7.0+var_inter[0]*(var_inter[0]*(1121950.0/21.0+var_inter[0]*(var_inter[0]*(10401250.0/9.0+var_inter[0]*(var_inter[0]*(234625000.0/63.0+var_inter[0]*(var_inter[0]*(100000000.0/63.0-62500000.0/189.0*var_inter[0])-205000000.0/63.0))-7831250.0/3.0))-60659750.0/189.0))-100300.0/21.0))+val[6]*var_inter[0]*(var_inter[0]*(174025.0/18.0+var_inter[0]*(var_inter[0]*(34178875.0/54.0+var_inter[0]*(var_inter[0]*(89384375.0/18.0+var_inter[0]*(var_inter[0]*(5937500+var_inter[0]*(15625000.0/27.0*var_inter[0]-76562500.0/27.0))-62468750.0/9.0))-80666875.0/36.0))-11544725.0/108.0))-350)+var_inter[0]*(504+var_inter[0]*(var_inter[0]*(149625+var_inter[0]*(var_inter[0]*(27074375.0/9.0+var_inter[0]*(var_inter[0]*(80000000.0/9.0+var_inter[0]*(var_inter[0]*(31250000.0/9.0-6250000.0/9.0*var_inter[0])-66875000.0/9.0))-58608125.0/9.0))-7818625.0/9.0))-13754))*val[5]+var_inter[0]*(var_inter[0]*(168775.0/12.0+var_inter[0]*(var_inter[0]*(91073375.0/108.0+var_inter[0]*(var_inter[0]*(107321875.0/18.0+var_inter[0]*(var_inter[0]*(19375000.0/3.0+var_inter[0]*(15625000.0/27.0*var_inter[0]-26562500.0/9.0))-71281250.0/9.0))-102070625.0/36.0))-1792225.0/12.0))-525)*val[4]+val[3]*var_inter[0]*(400+var_inter[0]*(var_inter[0]*(20028950.0/189.0+var_inter[0]*(var_inter[0]*(16686250.0/9.0+var_inter[0]*(var_inter[0]*(43625000.0/9.0+var_inter[0]*(var_inter[0]*(325000000.0/189.0-62500000.0/189.0*var_inter[0])-242500000.0/63.0))-33868750.0/9.0))-108434750.0/189.0))-654100.0/63.0))+val[2]*var_inter[0]*(var_inter[0]*(153025.0/28.0+var_inter[0]*(var_inter[0]*(33095875.0/126.0+var_inter[0]*(var_inter[0]*(56396875.0/36.0+var_inter[0]*(var_inter[0]*(94843750.0/63.0+var_inter[0]*(7812500.0/63.0*var_inter[0]-41406250.0/63.0))-17546875.0/9.0))-57981875.0/72.0))-2898075.0/56.0))-225)+val[1]*var_inter[0]*(100+var_inter[0]*(var_inter[0]*(1997825.0/126.0+var_inter[0]*(var_inter[0]*(3775625.0/18.0+var_inter[0]*(var_inter[0]*(4187500.0/9.0+var_inter[0]*(var_inter[0]*(3125000.0/21.0-15625000.0/567.0*var_inter[0])-65937500.0/189.0))-20965625.0/54.0))-82992625.0/1134.0))-121525.0/63.0))+val[0]*(1-var_inter[0])+var_inter[0]*val[10]

#
def generic_interpolation( var_inter, val, interpolation_base, deg ) when deg == 10
    if interpolation_base == "lagrange"
        return val[7]*var_inter[0]*(1200.0/7.0+var_inter[0]*(var_inter[0]*(1121950.0/21.0+var_inter[0]*(var_inter[0]*(10401250.0/9.0+var_inter[0]*(var_inter[0]*(234625000.0/63.0+var_inter[0]*(var_inter[0]*(100000000.0/63.0-62500000.0/189.0*var_inter[0])-205000000.0/63.0))-7831250.0/3.0))-60659750.0/189.0))-100300.0/21.0))+var_inter[0]*(var_inter[0]*(174025.0/18.0+var_inter[0]*(var_inter[0]*(34178875.0/54.0+var_inter[0]*(var_inter[0]*(89384375.0/18.0+var_inter[0]*(var_inter[0]*(5937500+var_inter[0]*(15625000.0/27.0*var_inter[0]-76562500.0/27.0))-62468750.0/9.0))-80666875.0/36.0))-11544725.0/108.0))-350)*val[6]+var_inter[0]*(400+var_inter[0]*(var_inter[0]*(20028950.0/189.0+var_inter[0]*(var_inter[0]*(16686250.0/9.0+var_inter[0]*(var_inter[0]*(43625000.0/9.0+var_inter[0]*(var_inter[0]*(325000000.0/189.0-62500000.0/189.0*var_inter[0])-242500000.0/63.0))-33868750.0/9.0))-108434750.0/189.0))-654100.0/63.0))*val[3]+(1+var_inter[0]*(var_inter[0]*(177133.0/504.0+var_inter[0]*(var_inter[0]*(42711625.0/4536.0+var_inter[0]*(var_inter[0]*(4695625.0/108.0+var_inter[0]*(var_inter[0]*(6875000.0/189.0+var_inter[0]*(1562500.0/567.0*var_inter[0]-8593750.0/567.0))-9453125.0/189.0))-5369375.0/216.0))-10511875.0/4536.0))-7381.0/252.0))*val[0]+var_inter[0]*(100+var_inter[0]*(var_inter[0]*(1997825.0/126.0+var_inter[0]*(var_inter[0]*(3775625.0/18.0+var_inter[0]*(var_inter[0]*(4187500.0/9.0+var_inter[0]*(var_inter[0]*(3125000.0/21.0-15625000.0/567.0*var_inter[0])-65937500.0/189.0))-20965625.0/54.0))-82992625.0/1134.0))-121525.0/63.0))*val[1]+var_inter[0]*(var_inter[0]*(153025.0/28.0+var_inter[0]*(var_inter[0]*(33095875.0/126.0+var_inter[0]*(var_inter[0]*(56396875.0/36.0+var_inter[0]*(var_inter[0]*(94843750.0/63.0+var_inter[0]*(7812500.0/63.0*var_inter[0]-41406250.0/63.0))-17546875.0/9.0))-57981875.0/72.0))-2898075.0/56.0))-225)*val[2]+var_inter[0]*(var_inter[0]*(168775.0/12.0+var_inter[0]*(var_inter[0]*(91073375.0/108.0+var_inter[0]*(var_inter[0]*(107321875.0/18.0+var_inter[0]*(var_inter[0]*(19375000.0/3.0+var_inter[0]*(15625000.0/27.0*var_inter[0]-26562500.0/9.0))-71281250.0/9.0))-102070625.0/36.0))-1792225.0/12.0))-525)*val[4]+var_inter[0]*(504+var_inter[0]*(var_inter[0]*(149625+var_inter[0]*(var_inter[0]*(27074375.0/9.0+var_inter[0]*(var_inter[0]*(80000000.0/9.0+var_inter[0]*(var_inter[0]*(31250000.0/9.0-6250000.0/9.0*var_inter[0])-66875000.0/9.0))-58608125.0/9.0))-7818625.0/9.0))-13754))*val[5]+val[8]*var_inter[0]*(var_inter[0]*(88325.0/56.0+var_inter[0]*(var_inter[0]*(54486625.0/504.0+var_inter[0]*(var_inter[0]*(32584375.0/36.0+var_inter[0]*(var_inter[0]*(73750000.0/63.0+var_inter[0]*(7812500.0/63.0*var_inter[0]-36718750.0/63.0))-11828125.0/9.0))-28405625.0/72.0))-996675.0/56.0))-225.0/4.0)+val[9]*var_inter[0]*(100.0/9.0+var_inter[0]*(var_inter[0]*(4033825.0/1134.0+var_inter[0]*(var_inter[0]*(4341875.0/54.0+var_inter[0]*(var_inter[0]*(7437500.0/27.0+var_inter[0]*(var_inter[0]*(71875000.0/567.0-15625000.0/567.0*var_inter[0])-47187500.0/189.0))-10090625.0/54.0))-24717625.0/1134.0))-6575.0/21.0))+val[10]*var_inter[0]*(var_inter[0]*(7129.0/252.0+var_inter[0]*(var_inter[0]*(1130750.0/567.0+var_inter[0]*(var_inter[0]*(1883125.0/108.0+var_inter[0]*(var_inter[0]*(4531250.0/189.0+var_inter[0]*(1562500.0/567.0*var_inter[0]-781250.0/63.0))-78125.0/3.0))-59375.0/8.0))-162875.0/504.0))-1)
    else if interpolation_base == "hierarchical"
        return var_inter[0]*val[10]+val[9]*var_inter[0]*(100.0/9.0+var_inter[0]*(var_inter[0]*(4033825.0/1134.0+var_inter[0]*(var_inter[0]*(4341875.0/54.0+var_inter[0]*(var_inter[0]*(7437500.0/27.0+var_inter[0]*(var_inter[0]*(71875000.0/567.0-15625000.0/567.0*var_inter[0])-47187500.0/189.0))-10090625.0/54.0))-24717625.0/1134.0))-6575.0/21.0))+val[8]*var_inter[0]*(var_inter[0]*(88325.0/56.0+var_inter[0]*(var_inter[0]*(54486625.0/504.0+var_inter[0]*(var_inter[0]*(32584375.0/36.0+var_inter[0]*(var_inter[0]*(73750000.0/63.0+var_inter[0]*(7812500.0/63.0*var_inter[0]-36718750.0/63.0))-11828125.0/9.0))-28405625.0/72.0))-996675.0/56.0))-225.0/4.0)+val[7]*var_inter[0]*(1200.0/7.0+var_inter[0]*(var_inter[0]*(1121950.0/21.0+var_inter[0]*(var_inter[0]*(10401250.0/9.0+var_inter[0]*(var_inter[0]*(234625000.0/63.0+var_inter[0]*(var_inter[0]*(100000000.0/63.0-62500000.0/189.0*var_inter[0])-205000000.0/63.0))-7831250.0/3.0))-60659750.0/189.0))-100300.0/21.0))+var_inter[0]*(var_inter[0]*(168775.0/12.0+var_inter[0]*(var_inter[0]*(91073375.0/108.0+var_inter[0]*(var_inter[0]*(107321875.0/18.0+var_inter[0]*(var_inter[0]*(19375000.0/3.0+var_inter[0]*(15625000.0/27.0*var_inter[0]-26562500.0/9.0))-71281250.0/9.0))-102070625.0/36.0))-1792225.0/12.0))-525)*val[4]+(1-var_inter[0])*val[0]+var_inter[0]*(100+var_inter[0]*(var_inter[0]*(1997825.0/126.0+var_inter[0]*(var_inter[0]*(3775625.0/18.0+var_inter[0]*(var_inter[0]*(4187500.0/9.0+var_inter[0]*(var_inter[0]*(3125000.0/21.0-15625000.0/567.0*var_inter[0])-65937500.0/189.0))-20965625.0/54.0))-82992625.0/1134.0))-121525.0/63.0))*val[1]+var_inter[0]*(var_inter[0]*(153025.0/28.0+var_inter[0]*(var_inter[0]*(33095875.0/126.0+var_inter[0]*(var_inter[0]*(56396875.0/36.0+var_inter[0]*(var_inter[0]*(94843750.0/63.0+var_inter[0]*(7812500.0/63.0*var_inter[0]-41406250.0/63.0))-17546875.0/9.0))-57981875.0/72.0))-2898075.0/56.0))-225)*val[2]+var_inter[0]*(400+var_inter[0]*(var_inter[0]*(20028950.0/189.0+var_inter[0]*(var_inter[0]*(16686250.0/9.0+var_inter[0]*(var_inter[0]*(43625000.0/9.0+var_inter[0]*(var_inter[0]*(325000000.0/189.0-62500000.0/189.0*var_inter[0])-242500000.0/63.0))-33868750.0/9.0))-108434750.0/189.0))-654100.0/63.0))*val[3]+var_inter[0]*(504+var_inter[0]*(var_inter[0]*(149625+var_inter[0]*(var_inter[0]*(27074375.0/9.0+var_inter[0]*(var_inter[0]*(80000000.0/9.0+var_inter[0]*(var_inter[0]*(31250000.0/9.0-6250000.0/9.0*var_inter[0])-66875000.0/9.0))-58608125.0/9.0))-7818625.0/9.0))-13754))*val[5]+var_inter[0]*(var_inter[0]*(174025.0/18.0+var_inter[0]*(var_inter[0]*(34178875.0/54.0+var_inter[0]*(var_inter[0]*(89384375.0/18.0+var_inter[0]*(var_inter[0]*(5937500+var_inter[0]*(15625000.0/27.0*var_inter[0]-76562500.0/27.0))-62468750.0/9.0))-80666875.0/36.0))-11544725.0/108.0))-350)*val[6]

#
def interpolation_vertex( var_inter, val_vertex )
    return val_vertex[0]*(1-var_inter[0])+var_inter[0]*val_vertex[1]
#
def nb_children( sub_nvi ) when sub_nvi==0
    return 1
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==0
    return child_var_inter
def type_child( sub_nvi, num_child ) when sub_nvi==0
    return BarGeneric[Int32]
def node_number_child( sub_nvi, num_child ) when sub_nvi==0
    return 0 .. 11
#
def nb_children( sub_nvi ) when sub_nvi==1
    return 2
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==0
    return [0]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return [0]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==1
    return [1]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return [10]
def normal( var_inter, pos_nodes )
    assert( 0, "normal is defined only for nb_dim == nvi + 1" )
#
def jac_mat( var_inter, pos_nodes )
    res := Mat[ type_promote(var_inter[0],pos_nodes[0][0],mul), Gen[ 1, 1 ] ]()
    R_0 := pos_nodes[10][0]; R_1 := pos_nodes[9][0]; R_2 := pos_nodes[8][0]; R_3 := pos_nodes[7][0];
    R_4 := pos_nodes[6][0]; R_5 := pos_nodes[5][0]; R_6 := pos_nodes[4][0]; R_7 := pos_nodes[2][0];
    R_8 := pos_nodes[1][0]; R_9 := pos_nodes[0][0]; R_10 := pos_nodes[3][0]; R_11 := var_inter[0];
    R_12 := (-62500000.0/9.0)*R_11; R_12 = 31250000.0+R_12; R_12 = R_11*R_12; R_12 = (-535000000.0/9.0)+R_12;
    R_12 = R_11*R_12; R_12 = (560000000.0/9.0)+R_12; R_12 = R_11*R_12; R_12 = (-117216250.0/3.0)+R_12;
    R_12 = R_11*R_12; R_12 = (135371875.0/9.0)+R_12; R_12 = R_11*R_12; R_12 = (-31274500.0/9.0)+R_12;
    R_12 = R_11*R_12; R_12 = 448875.0+R_12; R_12 = R_11*R_12; R_12 = (-27508.0)+R_12;
    R_12 = R_11*R_12; R_12 = 504.0+R_12; R_12 = R_5*R_12; R_5 = (156250000.0/27.0)*R_11;
    R_13 := (-76562500.0/3.0)+R_5; R_13 = R_11*R_13; R_13 = 47500000.0+R_13; R_13 = R_11*R_13;
    R_13 = (-437281250.0/9.0)+R_13; R_13 = R_11*R_13; R_13 = (89384375.0/3.0)+R_13; R_13 = R_11*R_13;
    R_13 = (-403334375.0/36.0)+R_13; R_13 = R_11*R_13; R_13 = (68357750.0/27.0)+R_13; R_13 = R_11*R_13;
    R_13 = (-11544725.0/36.0)+R_13; R_13 = R_11*R_13; R_13 = (174025.0/9.0)+R_13; R_13 = R_11*R_13;
    R_13 = (-350.0)+R_13; R_13 = R_4*R_13; R_5 = (-26562500.0)+R_5; R_5 = R_11*R_5;
    R_5 = (155000000.0/3.0)+R_5; R_5 = R_11*R_5; R_5 = (-498968750.0/9.0)+R_5; R_5 = R_11*R_5;
    R_5 = (107321875.0/3.0)+R_5; R_5 = R_11*R_5; R_5 = (-510353125.0/36.0)+R_5; R_5 = R_11*R_5;
    R_5 = (91073375.0/27.0)+R_5; R_5 = R_11*R_5; R_5 = -448056+R_5; R_5 = R_11*R_5;
    R_5 = (168775.0/6.0)+R_5; R_5 = R_11*R_5; R_5 = (-525.0)+R_5; R_6 = R_5*R_6;
    R_5 = (78125000.0/63.0)*R_11; R_4 = (-36718750.0/7.0)+R_5; R_4 = R_11*R_4; R_4 = (590000000.0/63.0)+R_4;
    R_4 = R_11*R_4; R_4 = (-82796875.0/9.0)+R_4; R_4 = R_11*R_4; R_4 = (32584375.0/6.0)+R_4;
    R_4 = R_11*R_4; R_4 = (-142028125.0/72.0)+R_4; R_4 = R_11*R_4; R_4 = (54486625.0/126.0)+R_4;
    R_4 = R_11*R_4; R_4 = (-2990025.0/56.0)+R_4; R_4 = R_11*R_4; R_4 = (88325.0/28.0)+R_4;
    R_4 = R_11*R_4; R_4 = -56.25+R_4; R_4 = R_2*R_4; R_5 = (-41406250.0/7.0)+R_5;
    R_5 = R_11*R_5; R_5 = (758750000.0/63.0)+R_5; R_5 = R_11*R_5; R_5 = (-122828125.0/9.0)+R_5;
    R_5 = R_11*R_5; R_5 = (56396875.0/6.0)+R_5; R_5 = R_11*R_5; R_5 = (-289909375.0/72.0)+R_5;
    R_5 = R_11*R_5; R_5 = (66191750.0/63.0)+R_5; R_5 = R_11*R_5; R_5 = (-8694225.0/56.0)+R_5;
    R_5 = R_11*R_5; R_5 = (153025.0/14.0)+R_5; R_5 = R_11*R_5; R_5 = (-225.0)+R_5;
    R_5 = R_7*R_5; R_7 = (-156250000.0/567.0)*R_11; R_2 = (71875000.0/63.0)+R_7; R_2 = R_11*R_2;
    R_2 = (-377500000.0/189.0)+R_2; R_2 = R_11*R_2; R_2 = (52062500.0/27.0)+R_2; R_2 = R_11*R_2;
    R_2 = (-10090625.0/9.0)+R_2; R_2 = R_11*R_2; R_2 = (21709375.0/54.0)+R_2; R_2 = R_11*R_2;
    R_2 = (-49435250.0/567.0)+R_2; R_2 = R_11*R_2; R_2 = (4033825.0/378.0)+R_2; R_2 = R_11*R_2;
    R_2 = (-13150.0/21.0)+R_2; R_2 = R_11*R_2; R_2 = (100.0/9.0)+R_2; R_2 = R_1*R_2;
    R_7 = (9375000.0/7.0)+R_7; R_7 = R_11*R_7; R_7 = (-527500000.0/189.0)+R_7; R_7 = R_11*R_7;
    R_7 = (29312500.0/9.0)+R_7; R_7 = R_11*R_7; R_7 = (-20965625.0/9.0)+R_7; R_7 = R_11*R_7;
    R_7 = (18878125.0/18.0)+R_7; R_7 = R_11*R_7; R_7 = (-165985250.0/567.0)+R_7; R_7 = R_11*R_7;
    R_7 = (1997825.0/42.0)+R_7; R_7 = R_11*R_7; R_7 = (-243050.0/63.0)+R_7; R_7 = R_11*R_7;
    R_7 = 100.0+R_7; R_7 = R_8*R_7; R_8 = (15625000.0/567.0)*R_11; R_1 = (-781250.0/7.0)+R_8;
    R_1 = R_11*R_1; R_1 = (36250000.0/189.0)+R_1; R_1 = R_11*R_1; R_1 = (-546875.0/3.0)+R_1;
    R_1 = R_11*R_1; R_1 = (1883125.0/18.0)+R_1; R_1 = R_11*R_1; R_1 = -37109.4+R_1;
    R_1 = R_11*R_1; R_1 = (4523000.0/567.0)+R_1; R_1 = R_11*R_1; R_1 = (-162875.0/168.0)+R_1;
    R_1 = R_11*R_1; R_1 = (7129.0/126.0)+R_1; R_1 = R_11*R_1; R_1 = (-1.0)+R_1;
    R_1 = R_0*R_1; R_8 = (-8593750.0/63.0)+R_8; R_8 = R_11*R_8; R_8 = (55000000.0/189.0)+R_8;
    R_8 = R_11*R_8; R_8 = (-9453125.0/27.0)+R_8; R_8 = R_11*R_8; R_8 = (4695625.0/18.0)+R_8;
    R_8 = R_11*R_8; R_8 = (-26846875.0/216.0)+R_8; R_8 = R_11*R_8; R_8 = (42711625.0/1134.0)+R_8;
    R_8 = R_11*R_8; R_8 = (-10511875.0/1512.0)+R_8; R_8 = R_11*R_8; R_8 = (177133.0/252.0)+R_8;
    R_8 = R_11*R_8; R_8 = (-7381.0/252.0)+R_8; R_8 = R_9*R_8; R_7 = R_8+R_7;
    R_5 = R_7+R_5; R_7 = (-625000000.0/189.0)*R_11; R_8 = (100000000.0/7.0)+R_7; R_8 = R_11*R_8;
    R_8 = (-1640000000.0/63.0)+R_8; R_8 = R_11*R_8; R_8 = (234625000.0/9.0)+R_8; R_8 = R_11*R_8;
    R_8 = (-15662500.0)+R_8; R_8 = R_11*R_8; R_8 = (52006250.0/9.0)+R_8; R_8 = R_11*R_8;
    R_8 = (-242639000.0/189.0)+R_8; R_8 = R_11*R_8; R_8 = (1121950.0/7.0)+R_8; R_8 = R_11*R_8;
    R_8 = (-200600.0/21.0)+R_8; R_8 = R_11*R_8; R_8 = (1200.0/7.0)+R_8; R_8 = R_3*R_8;
    R_7 = (325000000.0/21.0)+R_7; R_7 = R_11*R_7; R_7 = (-1940000000.0/63.0)+R_7; R_7 = R_11*R_7;
    R_7 = (305375000.0/9.0)+R_7; R_7 = R_11*R_7; R_7 = (-67737500.0/3.0)+R_7; R_7 = R_11*R_7;
    R_7 = (83431250.0/9.0)+R_7; R_7 = R_11*R_7; R_7 = (-433739000.0/189.0)+R_7; R_7 = R_11*R_7;
    R_7 = (20028950.0/63.0)+R_7; R_7 = R_11*R_7; R_7 = (-1308200.0/63.0)+R_7; R_7 = R_11*R_7;
    R_7 = 400.0+R_7; R_10 = R_7*R_10; R_5 = R_10+R_5; R_6 = R_5+R_6;
    R_12 = R_6+R_12; R_13 = R_12+R_13; R_8 = R_13+R_8; R_4 = R_8+R_4;
    R_2 = R_4+R_2; R_1 = R_2+R_1; res(0,0) = R_1; 
    return res
#
def jac( var_inter, pos_nodes )
    R_0 := pos_nodes[10][0]; R_1 := pos_nodes[9][0]; R_2 := pos_nodes[8][0]; R_3 := pos_nodes[7][0];
    R_4 := pos_nodes[6][0]; R_5 := pos_nodes[5][0]; R_6 := pos_nodes[4][0]; R_7 := pos_nodes[2][0];
    R_8 := pos_nodes[1][0]; R_9 := pos_nodes[0][0]; R_10 := pos_nodes[3][0]; R_11 := var_inter[0];
    R_12 := (-62500000.0/9.0)*R_11; R_12 = 31250000.0+R_12; R_12 = R_11*R_12; R_12 = (-535000000.0/9.0)+R_12;
    R_12 = R_11*R_12; R_12 = (560000000.0/9.0)+R_12; R_12 = R_11*R_12; R_12 = (-117216250.0/3.0)+R_12;
    R_12 = R_11*R_12; R_12 = (135371875.0/9.0)+R_12; R_12 = R_11*R_12; R_12 = (-31274500.0/9.0)+R_12;
    R_12 = R_11*R_12; R_12 = 448875.0+R_12; R_12 = R_11*R_12; R_12 = (-27508.0)+R_12;
    R_12 = R_11*R_12; R_12 = 504.0+R_12; R_12 = R_5*R_12; R_5 = (156250000.0/27.0)*R_11;
    R_13 := (-76562500.0/3.0)+R_5; R_13 = R_11*R_13; R_13 = 47500000.0+R_13; R_13 = R_11*R_13;
    R_13 = (-437281250.0/9.0)+R_13; R_13 = R_11*R_13; R_13 = (89384375.0/3.0)+R_13; R_13 = R_11*R_13;
    R_13 = (-403334375.0/36.0)+R_13; R_13 = R_11*R_13; R_13 = (68357750.0/27.0)+R_13; R_13 = R_11*R_13;
    R_13 = (-11544725.0/36.0)+R_13; R_13 = R_11*R_13; R_13 = (174025.0/9.0)+R_13; R_13 = R_11*R_13;
    R_13 = (-350.0)+R_13; R_13 = R_4*R_13; R_5 = (-26562500.0)+R_5; R_5 = R_11*R_5;
    R_5 = (155000000.0/3.0)+R_5; R_5 = R_11*R_5; R_5 = (-498968750.0/9.0)+R_5; R_5 = R_11*R_5;
    R_5 = (107321875.0/3.0)+R_5; R_5 = R_11*R_5; R_5 = (-510353125.0/36.0)+R_5; R_5 = R_11*R_5;
    R_5 = (91073375.0/27.0)+R_5; R_5 = R_11*R_5; R_5 = -448056+R_5; R_5 = R_11*R_5;
    R_5 = (168775.0/6.0)+R_5; R_5 = R_11*R_5; R_5 = (-525.0)+R_5; R_6 = R_5*R_6;
    R_5 = (78125000.0/63.0)*R_11; R_4 = (-36718750.0/7.0)+R_5; R_4 = R_11*R_4; R_4 = (590000000.0/63.0)+R_4;
    R_4 = R_11*R_4; R_4 = (-82796875.0/9.0)+R_4; R_4 = R_11*R_4; R_4 = (32584375.0/6.0)+R_4;
    R_4 = R_11*R_4; R_4 = (-142028125.0/72.0)+R_4; R_4 = R_11*R_4; R_4 = (54486625.0/126.0)+R_4;
    R_4 = R_11*R_4; R_4 = (-2990025.0/56.0)+R_4; R_4 = R_11*R_4; R_4 = (88325.0/28.0)+R_4;
    R_4 = R_11*R_4; R_4 = -56.25+R_4; R_4 = R_2*R_4; R_5 = (-41406250.0/7.0)+R_5;
    R_5 = R_11*R_5; R_5 = (758750000.0/63.0)+R_5; R_5 = R_11*R_5; R_5 = (-122828125.0/9.0)+R_5;
    R_5 = R_11*R_5; R_5 = (56396875.0/6.0)+R_5; R_5 = R_11*R_5; R_5 = (-289909375.0/72.0)+R_5;
    R_5 = R_11*R_5; R_5 = (66191750.0/63.0)+R_5; R_5 = R_11*R_5; R_5 = (-8694225.0/56.0)+R_5;
    R_5 = R_11*R_5; R_5 = (153025.0/14.0)+R_5; R_5 = R_11*R_5; R_5 = (-225.0)+R_5;
    R_5 = R_7*R_5; R_7 = (-156250000.0/567.0)*R_11; R_2 = (71875000.0/63.0)+R_7; R_2 = R_11*R_2;
    R_2 = (-377500000.0/189.0)+R_2; R_2 = R_11*R_2; R_2 = (52062500.0/27.0)+R_2; R_2 = R_11*R_2;
    R_2 = (-10090625.0/9.0)+R_2; R_2 = R_11*R_2; R_2 = (21709375.0/54.0)+R_2; R_2 = R_11*R_2;
    R_2 = (-49435250.0/567.0)+R_2; R_2 = R_11*R_2; R_2 = (4033825.0/378.0)+R_2; R_2 = R_11*R_2;
    R_2 = (-13150.0/21.0)+R_2; R_2 = R_11*R_2; R_2 = (100.0/9.0)+R_2; R_2 = R_1*R_2;
    R_7 = (9375000.0/7.0)+R_7; R_7 = R_11*R_7; R_7 = (-527500000.0/189.0)+R_7; R_7 = R_11*R_7;
    R_7 = (29312500.0/9.0)+R_7; R_7 = R_11*R_7; R_7 = (-20965625.0/9.0)+R_7; R_7 = R_11*R_7;
    R_7 = (18878125.0/18.0)+R_7; R_7 = R_11*R_7; R_7 = (-165985250.0/567.0)+R_7; R_7 = R_11*R_7;
    R_7 = (1997825.0/42.0)+R_7; R_7 = R_11*R_7; R_7 = (-243050.0/63.0)+R_7; R_7 = R_11*R_7;
    R_7 = 100.0+R_7; R_7 = R_8*R_7; R_8 = (15625000.0/567.0)*R_11; R_1 = (-781250.0/7.0)+R_8;
    R_1 = R_11*R_1; R_1 = (36250000.0/189.0)+R_1; R_1 = R_11*R_1; R_1 = (-546875.0/3.0)+R_1;
    R_1 = R_11*R_1; R_1 = (1883125.0/18.0)+R_1; R_1 = R_11*R_1; R_1 = -37109.4+R_1;
    R_1 = R_11*R_1; R_1 = (4523000.0/567.0)+R_1; R_1 = R_11*R_1; R_1 = (-162875.0/168.0)+R_1;
    R_1 = R_11*R_1; R_1 = (7129.0/126.0)+R_1; R_1 = R_11*R_1; R_1 = (-1.0)+R_1;
    R_1 = R_0*R_1; R_8 = (-8593750.0/63.0)+R_8; R_8 = R_11*R_8; R_8 = (55000000.0/189.0)+R_8;
    R_8 = R_11*R_8; R_8 = (-9453125.0/27.0)+R_8; R_8 = R_11*R_8; R_8 = (4695625.0/18.0)+R_8;
    R_8 = R_11*R_8; R_8 = (-26846875.0/216.0)+R_8; R_8 = R_11*R_8; R_8 = (42711625.0/1134.0)+R_8;
    R_8 = R_11*R_8; R_8 = (-10511875.0/1512.0)+R_8; R_8 = R_11*R_8; R_8 = (177133.0/252.0)+R_8;
    R_8 = R_11*R_8; R_8 = (-7381.0/252.0)+R_8; R_8 = R_9*R_8; R_7 = R_8+R_7;
    R_5 = R_7+R_5; R_7 = (-625000000.0/189.0)*R_11; R_8 = (100000000.0/7.0)+R_7; R_8 = R_11*R_8;
    R_8 = (-1640000000.0/63.0)+R_8; R_8 = R_11*R_8; R_8 = (234625000.0/9.0)+R_8; R_8 = R_11*R_8;
    R_8 = (-15662500.0)+R_8; R_8 = R_11*R_8; R_8 = (52006250.0/9.0)+R_8; R_8 = R_11*R_8;
    R_8 = (-242639000.0/189.0)+R_8; R_8 = R_11*R_8; R_8 = (1121950.0/7.0)+R_8; R_8 = R_11*R_8;
    R_8 = (-200600.0/21.0)+R_8; R_8 = R_11*R_8; R_8 = (1200.0/7.0)+R_8; R_8 = R_3*R_8;
    R_7 = (325000000.0/21.0)+R_7; R_7 = R_11*R_7; R_7 = (-1940000000.0/63.0)+R_7; R_7 = R_11*R_7;
    R_7 = (305375000.0/9.0)+R_7; R_7 = R_11*R_7; R_7 = (-67737500.0/3.0)+R_7; R_7 = R_11*R_7;
    R_7 = (83431250.0/9.0)+R_7; R_7 = R_11*R_7; R_7 = (-433739000.0/189.0)+R_7; R_7 = R_11*R_7;
    R_7 = (20028950.0/63.0)+R_7; R_7 = R_11*R_7; R_7 = (-1308200.0/63.0)+R_7; R_7 = R_11*R_7;
    R_7 = 400.0+R_7; R_10 = R_7*R_10; R_5 = R_10+R_5; R_6 = R_5+R_6;
    R_12 = R_6+R_12; R_13 = R_12+R_13; R_8 = R_13+R_8; R_4 = R_8+R_4;
    R_2 = R_4+R_2; R_1 = R_2+R_1; res := R_1; 
    return res
#
def inv_jac_mat( var_inter, pos_nodes )
    res := Mat[ type_promote(var_inter[0],pos_nodes[0][0],mul), Gen[ 1, 1 ] ]()
    R_0 := pos_nodes[10][0]; R_1 := pos_nodes[9][0]; R_2 := pos_nodes[8][0]; R_3 := pos_nodes[7][0];
    R_4 := pos_nodes[6][0]; R_5 := pos_nodes[5][0]; R_6 := pos_nodes[4][0]; R_7 := pos_nodes[2][0];
    R_8 := pos_nodes[1][0]; R_9 := pos_nodes[0][0]; R_10 := pos_nodes[3][0]; R_11 := var_inter[0];
    R_12 := (-62500000.0/9.0)*R_11; R_12 = 31250000.0+R_12; R_12 = R_11*R_12; R_12 = (-535000000.0/9.0)+R_12;
    R_12 = R_11*R_12; R_12 = (560000000.0/9.0)+R_12; R_12 = R_11*R_12; R_12 = (-117216250.0/3.0)+R_12;
    R_12 = R_11*R_12; R_12 = (135371875.0/9.0)+R_12; R_12 = R_11*R_12; R_12 = (-31274500.0/9.0)+R_12;
    R_12 = R_11*R_12; R_12 = 448875.0+R_12; R_12 = R_11*R_12; R_12 = (-27508.0)+R_12;
    R_12 = R_11*R_12; R_12 = 504.0+R_12; R_12 = R_5*R_12; R_5 = (156250000.0/27.0)*R_11;
    R_13 := (-76562500.0/3.0)+R_5; R_13 = R_11*R_13; R_13 = 47500000.0+R_13; R_13 = R_11*R_13;
    R_13 = (-437281250.0/9.0)+R_13; R_13 = R_11*R_13; R_13 = (89384375.0/3.0)+R_13; R_13 = R_11*R_13;
    R_13 = (-403334375.0/36.0)+R_13; R_13 = R_11*R_13; R_13 = (68357750.0/27.0)+R_13; R_13 = R_11*R_13;
    R_13 = (-11544725.0/36.0)+R_13; R_13 = R_11*R_13; R_13 = (174025.0/9.0)+R_13; R_13 = R_11*R_13;
    R_13 = (-350.0)+R_13; R_13 = R_4*R_13; R_5 = (-26562500.0)+R_5; R_5 = R_11*R_5;
    R_5 = (155000000.0/3.0)+R_5; R_5 = R_11*R_5; R_5 = (-498968750.0/9.0)+R_5; R_5 = R_11*R_5;
    R_5 = (107321875.0/3.0)+R_5; R_5 = R_11*R_5; R_5 = (-510353125.0/36.0)+R_5; R_5 = R_11*R_5;
    R_5 = (91073375.0/27.0)+R_5; R_5 = R_11*R_5; R_5 = -448056+R_5; R_5 = R_11*R_5;
    R_5 = (168775.0/6.0)+R_5; R_5 = R_11*R_5; R_5 = (-525.0)+R_5; R_6 = R_5*R_6;
    R_5 = (78125000.0/63.0)*R_11; R_4 = (-36718750.0/7.0)+R_5; R_4 = R_11*R_4; R_4 = (590000000.0/63.0)+R_4;
    R_4 = R_11*R_4; R_4 = (-82796875.0/9.0)+R_4; R_4 = R_11*R_4; R_4 = (32584375.0/6.0)+R_4;
    R_4 = R_11*R_4; R_4 = (-142028125.0/72.0)+R_4; R_4 = R_11*R_4; R_4 = (54486625.0/126.0)+R_4;
    R_4 = R_11*R_4; R_4 = (-2990025.0/56.0)+R_4; R_4 = R_11*R_4; R_4 = (88325.0/28.0)+R_4;
    R_4 = R_11*R_4; R_4 = -56.25+R_4; R_4 = R_2*R_4; R_5 = (-41406250.0/7.0)+R_5;
    R_5 = R_11*R_5; R_5 = (758750000.0/63.0)+R_5; R_5 = R_11*R_5; R_5 = (-122828125.0/9.0)+R_5;
    R_5 = R_11*R_5; R_5 = (56396875.0/6.0)+R_5; R_5 = R_11*R_5; R_5 = (-289909375.0/72.0)+R_5;
    R_5 = R_11*R_5; R_5 = (66191750.0/63.0)+R_5; R_5 = R_11*R_5; R_5 = (-8694225.0/56.0)+R_5;
    R_5 = R_11*R_5; R_5 = (153025.0/14.0)+R_5; R_5 = R_11*R_5; R_5 = (-225.0)+R_5;
    R_5 = R_7*R_5; R_7 = (-156250000.0/567.0)*R_11; R_2 = (71875000.0/63.0)+R_7; R_2 = R_11*R_2;
    R_2 = (-377500000.0/189.0)+R_2; R_2 = R_11*R_2; R_2 = (52062500.0/27.0)+R_2; R_2 = R_11*R_2;
    R_2 = (-10090625.0/9.0)+R_2; R_2 = R_11*R_2; R_2 = (21709375.0/54.0)+R_2; R_2 = R_11*R_2;
    R_2 = (-49435250.0/567.0)+R_2; R_2 = R_11*R_2; R_2 = (4033825.0/378.0)+R_2; R_2 = R_11*R_2;
    R_2 = (-13150.0/21.0)+R_2; R_2 = R_11*R_2; R_2 = (100.0/9.0)+R_2; R_2 = R_1*R_2;
    R_7 = (9375000.0/7.0)+R_7; R_7 = R_11*R_7; R_7 = (-527500000.0/189.0)+R_7; R_7 = R_11*R_7;
    R_7 = (29312500.0/9.0)+R_7; R_7 = R_11*R_7; R_7 = (-20965625.0/9.0)+R_7; R_7 = R_11*R_7;
    R_7 = (18878125.0/18.0)+R_7; R_7 = R_11*R_7; R_7 = (-165985250.0/567.0)+R_7; R_7 = R_11*R_7;
    R_7 = (1997825.0/42.0)+R_7; R_7 = R_11*R_7; R_7 = (-243050.0/63.0)+R_7; R_7 = R_11*R_7;
    R_7 = 100.0+R_7; R_7 = R_8*R_7; R_8 = (15625000.0/567.0)*R_11; R_1 = (-781250.0/7.0)+R_8;
    R_1 = R_11*R_1; R_1 = (36250000.0/189.0)+R_1; R_1 = R_11*R_1; R_1 = (-546875.0/3.0)+R_1;
    R_1 = R_11*R_1; R_1 = (1883125.0/18.0)+R_1; R_1 = R_11*R_1; R_1 = -37109.4+R_1;
    R_1 = R_11*R_1; R_1 = (4523000.0/567.0)+R_1; R_1 = R_11*R_1; R_1 = (-162875.0/168.0)+R_1;
    R_1 = R_11*R_1; R_1 = (7129.0/126.0)+R_1; R_1 = R_11*R_1; R_1 = (-1.0)+R_1;
    R_1 = R_0*R_1; R_8 = (-8593750.0/63.0)+R_8; R_8 = R_11*R_8; R_8 = (55000000.0/189.0)+R_8;
    R_8 = R_11*R_8; R_8 = (-9453125.0/27.0)+R_8; R_8 = R_11*R_8; R_8 = (4695625.0/18.0)+R_8;
    R_8 = R_11*R_8; R_8 = (-26846875.0/216.0)+R_8; R_8 = R_11*R_8; R_8 = (42711625.0/1134.0)+R_8;
    R_8 = R_11*R_8; R_8 = (-10511875.0/1512.0)+R_8; R_8 = R_11*R_8; R_8 = (177133.0/252.0)+R_8;
    R_8 = R_11*R_8; R_8 = (-7381.0/252.0)+R_8; R_8 = R_9*R_8; R_7 = R_8+R_7;
    R_5 = R_7+R_5; R_7 = (-625000000.0/189.0)*R_11; R_8 = (100000000.0/7.0)+R_7; R_8 = R_11*R_8;
    R_8 = (-1640000000.0/63.0)+R_8; R_8 = R_11*R_8; R_8 = (234625000.0/9.0)+R_8; R_8 = R_11*R_8;
    R_8 = (-15662500.0)+R_8; R_8 = R_11*R_8; R_8 = (52006250.0/9.0)+R_8; R_8 = R_11*R_8;
    R_8 = (-242639000.0/189.0)+R_8; R_8 = R_11*R_8; R_8 = (1121950.0/7.0)+R_8; R_8 = R_11*R_8;
    R_8 = (-200600.0/21.0)+R_8; R_8 = R_11*R_8; R_8 = (1200.0/7.0)+R_8; R_8 = R_3*R_8;
    R_7 = (325000000.0/21.0)+R_7; R_7 = R_11*R_7; R_7 = (-1940000000.0/63.0)+R_7; R_7 = R_11*R_7;
    R_7 = (305375000.0/9.0)+R_7; R_7 = R_11*R_7; R_7 = (-67737500.0/3.0)+R_7; R_7 = R_11*R_7;
    R_7 = (83431250.0/9.0)+R_7; R_7 = R_11*R_7; R_7 = (-433739000.0/189.0)+R_7; R_7 = R_11*R_7;
    R_7 = (20028950.0/63.0)+R_7; R_7 = R_11*R_7; R_7 = (-1308200.0/63.0)+R_7; R_7 = R_11*R_7;
    R_7 = 400.0+R_7; R_10 = R_7*R_10; R_5 = R_10+R_5; R_6 = R_5+R_6;
    R_12 = R_6+R_12; R_13 = R_12+R_13; R_8 = R_13+R_8; R_4 = R_8+R_4;
    R_2 = R_4+R_2; R_1 = R_2+R_1; R_1 = 1/R_1; res(0,0) = R_1;
    return res
#
def measure( var_inter, pos_nodes )
    R_0 := pos_nodes[6][0]; R_0 = (453125.0/1728.0)*R_0; R_1 := pos_nodes[1][0]; R_1 = (15625.0/648.0)*R_1;
    R_2 := pos_nodes[10][0]; R_2 = (150701.0/72576.0)*R_2; R_3 := pos_nodes[0][0]; R_3 = (-150701.0/72576.0)*R_3;
    R_4 := pos_nodes[2][0]; R_4 = (-15625.0/128.0)*R_4; R_5 := pos_nodes[4][0]; R_5 = (-453125.0/1728.0)*R_5;
    R_6 := pos_nodes[3][0]; R_6 = (203125.0/756.0)*R_6; R_5 = R_6+R_5; R_4 = R_5+R_4;
    R_3 = R_4+R_3; R_2 = R_3+R_2; R_3 = pos_nodes[9][0]; R_3 = (-15625.0/648.0)*R_3;
    R_2 = R_3+R_2; R_1 = R_2+R_1; R_2 = pos_nodes[8][0]; R_2 = (15625.0/128.0)*R_2;
    R_1 = R_2+R_1; R_0 = R_1+R_0; R_1 = pos_nodes[7][0]; R_1 = (-203125.0/756.0)*R_1;
    R_0 = R_1+R_0; res := R_0; 
    return res
