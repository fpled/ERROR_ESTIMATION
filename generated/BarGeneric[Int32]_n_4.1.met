static const nvi := 1
static const nb_nodes := 5
static const nb_vertex_nodes := 2
static const center_of_var_inter := [ 1.0/2.0 ]
#
def interpolation( var_inter, val, interpolation_base )
    if interpolation_base == "lagrange"
        return val[2]*var_inter[0]*(var_inter[0]*(76+var_inter[0]*(64*var_inter[0]-128))-12)+(1+((70.0/3.0+(32.0/3.0*var_inter[0]-80.0/3.0)*var_inter[0])*var_inter[0]-25.0/3.0)*var_inter[0])*val[0]+val[1]*var_inter[0]*(16+var_inter[0]*(var_inter[0]*(96-128.0/3.0*var_inter[0])-208.0/3.0))+val[3]*var_inter[0]*(16.0/3.0+var_inter[0]*(var_inter[0]*(224.0/3.0-128.0/3.0*var_inter[0])-112.0/3.0))+val[4]*var_inter[0]*(var_inter[0]*(22.0/3.0+var_inter[0]*(32.0/3.0*var_inter[0]-16))-1)
    else if interpolation_base == "hierarchical"
        return val[3]*var_inter[0]*(16.0/3.0+var_inter[0]*(var_inter[0]*(224.0/3.0-128.0/3.0*var_inter[0])-112.0/3.0))+val[2]*var_inter[0]*(var_inter[0]*(76+var_inter[0]*(64*var_inter[0]-128))-12)+val[0]*(1-var_inter[0])+val[1]*var_inter[0]*(16+var_inter[0]*(var_inter[0]*(96-128.0/3.0*var_inter[0])-208.0/3.0))+var_inter[0]*val[4]

#
def generic_interpolation( var_inter, val, interpolation_base, deg ) when deg == 4
    if interpolation_base == "lagrange"
        return var_inter[0]*(16+var_inter[0]*(var_inter[0]*(96-128.0/3.0*var_inter[0])-208.0/3.0))*val[1]+(1+((70.0/3.0+(32.0/3.0*var_inter[0]-80.0/3.0)*var_inter[0])*var_inter[0]-25.0/3.0)*var_inter[0])*val[0]+var_inter[0]*(var_inter[0]*(76+var_inter[0]*(64*var_inter[0]-128))-12)*val[2]+var_inter[0]*(16.0/3.0+var_inter[0]*(var_inter[0]*(224.0/3.0-128.0/3.0*var_inter[0])-112.0/3.0))*val[3]+val[4]*var_inter[0]*(var_inter[0]*(22.0/3.0+var_inter[0]*(32.0/3.0*var_inter[0]-16))-1)
    else if interpolation_base == "hierarchical"
        return val[4]*var_inter[0]+var_inter[0]*(16.0/3.0+var_inter[0]*(var_inter[0]*(224.0/3.0-128.0/3.0*var_inter[0])-112.0/3.0))*val[3]+var_inter[0]*(var_inter[0]*(76+var_inter[0]*(64*var_inter[0]-128))-12)*val[2]+var_inter[0]*(16+var_inter[0]*(var_inter[0]*(96-128.0/3.0*var_inter[0])-208.0/3.0))*val[1]+(1-var_inter[0])*val[0]

#
def interpolation_vertex( var_inter, val_vertex )
    return val_vertex[0]*(1-var_inter[0])+var_inter[0]*val_vertex[1]
#
def nb_children( sub_nvi ) when sub_nvi==0
    return 1
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==0
    return child_var_inter
def type_child( sub_nvi, num_child ) when sub_nvi==0
    return BarGeneric[Int32]
def node_number_child( sub_nvi, num_child ) when sub_nvi==0
    return 0 .. 5
#
def nb_children( sub_nvi ) when sub_nvi==1
    return 2
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==0
    return [0]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return [0]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==1
    return [1]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return [4]
def normal( var_inter, pos_nodes )
    assert( 0, "normal is defined only for nb_dim == nvi + 1" )
#
def jac_mat( var_inter, pos_nodes )
    res := Mat[ type_promote(var_inter[0],pos_nodes[0][0],mul), Gen[ 1, 1 ] ]()
    R_0 := pos_nodes[4][0]; R_1 := pos_nodes[2][0]; R_2 := pos_nodes[1][0]; R_3 := pos_nodes[0][0];
    R_4 := pos_nodes[3][0]; R_5 := var_inter[0]; R_6 := 256.0*R_5; R_6 = (-384.0)+R_6;
    R_6 = R_6*R_5; R_6 = 152.0+R_6; R_6 = R_6*R_5; R_6 = (-12.0)+R_6;
    R_1 = R_6*R_1; R_6 = (128.0/3.0)*R_5; R_7 := (-48.0)+R_6; R_7 = R_7*R_5;
    R_7 = (44.0/3.0)+R_7; R_7 = R_7*R_5; R_7 = (-1.0)+R_7; R_0 = R_7*R_0;
    R_6 = (-80.0)+R_6; R_6 = R_6*R_5; R_6 = (140.0/3.0)+R_6; R_6 = R_6*R_5;
    R_6 = (-25.0/3.0)+R_6; R_3 = R_6*R_3; R_6 = (-512.0/3.0)*R_5; R_7 = 288.0+R_6;
    R_7 = R_7*R_5; R_7 = (-416.0/3.0)+R_7; R_7 = R_7*R_5; R_7 = 16.0+R_7;
    R_2 = R_7*R_2; R_2 = R_3+R_2; R_1 = R_2+R_1; R_6 = 224.0+R_6;
    R_6 = R_6*R_5; R_6 = (-224.0/3.0)+R_6; R_5 = R_6*R_5; R_5 = (16.0/3.0)+R_5;
    R_4 = R_5*R_4; R_1 = R_4+R_1; R_0 = R_1+R_0; res(0,0) = R_0;
    return res
#
def jac( var_inter, pos_nodes )
    R_0 := pos_nodes[4][0]; R_1 := pos_nodes[2][0]; R_2 := pos_nodes[1][0]; R_3 := pos_nodes[0][0];
    R_4 := pos_nodes[3][0]; R_5 := var_inter[0]; R_6 := 256.0*R_5; R_6 = (-384.0)+R_6;
    R_6 = R_6*R_5; R_6 = 152.0+R_6; R_6 = R_6*R_5; R_6 = (-12.0)+R_6;
    R_1 = R_6*R_1; R_6 = (128.0/3.0)*R_5; R_7 := (-48.0)+R_6; R_7 = R_7*R_5;
    R_7 = (44.0/3.0)+R_7; R_7 = R_7*R_5; R_7 = (-1.0)+R_7; R_0 = R_7*R_0;
    R_6 = (-80.0)+R_6; R_6 = R_6*R_5; R_6 = (140.0/3.0)+R_6; R_6 = R_6*R_5;
    R_6 = (-25.0/3.0)+R_6; R_3 = R_6*R_3; R_6 = (-512.0/3.0)*R_5; R_7 = 288.0+R_6;
    R_7 = R_7*R_5; R_7 = (-416.0/3.0)+R_7; R_7 = R_7*R_5; R_7 = 16.0+R_7;
    R_2 = R_7*R_2; R_2 = R_3+R_2; R_1 = R_2+R_1; R_6 = 224.0+R_6;
    R_6 = R_6*R_5; R_6 = (-224.0/3.0)+R_6; R_5 = R_6*R_5; R_5 = (16.0/3.0)+R_5;
    R_4 = R_5*R_4; R_1 = R_4+R_1; R_0 = R_1+R_0; res := R_0;
    return res
#
def inv_jac_mat( var_inter, pos_nodes )
    res := Mat[ type_promote(var_inter[0],pos_nodes[0][0],mul), Gen[ 1, 1 ] ]()
    R_0 := pos_nodes[4][0]; R_1 := pos_nodes[2][0]; R_2 := pos_nodes[1][0]; R_3 := pos_nodes[0][0];
    R_4 := pos_nodes[3][0]; R_5 := var_inter[0]; R_6 := 256.0*R_5; R_6 = (-384.0)+R_6;
    R_6 = R_6*R_5; R_6 = 152.0+R_6; R_6 = R_6*R_5; R_6 = (-12.0)+R_6;
    R_1 = R_6*R_1; R_6 = (128.0/3.0)*R_5; R_7 := (-48.0)+R_6; R_7 = R_7*R_5;
    R_7 = (44.0/3.0)+R_7; R_7 = R_7*R_5; R_7 = (-1.0)+R_7; R_0 = R_7*R_0;
    R_6 = (-80.0)+R_6; R_6 = R_6*R_5; R_6 = (140.0/3.0)+R_6; R_6 = R_6*R_5;
    R_6 = (-25.0/3.0)+R_6; R_3 = R_6*R_3; R_6 = (-512.0/3.0)*R_5; R_7 = 288.0+R_6;
    R_7 = R_7*R_5; R_7 = (-416.0/3.0)+R_7; R_7 = R_7*R_5; R_7 = 16.0+R_7;
    R_2 = R_7*R_2; R_2 = R_3+R_2; R_1 = R_2+R_1; R_6 = 224.0+R_6;
    R_6 = R_6*R_5; R_6 = (-224.0/3.0)+R_6; R_5 = R_6*R_5; R_5 = (16.0/3.0)+R_5;
    R_4 = R_5*R_4; R_1 = R_4+R_1; R_0 = R_1+R_0; R_0 = 1/R_0;
    res(0,0) = R_0; 
    return res
#
def measure( var_inter, pos_nodes )
    R_0 := pos_nodes[0][0]; R_0 = (-1.0)*R_0; R_1 := pos_nodes[4][0]; R_0 = R_1+R_0;
    res := R_0; 
    return res
