static const nvi := 1
static const nb_nodes := 4
static const nb_vertex_nodes := 2
static const center_of_var_inter := [ 1.0/2.0 ]
#
def interpolation( var_inter, val, interpolation_base )
    if interpolation_base == "lagrange"
        return val[3]*var_inter[0]*(var_inter[0]*(18-27.0/2.0*var_inter[0])-9.0/2.0)+val[1]*var_inter[0]*(1-9.0/2.0*var_inter[0]*(1-var_inter[0]))+val[0]*(1+var_inter[0]*(var_inter[0]*(9-9.0/2.0*var_inter[0])-11.0/2.0))+val[2]*var_inter[0]*(9+var_inter[0]*(27.0/2.0*var_inter[0]-45.0/2.0))
    else if interpolation_base == "hierarchical"
        return val[3]*var_inter[0]*(var_inter[0]*(18-27.0/2.0*var_inter[0])-9.0/2.0)+val[2]*var_inter[0]*(9+var_inter[0]*(27.0/2.0*var_inter[0]-45.0/2.0))+(1-var_inter[0])*val[0]+var_inter[0]*val[1]

#
def interpolation_deg( var_inter, val, interpolation_base, deg ) when deg == 3
    if interpolation_base == "lagrange"
        return var_inter[0]*(var_inter[0]*(18-27.0/2.0*var_inter[0])-9.0/2.0)*val[2]+val[0]*(1+var_inter[0]*(var_inter[0]*(9-9.0/2.0*var_inter[0])-11.0/2.0))+val[1]*var_inter[0]*(9+var_inter[0]*(27.0/2.0*var_inter[0]-45.0/2.0))+var_inter[0]*(1-9.0/2.0*var_inter[0]*(1-var_inter[0]))*val[3]
    else if interpolation_base == "hierarchical"
        return (1-var_inter[0])*val[0]+val[1]*var_inter[0]*(9+var_inter[0]*(27.0/2.0*var_inter[0]-45.0/2.0))+var_inter[0]*(var_inter[0]*(18-27.0/2.0*var_inter[0])-9.0/2.0)*val[2]+var_inter[0]*val[3]

#
def interpolation_deg( var_inter, val, interpolation_base, deg ) when deg == 4
    if interpolation_base == "lagrange"
        return val[1]*var_inter[0]*(16+var_inter[0]*(var_inter[0]*(96-128.0/3.0*var_inter[0])-208.0/3.0))+val[0]*(1+var_inter[0]*(var_inter[0]*(70.0/3.0+var_inter[0]*(32.0/3.0*var_inter[0]-80.0/3.0))-25.0/3.0))+val[2]*var_inter[0]*(var_inter[0]*(76+var_inter[0]*(64*var_inter[0]-128))-12)+var_inter[0]*(16.0/3.0+var_inter[0]*(var_inter[0]*(224.0/3.0-128.0/3.0*var_inter[0])-112.0/3.0))*val[3]+val[4]*var_inter[0]*(var_inter[0]*(22.0/3.0+var_inter[0]*(32.0/3.0*var_inter[0]-16))-1)
    else if interpolation_base == "hierarchical"
        return var_inter[0]*(16.0/3.0+var_inter[0]*(var_inter[0]*(224.0/3.0-128.0/3.0*var_inter[0])-112.0/3.0))*val[3]+val[2]*var_inter[0]*(var_inter[0]*(76+var_inter[0]*(64*var_inter[0]-128))-12)+val[1]*var_inter[0]*(16+var_inter[0]*(var_inter[0]*(96-128.0/3.0*var_inter[0])-208.0/3.0))+(1-var_inter[0])*val[0]+var_inter[0]*val[4]

#
def interpolation_deg( var_inter, val, interpolation_base, deg ) when deg == 5
    if interpolation_base == "lagrange"
        return val[2]*var_inter[0]*(var_inter[0]*(2675.0/12.0+var_inter[0]*(var_inter[0]*(8125.0/12.0-3125.0/12.0*var_inter[0])-7375.0/12.0))-25)+val[1]*var_inter[0]*(25+var_inter[0]*(var_inter[0]*(8875.0/24.0+var_inter[0]*(3125.0/24.0*var_inter[0]-4375.0/12.0))-1925.0/12.0))+val[0]*(1+var_inter[0]*(var_inter[0]*(375.0/8.0+var_inter[0]*(var_inter[0]*(625.0/8.0-625.0/24.0*var_inter[0])-2125.0/24.0))-137.0/12.0))+val[3]*var_inter[0]*(50.0/3.0+var_inter[0]*(var_inter[0]*(6125.0/12.0+var_inter[0]*(3125.0/12.0*var_inter[0]-625))-325.0/2.0))+val[4]*var_inter[0]*(var_inter[0]*(1525.0/24.0+var_inter[0]*(var_inter[0]*(6875.0/24.0-3125.0/24.0*var_inter[0])-5125.0/24.0))-25.0/4.0)+val[5]*var_inter[0]*(1+var_inter[0]*(var_inter[0]*(875.0/24.0+var_inter[0]*(625.0/24.0*var_inter[0]-625.0/12.0))-125.0/12.0))
    else if interpolation_base == "hierarchical"
        return var_inter[0]*val[5]+val[4]*var_inter[0]*(var_inter[0]*(1525.0/24.0+var_inter[0]*(var_inter[0]*(6875.0/24.0-3125.0/24.0*var_inter[0])-5125.0/24.0))-25.0/4.0)+val[1]*var_inter[0]*(25+var_inter[0]*(var_inter[0]*(8875.0/24.0+var_inter[0]*(3125.0/24.0*var_inter[0]-4375.0/12.0))-1925.0/12.0))+(1-var_inter[0])*val[0]+val[2]*var_inter[0]*(var_inter[0]*(2675.0/12.0+var_inter[0]*(var_inter[0]*(8125.0/12.0-3125.0/12.0*var_inter[0])-7375.0/12.0))-25)+val[3]*var_inter[0]*(50.0/3.0+var_inter[0]*(var_inter[0]*(6125.0/12.0+var_inter[0]*(3125.0/12.0*var_inter[0]-625))-325.0/2.0))

#
def interpolation_deg( var_inter, val, interpolation_base, deg ) when deg == 6
    if interpolation_base == "lagrange"
        return val[6]*var_inter[0]*(var_inter[0]*(137.0/10.0+var_inter[0]*(var_inter[0]*(153+var_inter[0]*(324.0/5.0*var_inter[0]-162))-135.0/2.0))-1)+val[2]*var_inter[0]*(var_inter[0]*(1053.0/2.0+var_inter[0]*(var_inter[0]*(3699+var_inter[0]*(972*var_inter[0]-3078))-4149.0/2.0))-45)+(1+var_inter[0]*(var_inter[0]*(406.0/5.0+var_inter[0]*(var_inter[0]*(315+var_inter[0]*(324.0/5.0*var_inter[0]-1134.0/5.0))-441.0/2.0))-147.0/10.0))*val[0]+val[1]*var_inter[0]*(36+var_inter[0]*(var_inter[0]*(1044+var_inter[0]*(var_inter[0]*(1296-1944.0/5.0*var_inter[0])-1674))-1566.0/5.0))+val[3]*var_inter[0]*(40+var_inter[0]*(var_inter[0]*(2232+var_inter[0]*(var_inter[0]*(3888-1296*var_inter[0])-4356))-508))+val[4]*var_inter[0]*(var_inter[0]*(297+var_inter[0]*(var_inter[0]*(2889+var_inter[0]*(972*var_inter[0]-2754))-2763.0/2.0))-45.0/2.0)+val[5]*var_inter[0]*(36.0/5.0+var_inter[0]*(var_inter[0]*(468+var_inter[0]*(var_inter[0]*(5184.0/5.0-1944.0/5.0*var_inter[0])-1026))-486.0/5.0))
    else if interpolation_base == "hierarchical"
        return var_inter[0]*val[6]+val[5]*var_inter[0]*(36.0/5.0+var_inter[0]*(var_inter[0]*(468+var_inter[0]*(var_inter[0]*(5184.0/5.0-1944.0/5.0*var_inter[0])-1026))-486.0/5.0))+val[3]*var_inter[0]*(40+var_inter[0]*(var_inter[0]*(2232+var_inter[0]*(var_inter[0]*(3888-1296*var_inter[0])-4356))-508))+val[2]*var_inter[0]*(var_inter[0]*(1053.0/2.0+var_inter[0]*(var_inter[0]*(3699+var_inter[0]*(972*var_inter[0]-3078))-4149.0/2.0))-45)+val[1]*var_inter[0]*(36+var_inter[0]*(var_inter[0]*(1044+var_inter[0]*(var_inter[0]*(1296-1944.0/5.0*var_inter[0])-1674))-1566.0/5.0))+(1-var_inter[0])*val[0]+val[4]*var_inter[0]*(var_inter[0]*(297+var_inter[0]*(var_inter[0]*(2889+var_inter[0]*(972*var_inter[0]-2754))-2763.0/2.0))-45.0/2.0)

#
def interpolation_vertex( var_inter, val_vertex )
    return var_inter[0]*val_vertex[1]+val_vertex[0]*(1-var_inter[0])
#
def nb_children( sub_nvi ) when sub_nvi==0
    return 1
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==0
    return child_var_inter
def type_child( sub_nvi, num_child ) when sub_nvi==0
    return Bar_4
def node_number_child( sub_nvi, num_child ) when sub_nvi==0
    return 0 .. 4
#
def nb_children( sub_nvi ) when sub_nvi==1
    return 2
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==0
    return [0]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return [0]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==1
    return [1]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return [1]
def normal( var_inter, pos_nodes )
    res := Vec[ type_promote(var_inter[0],pos_nodes[0][0],mul), 2 ]()
    R_0 := pos_nodes[2][0]; R_1 := pos_nodes[1][0]; R_2 := pos_nodes[0][0]; R_3 := pos_nodes[3][0];
    R_4 := pos_nodes[3][1]; R_5 := pos_nodes[2][1]; R_6 := pos_nodes[0][1]; R_7 := var_inter[0];
    R_8 := -40.5*R_7; R_8 = 36.0+R_8; R_8 = R_7*R_8; R_8 = -4.5+R_8;
    R_3 = R_3*R_8; R_8 = R_4*R_8; R_4 = 40.5*R_7; R_4 = (-45.0)+R_4;
    R_4 = R_7*R_4; R_4 = 9.0+R_4; R_0 = R_0*R_4; R_4 = R_5*R_4;
    R_5 = -13.5*R_7; R_5 = 18.0+R_5; R_5 = R_7*R_5; R_5 = -5.5+R_5;
    R_2 = R_2*R_5; R_5 = R_6*R_5; R_6 = (-3.0)*R_7; R_6 = 2.0+R_6;
    R_6 = R_7*R_6; R_6 = -4.5*R_6; R_6 = 1.0+R_6; R_1 = R_1*R_6;
    R_1 = R_2+R_1; R_0 = R_1+R_0; R_0 = R_3+R_0; R_3 = pow(R_0,2);
    R_1 = pos_nodes[1][1]; R_6 = R_1*R_6; R_5 = R_6+R_5; R_4 = R_5+R_4;
    R_8 = R_4+R_8; R_4 = pow(R_8,2); R_4 = R_3+R_4; R_4 = rsqrt(R_4);
    R_0 = R_0*R_4; R_0 = (-1.0)*R_0; res[1] = R_0; R_4 = R_8*R_4;
    res[0] = R_4; 
    return res
#
def jac_mat( var_inter, pos_nodes )
    res := Mat[ type_promote(var_inter[0],pos_nodes[0][0],mul), Gen[ 1, 2 ] ]()
    R_0 := pos_nodes[3][1]; R_1 := pos_nodes[2][1]; R_2 := pos_nodes[0][1]; R_3 := pos_nodes[1][1];
    R_4 := pos_nodes[2][0]; R_5 := pos_nodes[1][0]; R_6 := pos_nodes[0][0]; R_7 := var_inter[0];
    R_8 := 40.5*R_7; R_8 = (-45.0)+R_8; R_8 = R_7*R_8; R_8 = 9.0+R_8;
    R_1 = R_1*R_8; R_8 = R_4*R_8; R_4 = (-3.0)*R_7; R_4 = 2.0+R_4;
    R_4 = R_7*R_4; R_4 = -4.5*R_4; R_4 = 1.0+R_4; R_3 = R_3*R_4;
    R_4 = R_5*R_4; R_5 = -13.5*R_7; R_5 = 18.0+R_5; R_5 = R_7*R_5;
    R_5 = -5.5+R_5; R_2 = R_2*R_5; R_2 = R_3+R_2; R_1 = R_2+R_1;
    R_5 = R_6*R_5; R_4 = R_5+R_4; R_8 = R_4+R_8; R_4 = -40.5*R_7;
    R_4 = 36.0+R_4; R_4 = R_7*R_4; R_4 = -4.5+R_4; R_0 = R_0*R_4;
    R_0 = R_1+R_0; res(0,1) = R_0; R_0 = pos_nodes[3][0]; R_4 = R_0*R_4;
    R_8 = R_4+R_8; res(0,0) = R_8; 
    return res
#
def jac( var_inter, pos_nodes )
    R_0 := pos_nodes[3][1]; R_1 := pos_nodes[2][1]; R_2 := pos_nodes[0][1]; R_3 := pos_nodes[1][1];
    R_4 := pos_nodes[2][0]; R_5 := pos_nodes[1][0]; R_6 := pos_nodes[0][0]; R_7 := var_inter[0];
    R_8 := 40.5*R_7; R_8 = (-45.0)+R_8; R_8 = R_7*R_8; R_8 = 9.0+R_8;
    R_1 = R_1*R_8; R_8 = R_4*R_8; R_4 = (-3.0)*R_7; R_4 = 2.0+R_4;
    R_4 = R_7*R_4; R_4 = -4.5*R_4; R_4 = 1.0+R_4; R_3 = R_3*R_4;
    R_4 = R_5*R_4; R_5 = -13.5*R_7; R_5 = 18.0+R_5; R_5 = R_7*R_5;
    R_5 = -5.5+R_5; R_2 = R_2*R_5; R_2 = R_3+R_2; R_1 = R_2+R_1;
    R_5 = R_6*R_5; R_4 = R_5+R_4; R_8 = R_4+R_8; R_4 = -40.5*R_7;
    R_4 = 36.0+R_4; R_4 = R_7*R_4; R_4 = -4.5+R_4; R_0 = R_0*R_4;
    R_0 = R_1+R_0; R_0 = pow(R_0,2); R_1 = pos_nodes[3][0]; R_4 = R_1*R_4;
    R_8 = R_4+R_8; R_8 = pow(R_8,2); R_0 = R_8+R_0; R_0 = sqrt(R_0);
    res := R_0; 
    return res
#
def inv_jac_mat( var_inter, pos_nodes )
    assert( 0, "inv_jac_mat() available only when nb var inter == dim" )
#
def measure( var_inter, pos_nodes )
    R_0 := pos_nodes[3][1]; R_1 := (-1.0)*R_0; R_2 := pos_nodes[2][1]; R_3 := (-1.0)*R_2;
    R_0 = R_0+R_3; R_0 = -3.375*R_0; R_2 = R_2+R_1; R_4 := 3.375*R_2;
    R_5 := 40.5*R_2; R_2 = -3.375*R_2; R_6 := pos_nodes[0][1]; R_7 := (-1.0)*R_6;
    R_8 := pos_nodes[1][1]; R_6 = R_8+R_6; R_6 = R_3+R_6; R_6 = R_1+R_6;
    R_1 = pow(R_6,2); R_3 = (-1.0)*R_1; R_7 = R_8+R_7; R_8 = 0.125*R_7;
    R_0 = R_0+R_8; R_0 = R_0*R_6; R_4 = R_8+R_4; R_4 = R_4*R_6;
    R_8 = 13.5*R_7; R_5 = R_8+R_5; R_8 = pow(R_5,2); R_6 = R_6*R_5;
    R_6 = (-1.0)*R_6; R_7 = -0.125*R_7; R_2 = R_7+R_2; R_7 = pow(R_2,2);
    R_5 = R_2*R_5; R_2 = pos_nodes[1][0]; R_2 = (-1.0)*R_2; R_9 := pos_nodes[0][0];
    R_10 := (-1.0)*R_9; R_9 = R_9+R_2; R_11 := -13.5*R_9; R_9 = 0.125*R_9;
    R_12 := pos_nodes[2][0]; R_13 := (-1.0)*R_12; R_14 := pos_nodes[3][0]; R_12 = R_14+R_12;
    R_12 = R_2+R_12; R_12 = R_10+R_12; R_10 = pow(R_12,2); R_2 = R_10+R_1;
    R_2 = 20.25*R_2; R_15 := (-1.0)*R_10; R_13 = R_14+R_13; R_14 = -40.5*R_13;
    R_11 = R_14+R_11; R_14 = pow(R_11,2); R_8 = R_14+R_8; R_8 = 24.0*R_8;
    R_14 = R_12*R_11; R_14 = R_6+R_14; R_14 = (-216.0)*R_14; R_13 = 3.375*R_13;
    R_9 = R_13+R_9; R_12 = R_9*R_12; R_0 = R_0+R_12; R_12 = R_4+R_12;
    R_4 = pow(R_12,2); R_13 = pow(R_9,2); R_7 = R_13+R_7; R_13 = sqrt(R_7);
    R_6 = rsqrt(R_7); R_7 = 1/R_7; R_4 = R_7*R_4; R_15 = R_4+R_15;
    R_3 = R_15+R_3; R_3 = (-2187.0)*R_3; R_4 = (-1.0)*R_4; R_10 = R_4+R_10;
    R_1 = R_10+R_1; R_10 = 243.0*R_1; R_1 = 40.5*R_1; R_11 = R_9*R_11;
    R_5 = R_11+R_5; R_11 = 24.0*R_5; R_11 = R_10+R_11; R_10 = 2.0*R_5;
    R_10 = R_2+R_10; R_11 = R_10*R_11; R_10 = 216.0*R_5; R_10 = R_3+R_10;
    R_10 = R_12*R_10; R_5 = 4.0*R_5; R_1 = R_5+R_1; R_0 = R_0*R_1;
    R_0 = 13.5*R_0; R_10 = R_0+R_10; R_10 = R_7*R_10; R_10 = R_14+R_10;
    R_10 = R_12*R_10; R_10 = (-9.0)*R_10; R_11 = R_10+R_11; R_11 = R_7*R_11;
    R_11 = -0.5*R_11; R_8 = R_11+R_8; R_8 = R_8*R_6; R_8 = (1.0/3840.0)*R_8;
    R_6 = R_1*R_6; R_6 = (1.0/48.0)*R_6; R_13 = R_6+R_13; R_8 = R_13+R_8;
    res := R_8; 
    return res
#
def barycenter( var_inter, pos_nodes )
    res := Vec[ type_promote(var_inter[0],pos_nodes[0][0],mul), 2 ]()
    R_0 := pos_nodes[3][1]; R_1 := (-1.0)*R_0; R_2 := pos_nodes[2][1]; R_3 := (-1.0)*R_2;
    R_4 := R_0+R_3; R_5 := 3.375*R_4; R_4 = -13.5*R_4; R_0 = R_0+R_2;
    R_6 := (9.0/16.0)*R_0; R_2 = R_2+R_1; R_7 := 40.5*R_2; R_2 = -3.375*R_2;
    R_8 := pos_nodes[0][1]; R_9 := (-1.0)*R_8; R_10 := pos_nodes[1][1]; R_11 := R_10+R_8;
    R_12 := (-1.0/16.0)*R_11; R_6 = R_12+R_6; R_11 = R_3+R_11; R_11 = R_1+R_11;
    R_1 = (-1.0)*R_10; R_8 = R_8+R_1; R_8 = 0.125*R_8; R_8 = R_5+R_8;
    R_0 = R_1+R_0; R_0 = R_0+R_9; R_1 = pow(R_0,2); R_5 = (-1.0)*R_1;
    R_9 = R_10+R_9; R_10 = 4.5*R_9; R_10 = R_4+R_10; R_4 = 13.5*R_9;
    R_7 = R_4+R_7; R_4 = R_0*R_7; R_3 = (-1.0)*R_4; R_12 = pow(R_7,2);
    R_9 = -0.125*R_9; R_2 = R_9+R_2; R_0 = R_0*R_2; R_7 = R_2*R_7;
    R_9 = (-1.0)*R_7; R_2 = pow(R_2,2); R_13 := pos_nodes[1][0]; R_14 := (-1.0)*R_13;
    R_15 := pos_nodes[0][0]; R_16 := R_15+R_13; R_17 := (-1.0/16.0)*R_16; R_18 := (-1.0)*R_15;
    R_13 = R_13+R_18; R_13 = 0.125*R_13; R_15 = R_15+R_14; R_19 := -0.125*R_15;
    R_20 := -4.5*R_15; R_21 := -13.5*R_15; R_15 = 0.125*R_15; R_22 := pos_nodes[3][0];
    R_23 := (-1.0)*R_22; R_16 = R_23+R_16; R_24 := pos_nodes[2][0]; R_25 := (-1.0)*R_24;
    R_26 := R_22+R_25; R_27 := -40.5*R_26; R_27 = R_27+R_21; R_28 := pow(R_27,2);
    R_28 = R_12+R_28; R_28 = (-1.0/160.0)*R_28; R_29 := 3.375*R_26; R_29 = R_29+R_15;
    R_26 = -13.5*R_26; R_26 = R_20+R_26; R_25 = R_16+R_25; R_16 = R_25*R_27;
    R_20 = (-1.0)*R_16; R_20 = R_4+R_20; R_20 = -4.5*R_20; R_16 = R_3+R_16;
    R_16 = 216.0*R_16; R_3 = pow(R_25,2); R_30 := (-1.0)*R_3; R_3 = R_1+R_3;
    R_31 := 1822.5*R_3; R_32 := 40.5*R_3; R_33 := 20.25*R_3; R_22 = R_22+R_24;
    R_34 := (9.0/16.0)*R_22; R_34 = R_17+R_34; R_22 = R_14+R_22; R_22 = R_18+R_22;
    R_18 = pow(R_22,2); R_14 = (-1.0)*R_18; R_17 = R_1+R_18; R_17 = 20.25*R_17;
    R_23 = R_24+R_23; R_24 = 3.375*R_23; R_13 = R_24+R_13; R_13 = R_13*R_25;
    R_13 = R_0+R_13; R_35 := R_13*R_8; R_35 = -0.375*R_35; R_10 = R_13*R_10;
    R_10 = -4.5*R_10; R_24 = R_19+R_24; R_24 = R_25*R_24; R_24 = R_0+R_24;
    R_19 = pow(R_24,2); R_36 := 40.5*R_23; R_21 = R_36+R_21; R_36 = R_21*R_22;
    R_36 = R_4+R_36; R_4 = -4.5*R_36; R_36 = (-216.0)*R_36; R_37 := pow(R_21,2);
    R_37 = R_12+R_37; R_37 = (-1.0/160.0)*R_37; R_23 = -3.375*R_23; R_15 = R_23+R_15;
    R_27 = R_15*R_27; R_27 = R_27+R_7; R_23 = 2.25*R_27; R_12 = 12.0*R_27;
    R_38 := 180.0*R_27; R_39 := 4.0*R_27; R_40 := 24.0*R_27; R_41 := 2.0*R_27;
    R_41 = R_33+R_41; R_22 = R_15*R_22; R_22 = R_0+R_22; R_0 = R_22*R_29;
    R_0 = -0.375*R_0; R_26 = R_22*R_26; R_26 = -4.5*R_26; R_33 = pow(R_22,2);
    R_21 = R_15*R_21; R_7 = R_21+R_7; R_42 := 12.0*R_7; R_43 := 4.0*R_7;
    R_44 := 270.0*R_7; R_45 := 24.0*R_7; R_7 = 2.0*R_7; R_7 = R_17+R_7;
    R_21 = (-1.0)*R_21; R_21 = R_9+R_21; R_15 = pow(R_15,2); R_2 = R_15+R_2;
    R_15 = 1/R_2; R_19 = R_15*R_19; R_9 = R_5+R_19; R_30 = R_9+R_30;
    R_9 = (-729.0/32.0)*R_30; R_9 = R_23+R_9; R_9 = R_9*R_11; R_30 = -121.5*R_30;
    R_12 = R_30+R_12; R_12 = R_24*R_12; R_12 = R_15*R_12; R_12 = 0.375*R_12;
    R_20 = R_12+R_20; R_8 = R_20*R_8; R_9 = R_8+R_9; R_9 = R_10+R_9;
    R_9 = (1.0/80.0)*R_9; R_35 = R_9+R_35; R_9 = -911.25*R_19; R_9 = R_31+R_9;
    R_38 = R_9+R_38; R_38 = R_24*R_38; R_24 = (-81.0)*R_19; R_39 = R_24+R_39;
    R_32 = R_39+R_32; R_32 = R_13*R_32; R_32 = 22.5*R_32; R_38 = R_32+R_38;
    R_38 = R_15*R_38; R_38 = R_16+R_38; R_13 = R_38*R_13; R_13 = (-9.0)*R_13;
    R_19 = (-1.0)*R_19; R_19 = R_3+R_19; R_3 = 10.125*R_19; R_3 = R_27+R_3;
    R_3 = (-1.0/12.0)*R_3; R_19 = 243.0*R_19; R_40 = R_19+R_40; R_40 = R_41*R_40;
    R_13 = R_40+R_13; R_13 = R_15*R_13; R_13 = (1.0/7680.0)*R_13; R_3 = R_13+R_3;
    R_3 = R_28+R_3; R_33 = R_15*R_33; R_14 = R_14+R_33; R_14 = R_5+R_14;
    R_14 = -2733.75*R_14; R_44 = R_14+R_44; R_44 = R_22*R_44; R_44 = R_15*R_44;
    R_44 = R_36+R_44; R_44 = R_22*R_44; R_44 = (-9.0)*R_44; R_33 = (-1.0)*R_33;
    R_33 = R_1+R_33; R_18 = R_33+R_18; R_33 = 121.5*R_18; R_42 = R_33+R_42;
    R_42 = R_22*R_42; R_42 = R_42*R_15; R_42 = 0.375*R_42; R_42 = R_4+R_42;
    R_29 = R_42*R_29; R_29 = R_26+R_29; R_26 = 40.5*R_18; R_26 = R_43+R_26;
    R_26 = R_25*R_26; R_26 = (9.0/16.0)*R_26; R_29 = R_26+R_29; R_29 = (1.0/80.0)*R_29;
    R_0 = R_29+R_0; R_29 = 243.0*R_18; R_45 = R_29+R_45; R_45 = R_7*R_45;
    R_44 = R_45+R_44; R_44 = R_15*R_44; R_44 = (1.0/7680.0)*R_44; R_18 = -10.125*R_18;
    R_18 = R_21+R_18; R_18 = (1.0/12.0)*R_18; R_44 = R_18+R_44; R_44 = R_37+R_44;
    R_37 = rsqrt(R_2); R_35 = R_37*R_35; R_3 = R_37*R_3; R_0 = R_37*R_0;
    R_44 = R_37*R_44; R_2 = sqrt(R_2); R_11 = R_2*R_11; R_11 = (3.0/16.0)*R_11;
    R_35 = R_11+R_35; R_35 = (-1.0)*R_35; R_25 = R_2*R_25; R_25 = (3.0/16.0)*R_25;
    R_0 = R_25+R_0; R_0 = (-1.0)*R_0; R_2 = (-1.0)*R_2; R_3 = R_2+R_3;
    R_6 = R_3*R_6; R_6 = R_35+R_6; R_3 = 1/R_3; R_6 = R_3*R_6;
    res[1] = R_6; R_44 = R_2+R_44; R_34 = R_44*R_34; R_34 = R_0+R_34;
    R_44 = 1/R_44; R_34 = R_44*R_34; res[0] = R_34; 
    return res
#
def inertia_operator_for_barycenter( var_inter, pos_nodes )
    R_0 := pos_nodes[3][1]; R_1 := (-1.0)*R_0; R_2 := pos_nodes[2][1]; R_3 := R_0+R_2;
    R_4 := (9.0/16.0)*R_3; R_5 := (-1.0)*R_2; R_0 = R_0+R_5; R_6 := -13.5*R_0;
    R_7 := (81.0/160.0)*R_0; R_0 = 3.375*R_0; R_2 = R_2+R_1; R_8 := -3.375*R_2;
    R_2 = 40.5*R_2; R_9 := pos_nodes[0][1]; R_10 := (-1.0)*R_9; R_11 := pos_nodes[1][1];
    R_12 := R_11+R_9; R_5 = R_5+R_12; R_5 = R_1+R_5; R_1 = pow(R_5,2);
    R_12 = (-1.0/16.0)*R_12; R_13 := R_12+R_4; R_14 := (-1.0)*R_11; R_9 = R_9+R_14;
    R_9 = 0.125*R_9; R_9 = R_0+R_9; R_15 := R_5*R_9; R_16 := pow(R_9,2);
    R_3 = R_14+R_3; R_3 = R_3+R_10; R_14 = pow(R_3,2); R_17 := (-1.0)*R_14;
    R_10 = R_11+R_10; R_11 = 4.5*R_10; R_11 = R_6+R_11; R_6 = R_9*R_11;
    R_18 := (33.0/160.0)*R_10; R_7 = R_18+R_7; R_18 = -0.125*R_10; R_8 = R_18+R_8;
    R_19 := R_3*R_8; R_20 := pow(R_8,2); R_0 = R_18+R_0; R_18 = R_3*R_0;
    R_21 := pow(R_0,2); R_10 = 13.5*R_10; R_2 = R_10+R_2; R_3 = R_3*R_2;
    R_10 = (-1.0)*R_3; R_8 = R_8*R_2; R_22 := (-1.0)*R_8; R_23 := pow(R_2,2);
    R_0 = R_2*R_0; R_2 = pos_nodes[1][0]; R_24 := (-1.0)*R_2; R_25 := pos_nodes[0][0];
    R_26 := R_25+R_2; R_27 := (-1.0/16.0)*R_26; R_28 := (-1.0)*R_25; R_2 = R_2+R_28;
    R_2 = 0.125*R_2; R_25 = R_25+R_24; R_29 := -4.5*R_25; R_30 := (-33.0/160.0)*R_25;
    R_31 := -0.125*R_25; R_32 := -13.5*R_25; R_25 = 0.125*R_25; R_33 := pos_nodes[2][0];
    R_34 := (-1.0)*R_33; R_35 := pos_nodes[3][0]; R_36 := (-1.0)*R_35; R_26 = R_36+R_26;
    R_26 = R_26+R_34; R_37 := pow(R_26,2); R_1 = R_37+R_1; R_1 = (81.0/16.0)*R_1;
    R_38 := (-1.0)*R_37; R_37 = R_14+R_37; R_39 := 1822.5*R_37; R_40 := 40.5*R_37;
    R_41 := 20.25*R_37; R_36 = R_33+R_36; R_42 := 13.5*R_36; R_42 = R_29+R_42;
    R_29 = 40.5*R_36; R_29 = R_29+R_32; R_43 := pow(R_29,2); R_43 = R_23+R_43;
    R_43 = (-1.0/160.0)*R_43; R_44 := 3.375*R_36; R_2 = R_44+R_2; R_2 = R_2*R_26;
    R_2 = R_19+R_2; R_7 = R_2*R_7; R_44 = R_31+R_44; R_44 = R_26*R_44;
    R_44 = R_19+R_44; R_31 = pow(R_44,2); R_36 = -3.375*R_36; R_36 = R_36+R_25;
    R_45 := R_36*R_29; R_46 := R_45+R_8; R_47 := 12.0*R_46; R_48 := 4.0*R_46;
    R_49 := 270.0*R_46; R_50 := 24.0*R_46; R_46 = 2.0*R_46; R_45 = (-1.0)*R_45;
    R_45 = R_22+R_45; R_22 = pow(R_36,2); R_20 = R_22+R_20; R_20 = 1/R_20;
    R_31 = R_20*R_31; R_22 = R_17+R_31; R_38 = R_22+R_38; R_38 = -121.5*R_38;
    R_22 = -911.25*R_31; R_22 = R_39+R_22; R_39 = (-81.0)*R_31; R_31 = (-1.0)*R_31;
    R_31 = R_37+R_31; R_37 = (-729.0/2560.0)*R_31; R_51 := 10.125*R_31; R_31 = 243.0*R_31;
    R_33 = R_35+R_33; R_52 := (9.0/16.0)*R_33; R_53 := R_27+R_52; R_33 = R_24+R_33;
    R_33 = R_28+R_33; R_28 = (3.0/16.0)*R_33; R_29 = R_29*R_33; R_29 = R_3+R_29;
    R_24 = -4.5*R_29; R_29 = (-216.0)*R_29; R_54 := R_36*R_33; R_54 = R_19+R_54;
    R_19 = pow(R_54,2); R_19 = R_20*R_19; R_55 := (-1.0)*R_19; R_55 = R_14+R_55;
    R_56 := pow(R_33,2); R_57 := (-1.0)*R_56; R_58 := R_57+R_17; R_19 = R_57+R_19;
    R_19 = R_17+R_19; R_19 = -2733.75*R_19; R_49 = R_19+R_49; R_49 = R_54*R_49;
    R_49 = R_20*R_49; R_49 = R_29+R_49; R_49 = R_54*R_49; R_49 = (-9.0)*R_49;
    R_55 = R_55+R_56; R_29 = 121.5*R_55; R_47 = R_29+R_47; R_47 = R_54*R_47;
    R_47 = R_47*R_20; R_47 = 0.375*R_47; R_47 = R_24+R_47; R_24 = 40.5*R_55;
    R_24 = R_48+R_24; R_24 = R_26*R_24; R_24 = (-9.0/1280.0)*R_24; R_48 = 243.0*R_55;
    R_50 = R_48+R_50; R_55 = -10.125*R_55; R_55 = R_45+R_55; R_55 = (1.0/12.0)*R_55;
    R_56 = R_14+R_56; R_14 = 20.25*R_56; R_46 = R_14+R_46; R_50 = R_46*R_50;
    R_49 = R_50+R_49; R_49 = R_20*R_49; R_49 = (1.0/7680.0)*R_49; R_49 = R_55+R_49;
    R_49 = R_43+R_49; R_49 = (-1.0)+R_49; R_53 = R_53*R_49; R_49 = 1/R_49;
    R_34 = R_35+R_34; R_35 = (81.0/160.0)*R_34; R_30 = R_35+R_30; R_30 = R_54*R_30;
    R_54 = -40.5*R_34; R_32 = R_54+R_32; R_54 = R_33*R_32; R_54 = R_3+R_54;
    R_35 = (-216.0)*R_54; R_54 = (-9.0)*R_54; R_43 = R_26*R_32; R_55 = (-1.0)*R_43;
    R_55 = R_3+R_55; R_55 = -4.5*R_55; R_43 = R_10+R_43; R_43 = 216.0*R_43;
    R_36 = R_36*R_32; R_8 = R_36+R_8; R_36 = 12.0*R_8; R_36 = R_38+R_36;
    R_36 = R_44*R_36; R_36 = R_20*R_36; R_36 = 0.375*R_36; R_55 = R_36+R_55;
    R_55 = R_55*R_9; R_55 = (-1.0/80.0)*R_55; R_36 = (-9.0/320.0)*R_8; R_36 = R_37+R_36;
    R_36 = (-3.0/16.0)+R_36; R_36 = R_5*R_36; R_51 = R_8+R_51; R_51 = (-1.0/12.0)*R_51;
    R_37 = 180.0*R_8; R_37 = R_22+R_37; R_37 = R_44*R_37; R_44 = 4.0*R_8;
    R_44 = R_39+R_44; R_40 = R_44+R_40; R_40 = R_2*R_40; R_40 = 22.5*R_40;
    R_37 = R_40+R_37; R_37 = R_20*R_37; R_37 = R_43+R_37; R_2 = R_37*R_2;
    R_2 = (-9.0)*R_2; R_37 = 24.0*R_8; R_37 = R_31+R_37; R_8 = 2.0*R_8;
    R_8 = R_41+R_8; R_37 = R_8*R_37; R_2 = R_37+R_2; R_2 = R_20*R_2;
    R_2 = (1.0/7680.0)*R_2; R_51 = R_2+R_51; R_2 = pow(R_32,2); R_2 = R_23+R_2;
    R_23 = 0.5*R_2; R_2 = (-1.0/160.0)*R_2; R_51 = R_2+R_51; R_51 = (-1.0)+R_51;
    R_13 = R_13*R_51; R_13 = R_55+R_13; R_13 = R_36+R_13; R_7 = R_13+R_7;
    R_51 = 1/R_51; R_7 = R_51*R_7; R_7 = (-1.0)*R_7; R_7 = R_12+R_7;
    R_7 = R_4+R_7; R_11 = R_11*R_7; R_5 = R_5*R_7; R_9 = R_9*R_7;
    R_7 = pow(R_7,2); R_34 = 3.375*R_34; R_25 = R_34+R_25; R_34 = R_25*R_42;
    R_34 = R_6+R_34; R_34 = 2.0*R_34; R_34 = R_1+R_34; R_1 = R_26*R_25;
    R_1 = R_15+R_1; R_1 = 4.5*R_1; R_47 = R_47*R_25; R_47 = (-1.0/80.0)*R_47;
    R_47 = R_24+R_47; R_47 = R_53+R_47; R_47 = R_28+R_47; R_30 = R_47+R_30;
    R_30 = R_49*R_30; R_30 = (-1.0)*R_30; R_30 = R_52+R_30; R_30 = R_27+R_30;
    R_42 = R_30*R_42; R_42 = R_11+R_42; R_42 = 2.0*R_42; R_42 = R_1+R_42;
    R_26 = R_26*R_30; R_26 = R_5+R_26; R_26 = 4.5*R_26; R_5 = R_25*R_30;
    R_5 = R_9+R_5; R_30 = pow(R_30,2); R_30 = R_7+R_30; R_33 = R_25*R_33;
    R_18 = R_33+R_18; R_42 = R_18*R_42; R_42 = -4.5*R_42; R_33 = R_18*R_5;
    R_33 = (-9.0)*R_33; R_7 = pow(R_18,2); R_9 = pow(R_25,2); R_16 = R_9+R_16;
    R_26 = R_16+R_26; R_21 = R_9+R_21; R_9 = sqrt(R_21); R_34 = R_9*R_34;
    R_16 = R_9*R_30; R_9 = R_9*R_26; R_1 = rsqrt(R_21); R_21 = 1/R_21;
    R_7 = R_21*R_7; R_58 = R_7+R_58; R_11 = -10.125*R_58; R_58 = -2733.75*R_58;
    R_7 = (-1.0)*R_7; R_7 = R_56+R_7; R_56 = 243.0*R_7; R_27 = 121.5*R_7;
    R_7 = 10.125*R_7; R_32 = R_25*R_32; R_0 = R_32+R_0; R_11 = R_0+R_11;
    R_26 = R_11*R_26; R_11 = 24.0*R_0; R_11 = R_56+R_11; R_56 = 2.0*R_0;
    R_56 = R_14+R_56; R_11 = R_56*R_11; R_56 = 270.0*R_0; R_58 = R_56+R_58;
    R_58 = R_18*R_58; R_58 = R_21*R_58; R_58 = R_35+R_58; R_58 = R_18*R_58;
    R_58 = (-9.0)*R_58; R_11 = R_58+R_11; R_11 = R_21*R_11; R_11 = (-1.0/96.0)*R_11;
    R_11 = R_23+R_11; R_11 = R_11*R_30; R_23 = 12.0*R_0; R_23 = R_27+R_23;
    R_23 = R_18*R_23; R_21 = R_23*R_21; R_21 = 0.75*R_21; R_54 = R_21+R_54;
    R_5 = R_54*R_5; R_5 = R_42+R_5; R_11 = R_5+R_11; R_26 = R_11+R_26;
    R_26 = R_1*R_26; R_34 = R_26+R_34; R_34 = (1.0/80.0)*R_34; R_7 = R_0+R_7;
    R_30 = R_7*R_30; R_33 = R_30+R_33; R_1 = R_33*R_1; R_9 = R_1+R_9;
    R_9 = (1.0/12.0)*R_9; R_16 = R_9+R_16; R_34 = R_16+R_34; res := R_34;
    return res
