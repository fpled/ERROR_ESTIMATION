static const nvi := 1
static const nb_nodes := 3
static const nb_vertex_nodes := 2
static const center_of_var_inter := [ 1.0/2.0 ]
#
def interpolation( var_inter, val, interpolation_base )
    if interpolation_base == "lagrange"
        return val[0]*(1+var_inter[0]*(2*var_inter[0]-3))+val[2]*(2*var_inter[0]-1)*var_inter[0]-4*(var_inter[0]-1)*var_inter[0]*val[1]
    else if interpolation_base == "hierarchical"
        return val[0]*(1-var_inter[0])+val[2]*var_inter[0]-4*(var_inter[0]-1)*var_inter[0]*val[1]

#
def generic_interpolation( var_inter, val, interpolation_base, deg ) when deg == 2
    if interpolation_base == "lagrange"
        return (1+var_inter[0]*(2*var_inter[0]-3))*val[0]+(2*var_inter[0]-1)*var_inter[0]*val[2]-4*(var_inter[0]-1)*var_inter[0]*val[1]
    else if interpolation_base == "hierarchical"
        return (1-var_inter[0])*val[0]+var_inter[0]*val[2]-4*(var_inter[0]-1)*var_inter[0]*val[1]

#
def interpolation_vertex( var_inter, val_vertex )
    return var_inter[0]*val_vertex[1]+(1-var_inter[0])*val_vertex[0]
#
def nb_children( sub_nvi ) when sub_nvi==0
    return 1
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==0
    return child_var_inter
def type_child( sub_nvi, num_child ) when sub_nvi==0
    return BarGeneric[Int32]
def node_number_child( sub_nvi, num_child ) when sub_nvi==0
    return 0 .. 3
#
def nb_children( sub_nvi ) when sub_nvi==1
    return 2
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==0
    return [0]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return [0]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==1
    return [1]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return [2]
def normal( var_inter, pos_nodes )
    res := Vec[ type_promote(var_inter[0],pos_nodes[0][0],mul), 2 ]()
    R_0 := pos_nodes[1][0]; R_1 := pos_nodes[0][0]; R_2 := pos_nodes[2][0]; R_3 := pos_nodes[2][1];
    R_4 := pos_nodes[1][1]; R_5 := var_inter[0]; R_6 := 2.0*R_5; R_6 = (-1.0)+R_6;
    R_0 = R_6*R_0; R_0 = (-4.0)*R_0; R_4 = R_6*R_4; R_4 = (-4.0)*R_4;
    R_5 = 4.0*R_5; R_6 = (-1.0)+R_5; R_2 = R_2*R_6; R_6 = R_3*R_6;
    R_5 = (-3.0)+R_5; R_1 = R_1*R_5; R_0 = R_1+R_0; R_0 = R_2+R_0;
    R_2 = pow(R_0,2); R_1 = pos_nodes[0][1]; R_5 = R_1*R_5; R_4 = R_5+R_4;
    R_6 = R_4+R_6; R_4 = pow(R_6,2); R_2 = R_4+R_2; R_2 = rsqrt(R_2);
    R_0 = R_2*R_0; R_0 = (-1.0)*R_0; res[1] = R_0; R_6 = R_2*R_6;
    res[0] = R_6; 
    return res
#
def jac_mat( var_inter, pos_nodes )
    res := Mat[ type_promote(var_inter[0],pos_nodes[0][0],mul), Gen[ 1, 2 ] ]()
    R_0 := pos_nodes[2][1]; R_1 := pos_nodes[1][1]; R_2 := pos_nodes[0][1]; R_3 := pos_nodes[1][0];
    R_4 := pos_nodes[0][0]; R_5 := var_inter[0]; R_6 := 2.0*R_5; R_6 = (-1.0)+R_6;
    R_1 = R_6*R_1; R_1 = (-4.0)*R_1; R_3 = R_6*R_3; R_3 = (-4.0)*R_3;
    R_5 = 4.0*R_5; R_6 = (-3.0)+R_5; R_2 = R_2*R_6; R_1 = R_2+R_1;
    R_6 = R_4*R_6; R_3 = R_6+R_3; R_5 = (-1.0)+R_5; R_0 = R_0*R_5;
    R_0 = R_1+R_0; res(0,1) = R_0; R_0 = pos_nodes[2][0]; R_5 = R_0*R_5;
    R_3 = R_5+R_3; res(0,0) = R_3; 
    return res
#
def jac( var_inter, pos_nodes )
    R_0 := pos_nodes[1][0]; R_1 := pos_nodes[0][0]; R_2 := pos_nodes[2][0]; R_3 := pos_nodes[2][1];
    R_4 := pos_nodes[1][1]; R_5 := var_inter[0]; R_6 := 2.0*R_5; R_6 = (-1.0)+R_6;
    R_0 = R_6*R_0; R_0 = (-4.0)*R_0; R_4 = R_6*R_4; R_4 = (-4.0)*R_4;
    R_5 = 4.0*R_5; R_6 = (-1.0)+R_5; R_2 = R_2*R_6; R_6 = R_3*R_6;
    R_5 = (-3.0)+R_5; R_1 = R_1*R_5; R_0 = R_1+R_0; R_0 = R_2+R_0;
    R_0 = pow(R_0,2); R_2 = pos_nodes[0][1]; R_5 = R_2*R_5; R_4 = R_5+R_4;
    R_6 = R_4+R_6; R_6 = pow(R_6,2); R_0 = R_6+R_0; R_0 = sqrt(R_0);
    res := R_0; 
    return res
#
def inv_jac_mat( var_inter, pos_nodes )
    assert( 0, "inv_jac_mat() available only when nb var inter == dim" )
#
def measure( var_inter, pos_nodes )
    R_0 := pos_nodes[0][0]; R_1 := (-1.0)*R_0; R_2 := pos_nodes[2][0]; R_1 = R_2+R_1;
    R_3 := pow(R_1,2); R_0 = R_2+R_0; R_0 = 4.0*R_0; R_2 = pos_nodes[1][0];
    R_2 = (-8.0)*R_2; R_0 = R_2+R_0; R_1 = R_1*R_0; R_0 = pow(R_0,2);
    R_2 = pos_nodes[2][1]; R_4 := pos_nodes[0][1]; R_5 := (-1.0)*R_4; R_5 = R_2+R_5;
    R_6 := pow(R_5,2); R_3 = R_6+R_3; R_6 = rsqrt(R_3); R_7 := sqrt(R_3);
    R_8 := pow(R_3,-3/2.0); R_3 = 1/R_3; R_2 = R_4+R_2; R_2 = 4.0*R_2;
    R_4 = pos_nodes[1][1]; R_4 = (-8.0)*R_4; R_2 = R_4+R_2; R_5 = R_5*R_2;
    R_1 = R_5+R_1; R_1 = pow(R_1,2); R_3 = R_1*R_3; R_1 = (-60.0)*R_3;
    R_3 = (-1.0)*R_3; R_2 = pow(R_2,2); R_0 = R_2+R_0; R_2 = 12.0*R_0;
    R_1 = R_2+R_1; R_3 = R_0+R_3; R_6 = R_3*R_6; R_6 = (1.0/24.0)*R_6;
    R_6 = R_7+R_6; R_8 = R_3*R_8; R_1 = R_8*R_1; R_1 = (-1.0/7680.0)*R_1;
    R_6 = R_1+R_6; res := R_6; 
    return res
