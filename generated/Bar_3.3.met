static const nvi := 1
static const nb_nodes := 3
static const nb_vertex_nodes := 2
static const center_of_var_inter := [ 1.0/2.0 ]
#
def interpolation( var_inter, val, interpolation_base )
    if interpolation_base == "lagrange"
        return (1+(2*var_inter[0]-3)*var_inter[0])*val[0]+(2*var_inter[0]-1)*var_inter[0]*val[1]-4*(var_inter[0]-1)*var_inter[0]*val[2]
    else if interpolation_base == "hierarchical"
        return (1-var_inter[0])*val[0]+var_inter[0]*val[1]-4*(var_inter[0]-1)*var_inter[0]*val[2]

#
def generic_interpolation( var_inter, val, interpolation_base, deg ) when deg == 2
    if interpolation_base == "lagrange"
        return val[2]*(2*var_inter[0]-1)*var_inter[0]+(1+(2*var_inter[0]-3)*var_inter[0])*val[0]-4*(var_inter[0]-1)*var_inter[0]*val[1]
    else if interpolation_base == "hierarchical"
        return val[0]*(1-var_inter[0])+val[2]*var_inter[0]-4*(var_inter[0]-1)*var_inter[0]*val[1]

#
def generic_interpolation( var_inter, val, interpolation_base, deg ) when deg == 3
    if interpolation_base == "lagrange"
        return (1+((9-9.0/2.0*var_inter[0])*var_inter[0]-11.0/2.0)*var_inter[0])*val[0]+val[1]*(9+(27.0/2.0*var_inter[0]-45.0/2.0)*var_inter[0])*var_inter[0]+val[2]*((18-27.0/2.0*var_inter[0])*var_inter[0]-9.0/2.0)*var_inter[0]+val[3]*(1-9.0/2.0*var_inter[0]*(1-var_inter[0]))*var_inter[0]
    else if interpolation_base == "hierarchical"
        return val[0]*(1-var_inter[0])+val[1]*(9+(27.0/2.0*var_inter[0]-45.0/2.0)*var_inter[0])*var_inter[0]+val[2]*((18-27.0/2.0*var_inter[0])*var_inter[0]-9.0/2.0)*var_inter[0]+val[3]*var_inter[0]

#
def generic_interpolation( var_inter, val, interpolation_base, deg ) when deg == 4
    if interpolation_base == "lagrange"
        return val[2]*((76+(64*var_inter[0]-128)*var_inter[0])*var_inter[0]-12)*var_inter[0]+val[1]*(16+((96-128.0/3.0*var_inter[0])*var_inter[0]-208.0/3.0)*var_inter[0])*var_inter[0]+val[0]*(1+((70.0/3.0+(32.0/3.0*var_inter[0]-80.0/3.0)*var_inter[0])*var_inter[0]-25.0/3.0)*var_inter[0])+(16.0/3.0+((224.0/3.0-128.0/3.0*var_inter[0])*var_inter[0]-112.0/3.0)*var_inter[0])*var_inter[0]*val[3]+val[4]*((22.0/3.0+(32.0/3.0*var_inter[0]-16)*var_inter[0])*var_inter[0]-1)*var_inter[0]
    else if interpolation_base == "hierarchical"
        return val[2]*((76+(64*var_inter[0]-128)*var_inter[0])*var_inter[0]-12)*var_inter[0]+val[0]*(1-var_inter[0])+val[1]*(16+((96-128.0/3.0*var_inter[0])*var_inter[0]-208.0/3.0)*var_inter[0])*var_inter[0]+(16.0/3.0+((224.0/3.0-128.0/3.0*var_inter[0])*var_inter[0]-112.0/3.0)*var_inter[0])*var_inter[0]*val[3]+val[4]*var_inter[0]

#
def generic_interpolation( var_inter, val, interpolation_base, deg ) when deg == 5
    if interpolation_base == "lagrange"
        return val[4]*((1525.0/24.0+((6875.0/24.0-3125.0/24.0*var_inter[0])*var_inter[0]-5125.0/24.0)*var_inter[0])*var_inter[0]-25.0/4.0)*var_inter[0]+val[2]*((2675.0/12.0+((8125.0/12.0-3125.0/12.0*var_inter[0])*var_inter[0]-7375.0/12.0)*var_inter[0])*var_inter[0]-25)*var_inter[0]+val[0]*(1+((375.0/8.0+((625.0/8.0-625.0/24.0*var_inter[0])*var_inter[0]-2125.0/24.0)*var_inter[0])*var_inter[0]-137.0/12.0)*var_inter[0])+val[1]*(25+((8875.0/24.0+(3125.0/24.0*var_inter[0]-4375.0/12.0)*var_inter[0])*var_inter[0]-1925.0/12.0)*var_inter[0])*var_inter[0]+val[3]*(50.0/3.0+((6125.0/12.0+(3125.0/12.0*var_inter[0]-625)*var_inter[0])*var_inter[0]-325.0/2.0)*var_inter[0])*var_inter[0]+val[5]*(1+((875.0/24.0+(625.0/24.0*var_inter[0]-625.0/12.0)*var_inter[0])*var_inter[0]-125.0/12.0)*var_inter[0])*var_inter[0]
    else if interpolation_base == "hierarchical"
        return val[4]*((1525.0/24.0+((6875.0/24.0-3125.0/24.0*var_inter[0])*var_inter[0]-5125.0/24.0)*var_inter[0])*var_inter[0]-25.0/4.0)*var_inter[0]+val[2]*((2675.0/12.0+((8125.0/12.0-3125.0/12.0*var_inter[0])*var_inter[0]-7375.0/12.0)*var_inter[0])*var_inter[0]-25)*var_inter[0]+val[1]*(25+((8875.0/24.0+(3125.0/24.0*var_inter[0]-4375.0/12.0)*var_inter[0])*var_inter[0]-1925.0/12.0)*var_inter[0])*var_inter[0]+val[0]*(1-var_inter[0])+val[3]*(50.0/3.0+((6125.0/12.0+(3125.0/12.0*var_inter[0]-625)*var_inter[0])*var_inter[0]-325.0/2.0)*var_inter[0])*var_inter[0]+val[5]*var_inter[0]

#
def interpolation_vertex( var_inter, val_vertex )
    return (1-var_inter[0])*val_vertex[0]+val_vertex[1]*var_inter[0]
#
def nb_children( sub_nvi ) when sub_nvi==0
    return 1
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==0
    return child_var_inter
def type_child( sub_nvi, num_child ) when sub_nvi==0
    return Bar_3
def node_number_child( sub_nvi, num_child ) when sub_nvi==0
    return 0 .. 3
#
def nb_children( sub_nvi ) when sub_nvi==1
    return 2
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==0
    return [0]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return [0]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==1
    return [1]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return [1]
def normal( var_inter, pos_nodes )
    assert( 0, "normal is defined only for nb_dim == nvi + 1" )
#
def jac_mat( var_inter, pos_nodes )
    res := Mat[ type_promote(var_inter[0],pos_nodes[0][0],mul), Gen[ 1, 3 ] ]()
    R_0 := pos_nodes[2][2]; R_1 := pos_nodes[0][2]; R_2 := pos_nodes[1][2]; R_3 := pos_nodes[2][1];
    R_4 := pos_nodes[0][1]; R_5 := pos_nodes[1][1]; R_6 := pos_nodes[2][0]; R_7 := pos_nodes[1][0];
    R_8 := pos_nodes[0][0]; R_9 := var_inter[0]; R_10 := 2.0*R_9; R_10 = (-1.0)+R_10;
    R_0 = R_10*R_0; R_0 = (-4.0)*R_0; R_3 = R_10*R_3; R_3 = (-4.0)*R_3;
    R_6 = R_10*R_6; R_6 = (-4.0)*R_6; R_9 = 4.0*R_9; R_10 = (-1.0)+R_9;
    R_2 = R_10*R_2; R_5 = R_10*R_5; R_7 = R_10*R_7; R_9 = (-3.0)+R_9;
    R_1 = R_9*R_1; R_1 = R_2+R_1; R_0 = R_1+R_0; res(0,2) = R_0;
    R_4 = R_9*R_4; R_4 = R_5+R_4; R_3 = R_4+R_3; res(0,1) = R_3;
    R_8 = R_9*R_8; R_7 = R_8+R_7; R_6 = R_7+R_6; res(0,0) = R_6;
    return res
#
def jac( var_inter, pos_nodes )
    R_0 := pos_nodes[2][1]; R_1 := pos_nodes[0][1]; R_2 := pos_nodes[1][1]; R_3 := pos_nodes[2][0];
    R_4 := pos_nodes[1][0]; R_5 := pos_nodes[0][0]; R_6 := pos_nodes[2][2]; R_7 := pos_nodes[0][2];
    R_8 := pos_nodes[1][2]; R_9 := var_inter[0]; R_10 := 2.0*R_9; R_10 = (-1.0)+R_10;
    R_0 = R_10*R_0; R_0 = (-4.0)*R_0; R_3 = R_10*R_3; R_3 = (-4.0)*R_3;
    R_6 = R_10*R_6; R_6 = (-4.0)*R_6; R_9 = 4.0*R_9; R_10 = (-3.0)+R_9;
    R_1 = R_10*R_1; R_5 = R_10*R_5; R_7 = R_10*R_7; R_9 = (-1.0)+R_9;
    R_2 = R_9*R_2; R_1 = R_2+R_1; R_0 = R_1+R_0; R_0 = pow(R_0,2);
    R_4 = R_9*R_4; R_4 = R_5+R_4; R_3 = R_4+R_3; R_3 = pow(R_3,2);
    R_0 = R_3+R_0; R_8 = R_9*R_8; R_7 = R_8+R_7; R_6 = R_7+R_6;
    R_6 = pow(R_6,2); R_0 = R_6+R_0; R_0 = sqrt(R_0); res := R_0;
    return res
#
def inv_jac_mat( var_inter, pos_nodes )
    assert( 0, "inv_jac_mat() available only when nb var inter == dim" )
#
def measure( var_inter, pos_nodes )
    R_0 := pos_nodes[1][1]; R_1 := pos_nodes[0][1]; R_2 := (-1.0)*R_1; R_2 = R_2+R_0;
    R_3 := pow(R_2,2); R_0 = R_1+R_0; R_0 = 4.0*R_0; R_1 = pos_nodes[2][1];
    R_1 = (-8.0)*R_1; R_0 = R_1+R_0; R_2 = R_2*R_0; R_0 = pow(R_0,2);
    R_1 = pos_nodes[1][0]; R_4 := pos_nodes[0][0]; R_5 := (-1.0)*R_4; R_5 = R_5+R_1;
    R_6 := pow(R_5,2); R_3 = R_6+R_3; R_1 = R_4+R_1; R_1 = 4.0*R_1;
    R_4 = pos_nodes[2][0]; R_4 = (-8.0)*R_4; R_1 = R_4+R_1; R_5 = R_5*R_1;
    R_2 = R_5+R_2; R_1 = pow(R_1,2); R_5 = R_1+R_0; R_4 = pos_nodes[2][2];
    R_4 = (-8.0)*R_4; R_6 = pos_nodes[0][2]; R_7 := (-1.0)*R_6; R_8 := pos_nodes[1][2];
    R_7 = R_7+R_8; R_9 := pow(R_7,2); R_3 = R_9+R_3; R_9 = sqrt(R_3);
    R_10 := rsqrt(R_3); R_11 := pow(R_3,-3/2.0); R_3 = 1/R_3; R_6 = R_8+R_6;
    R_6 = 4.0*R_6; R_4 = R_6+R_4; R_7 = R_4*R_7; R_7 = R_2+R_7;
    R_7 = pow(R_7,2); R_7 = R_3*R_7; R_3 = (-1.0)*R_7; R_7 = (-60.0)*R_7;
    R_4 = pow(R_4,2); R_1 = R_4+R_1; R_1 = R_0+R_1; R_1 = R_3+R_1;
    R_10 = R_1*R_10; R_10 = (1.0/24.0)*R_10; R_9 = R_10+R_9; R_5 = R_4+R_5;
    R_5 = 12.0*R_5; R_7 = R_5+R_7; R_11 = R_7*R_11; R_1 = R_11*R_1;
    R_1 = (-1.0/7680.0)*R_1; R_9 = R_1+R_9; res := R_9; 
    return res
#
def barycenter( var_inter, pos_nodes )
    res := Vec[ type_promote(var_inter[0],pos_nodes[0][0],mul), 3 ]()
    R_0 := pos_nodes[2][2]; R_1 := (-2.0)*R_0; R_2 := (-4.0)*R_0; R_3 := (-8.0)*R_0;
    R_4 := pos_nodes[2][1]; R_5 := (-4.0)*R_4; R_6 := (-8.0)*R_4; R_7 := pos_nodes[2][0];
    R_8 := (-2.0)*R_7; R_9 := (-8.0)*R_7; R_10 := (-4.0)*R_7; R_11 := pos_nodes[1][1];
    R_12 := pos_nodes[0][1]; R_13 := R_12+R_11; R_14 := 2.0*R_13; R_5 = R_14+R_5;
    R_13 = 4.0*R_13; R_13 = R_6+R_13; R_6 = pow(R_13,2); R_14 = (-1.0)*R_6;
    R_12 = (-1.0)*R_12; R_11 = R_12+R_11; R_13 = R_11*R_13; R_12 = pow(R_11,2);
    R_15 := pos_nodes[1][0]; R_16 := pos_nodes[0][0]; R_17 := R_16+R_15; R_8 = R_17+R_8;
    R_18 := 4.0*R_17; R_18 = R_9+R_18; R_9 = pow(R_18,2); R_19 := R_9+R_6;
    R_20 := (-1.0)*R_9; R_17 = 2.0*R_17; R_10 = R_17+R_10; R_16 = (-1.0)*R_16;
    R_15 = R_16+R_15; R_18 = R_15*R_18; R_13 = R_18+R_13; R_18 = pow(R_15,2);
    R_12 = R_18+R_12; R_18 = pos_nodes[1][2]; R_1 = R_1+R_18; R_16 = pos_nodes[0][2];
    R_1 = R_1+R_16; R_17 = R_18+R_16; R_21 := 2.0*R_17; R_21 = R_2+R_21;
    R_17 = 4.0*R_17; R_3 = R_17+R_3; R_17 = pow(R_3,2); R_19 = R_17+R_19;
    R_2 = (-1.0)*R_19; R_22 := (-1.0)*R_17; R_9 = R_17+R_9; R_9 = R_6+R_9;
    R_6 = 0.125*R_9; R_16 = (-1.0)*R_16; R_18 = R_16+R_18; R_3 = R_3*R_18;
    R_3 = R_13+R_3; R_13 = R_3*R_18; R_16 = R_11*R_3; R_16 = (-1.0/12.0)*R_16;
    R_15 = R_15*R_3; R_17 = (-1.0/12.0)*R_15; R_23 := pow(R_3,2); R_24 := pow(R_18,2);
    R_12 = R_24+R_12; R_24 = 1/R_12; R_13 = R_24*R_13; R_13 = -0.5*R_13;
    R_13 = R_1+R_13; R_11 = R_11*R_24; R_11 = R_11*R_3; R_23 = R_24*R_23;
    R_1 = -0.625*R_23; R_6 = R_1+R_6; R_6 = R_24*R_6; R_6 = (1.0/80.0)*R_6;
    R_6 = (-1.0/24.0)+R_6; R_2 = R_23+R_2; R_11 = R_11*R_2; R_2 = R_15*R_2;
    R_2 = R_24*R_2; R_2 = 0.5*R_2; R_20 = R_23+R_20; R_20 = R_22+R_20;
    R_20 = R_14+R_20; R_20 = R_23*R_20; R_14 = 60.0*R_20; R_20 = 0.625*R_20;
    R_23 = (-1.0)*R_23; R_9 = R_23+R_9; R_23 = R_9*R_5; R_11 = R_23+R_11;
    R_11 = (-1.0/160.0)*R_11; R_16 = R_11+R_16; R_8 = R_9*R_8; R_2 = R_8+R_2;
    R_2 = (-1.0/80.0)*R_2; R_2 = R_17+R_2; R_19 = R_19*R_9; R_17 = 12.0*R_19;
    R_17 = R_14+R_17; R_17 = R_24*R_17; R_17 = (1.0/7680.0)*R_17; R_19 = 0.125*R_19;
    R_19 = R_20+R_19; R_19 = R_24*R_19; R_19 = (1.0/80.0)*R_19; R_24 = (-1.0/24.0)*R_9;
    R_17 = R_24+R_17; R_19 = R_24+R_19; R_24 = rsqrt(R_12); R_13 = R_24*R_13;
    R_13 = R_9*R_13; R_13 = (-1.0/80.0)*R_13; R_3 = R_3*R_24; R_3 = R_18*R_3;
    R_6 = R_24*R_6; R_6 = R_9*R_6; R_17 = R_24*R_17; R_16 = R_24*R_16;
    R_2 = R_24*R_2; R_19 = R_24*R_19; R_12 = sqrt(R_12); R_21 = R_12*R_21;
    R_3 = R_21+R_3; R_3 = (-1.0/12.0)*R_3; R_5 = R_12*R_5; R_5 = (-1.0/12.0)*R_5;
    R_21 = (-1.0)*R_12; R_6 = R_21+R_6; R_0 = R_6*R_0; R_0 = R_13+R_0;
    R_0 = R_3+R_0; R_6 = 1/R_6; R_0 = R_6*R_0; res[2] = R_0;
    R_17 = R_21+R_17; R_0 = 1/R_17; R_4 = R_17*R_4; R_4 = R_5+R_4;
    R_4 = R_16+R_4; R_0 = R_4*R_0; res[1] = R_0; R_19 = R_21+R_19;
    R_21 = 1/R_19; R_7 = R_19*R_7; R_10 = R_12*R_10; R_10 = (-1.0/12.0)*R_10;
    R_7 = R_10+R_7; R_2 = R_7+R_2; R_21 = R_2*R_21; res[0] = R_21;
    return res
#
def inertia_operator_for_barycenter( var_inter, pos_nodes )
    R_0 := pos_nodes[2][2]; R_1 := (-2.0)*R_0; R_2 := (-4.0)*R_0; R_3 := (-8.0)*R_0;
    R_4 := pos_nodes[2][1]; R_5 := (-4.0)*R_4; R_6 := (-8.0)*R_4; R_7 := pos_nodes[2][0];
    R_8 := (-2.0)*R_7; R_9 := (-4.0)*R_7; R_10 := (-8.0)*R_7; R_11 := pos_nodes[1][1];
    R_12 := pos_nodes[0][1]; R_13 := R_12+R_11; R_14 := (-1.0/6.0)*R_13; R_15 := 2.0*R_13;
    R_5 = R_15+R_5; R_15 = pow(R_5,2); R_13 = 4.0*R_13; R_13 = R_6+R_13;
    R_6 = pow(R_13,2); R_16 := (-1.0)*R_6; R_12 = (-1.0)*R_12; R_11 = R_12+R_11;
    R_12 = R_11*R_5; R_13 = R_11*R_13; R_17 := pow(R_11,2); R_18 := pos_nodes[1][0];
    R_19 := pos_nodes[0][0]; R_20 := R_19+R_18; R_21 := (-1.0/6.0)*R_20; R_8 = R_20+R_8;
    R_22 := 2.0*R_20; R_9 = R_22+R_9; R_22 = pow(R_9,2); R_15 = R_22+R_15;
    R_20 = 4.0*R_20; R_20 = R_10+R_20; R_10 = pow(R_20,2); R_22 = R_10+R_6;
    R_23 := (-1.0)*R_10; R_19 = (-1.0)*R_19; R_18 = R_19+R_18; R_19 = R_18*R_9;
    R_12 = R_19+R_12; R_20 = R_18*R_20; R_13 = R_20+R_13; R_20 = pow(R_18,2);
    R_19 = R_20+R_17; R_24 := pos_nodes[1][2]; R_1 = R_1+R_24; R_25 := pos_nodes[0][2];
    R_1 = R_1+R_25; R_26 := R_24+R_25; R_27 := 2.0*R_26; R_28 := R_2+R_27;
    R_29 := pow(R_28,2); R_29 = R_15+R_29; R_26 = 4.0*R_26; R_3 = R_26+R_3;
    R_26 = pow(R_3,2); R_22 = R_26+R_22; R_15 = (-1.0)*R_22; R_30 := (-1.0)*R_26;
    R_10 = R_26+R_10; R_10 = R_6+R_10; R_6 = -0.125*R_10; R_26 = 0.125*R_10;
    R_25 = (-1.0)*R_25; R_24 = R_25+R_24; R_25 = R_28*R_24; R_12 = R_25+R_12;
    R_3 = R_3*R_24; R_3 = R_13+R_3; R_13 = R_11*R_3; R_13 = (-1.0/12.0)*R_13;
    R_25 = R_18*R_3; R_31 := (-1.0/12.0)*R_25; R_32 := R_3*R_24; R_2 = R_2+R_32;
    R_2 = R_27+R_2; R_2 = (-1.0/12.0)*R_2; R_27 = pow(R_3,2); R_12 = R_3*R_12;
    R_12 = 2.0*R_12; R_33 := pow(R_24,2); R_20 = R_33+R_20; R_20 = R_17+R_20;
    R_19 = R_33+R_19; R_33 = sqrt(R_19); R_29 = R_33*R_29; R_17 = 1/R_19;
    R_34 := R_11*R_17; R_34 = R_34*R_3; R_32 = R_17*R_32; R_32 = -0.5*R_32;
    R_32 = R_1+R_32; R_27 = R_17*R_27; R_1 = 0.625*R_27; R_1 = R_6+R_1;
    R_15 = R_27+R_15; R_34 = R_34*R_15; R_15 = R_25*R_15; R_15 = R_17*R_15;
    R_15 = 0.5*R_15; R_23 = R_27+R_23; R_23 = R_30+R_23; R_23 = R_16+R_23;
    R_23 = R_27*R_23; R_16 = 60.0*R_23; R_23 = 0.625*R_23; R_30 = -0.625*R_27;
    R_26 = R_30+R_26; R_26 = R_17*R_26; R_26 = (1.0/80.0)*R_26; R_26 = (-1.0/24.0)+R_26;
    R_27 = (-1.0)*R_27; R_10 = R_27+R_10; R_27 = R_10*R_5; R_34 = R_27+R_34;
    R_34 = (-1.0/160.0)*R_34; R_13 = R_34+R_13; R_8 = R_10*R_8; R_15 = R_8+R_15;
    R_15 = (-1.0/80.0)*R_15; R_15 = R_31+R_15; R_22 = R_22*R_10; R_31 = 12.0*R_22;
    R_31 = R_16+R_31; R_31 = R_17*R_31; R_31 = (1.0/7680.0)*R_31; R_22 = 0.125*R_22;
    R_22 = R_23+R_22; R_22 = R_17*R_22; R_22 = (1.0/80.0)*R_22; R_23 = (-1.0/24.0)*R_10;
    R_31 = R_23+R_31; R_16 = (-2.0/3.0)+R_31; R_16 = R_16*R_4; R_16 = R_13+R_16;
    R_16 = R_14+R_16; R_31 = (-1.0)+R_31; R_31 = 1/R_31; R_16 = R_31*R_16;
    R_16 = (-1.0)*R_16; R_4 = R_16+R_4; R_16 = pow(R_4,2); R_11 = R_11*R_4;
    R_4 = R_5*R_4; R_22 = R_23+R_22; R_23 = (-2.0/3.0)+R_22; R_23 = R_23*R_7;
    R_23 = R_15+R_23; R_21 = R_23+R_21; R_22 = (-1.0)+R_22; R_22 = 1/R_22;
    R_21 = R_22*R_21; R_21 = (-1.0)*R_21; R_7 = R_21+R_7; R_21 = pow(R_7,2);
    R_16 = R_21+R_16; R_18 = R_18*R_7; R_11 = R_18+R_11; R_7 = R_9*R_7;
    R_4 = R_7+R_4; R_32 = R_10*R_32; R_32 = (-1.0/80.0)*R_32; R_26 = R_10*R_26;
    R_26 = (-1.0)+R_26; R_7 = R_26*R_0; R_7 = R_2+R_7; R_7 = R_32+R_7;
    R_26 = 1/R_26; R_7 = R_26*R_7; R_7 = (-1.0)*R_7; R_0 = R_7+R_0;
    R_7 = pow(R_0,2); R_7 = R_16+R_7; R_16 = R_33*R_7; R_26 = R_10*R_7;
    R_26 = 0.5*R_26; R_7 = R_1*R_7; R_24 = R_24*R_0; R_11 = R_24+R_11;
    R_11 = R_3*R_11; R_3 = 2.0*R_11; R_3 = R_26+R_3; R_11 = (-1.0)*R_11;
    R_7 = R_11+R_7; R_7 = R_17*R_7; R_0 = R_28*R_0; R_4 = R_0+R_4;
    R_4 = 2.0*R_4; R_4 = R_20+R_4; R_33 = R_33*R_4; R_4 = 0.5*R_4;
    R_7 = R_4+R_7; R_7 = R_10*R_7; R_7 = R_12+R_7; R_19 = rsqrt(R_19);
    R_3 = R_19*R_3; R_33 = R_3+R_33; R_33 = (1.0/12.0)*R_33; R_16 = R_33+R_16;
    R_7 = R_19*R_7; R_29 = R_7+R_29; R_29 = (1.0/80.0)*R_29; R_16 = R_29+R_16;
    res := R_16; 
    return res
