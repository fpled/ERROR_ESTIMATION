static const nvi := 3
static const nb_nodes := 4
static const nb_vertex_nodes := 4
static const center_of_var_inter := [ 1.0/4.0, 1.0/4.0, 1.0/4.0 ]
#
def interpolation( var_inter, val, interpolation_base )
    if interpolation_base == "lagrange"
        return val[0]*(1-var_inter[1]-var_inter[0]-var_inter[2])+var_inter[0]*val[1]+var_inter[1]*val[2]+var_inter[2]*val[3]
    else if interpolation_base == "hierarchical"
        return val[0]*(1-var_inter[1]-var_inter[0]-var_inter[2])+var_inter[0]*val[1]+var_inter[1]*val[2]+var_inter[2]*val[3]

#
def generic_interpolation( var_inter, val, interpolation_base, deg ) when deg == 1
    if interpolation_base == "lagrange"
        return var_inter[2]*val[3]+(1-var_inter[1]-var_inter[0]-var_inter[2])*val[0]+var_inter[0]*val[1]+var_inter[1]*val[2]
    else if interpolation_base == "hierarchical"
        return var_inter[2]*val[3]+(1-var_inter[1]-var_inter[0]-var_inter[2])*val[0]+var_inter[0]*val[1]+var_inter[1]*val[2]

#
def generic_interpolation( var_inter, val, interpolation_base, deg ) when deg == 2
    if interpolation_base == "lagrange"
        return var_inter[2]*(2*var_inter[2]-1)*val[9]+var_inter[1]*(2*var_inter[1]-1)*val[5]+(1+var_inter[0]*(2*var_inter[0]-3)+var_inter[2]*(4*var_inter[0]+2*var_inter[2]-3)+var_inter[1]*(2*var_inter[1]+4*(var_inter[0]+var_inter[2])-3))*val[0]+var_inter[0]*(2*var_inter[0]-1)*val[2]+4*var_inter[1]*var_inter[0]*val[4]+4*var_inter[0]*var_inter[2]*val[7]+4*var_inter[1]*var_inter[2]*val[8]-4*var_inter[2]*(var_inter[2]+var_inter[1]+var_inter[0]-1)*val[6]-4*var_inter[0]*(var_inter[2]+var_inter[1]+var_inter[0]-1)*val[1]-4*var_inter[1]*(var_inter[2]+var_inter[1]+var_inter[0]-1)*val[3]
    else if interpolation_base == "hierarchical"
        return 4*var_inter[0]*var_inter[2]*val[7]+var_inter[0]*val[2]+(1-var_inter[1]-var_inter[0]-var_inter[2])*val[0]+4*var_inter[1]*var_inter[0]*val[4]+var_inter[1]*val[5]+4*var_inter[1]*var_inter[2]*val[8]+var_inter[2]*val[9]-4*var_inter[0]*(var_inter[2]+var_inter[1]+var_inter[0]-1)*val[1]-4*var_inter[1]*(var_inter[2]+var_inter[1]+var_inter[0]-1)*val[3]-4*var_inter[2]*(var_inter[2]+var_inter[1]+var_inter[0]-1)*val[6]

#
def generic_interpolation( var_inter, val, interpolation_base, deg ) when deg == 3
    if interpolation_base == "lagrange"
        return var_inter[1]*var_inter[2]*(27.0/2.0*var_inter[1]-9.0/2.0)*val[15]+27*var_inter[2]*var_inter[1]*var_inter[0]*val[14]+val[12]*var_inter[0]*var_inter[2]*(27.0/2.0*var_inter[0]-9.0/2.0)+val[9]*var_inter[1]*(1-9.0/2.0*var_inter[1]*(1-var_inter[1]))+var_inter[1]*(9+var_inter[1]*(27.0/2.0*var_inter[1]-45.0/2.0)+var_inter[0]*(27.0/2.0*var_inter[0]+27*(var_inter[1]+var_inter[2])-45.0/2.0)+var_inter[2]*(27*var_inter[1]+27.0/2.0*var_inter[2]-45.0/2.0))*val[4]+var_inter[0]*(var_inter[0]*(18-27.0/2.0*(var_inter[2]+var_inter[1]+var_inter[0]))-9.0/2.0*(1-var_inter[1]-var_inter[2]))*val[2]+(1+var_inter[2]*(var_inter[2]*(9-9.0/2.0*var_inter[2])-11.0/2.0)+var_inter[0]*(var_inter[0]*(9-9.0/2.0*var_inter[0])+var_inter[2]*(18-27.0/2.0*(var_inter[0]+var_inter[2]))-11.0/2.0)+var_inter[1]*(18*(var_inter[0]+var_inter[2])+var_inter[1]*(9-9.0/2.0*var_inter[1])-11.0/2.0-27.0/2.0*(var_inter[1]*(var_inter[0]+var_inter[2])+pow(var_inter[0],2)+pow(var_inter[2],2))-27*var_inter[0]*var_inter[2]))*val[0]+val[1]*var_inter[0]*(9+var_inter[1]*(27.0/2.0*var_inter[1]-45.0/2.0)+var_inter[0]*(27.0/2.0*var_inter[0]+27*(var_inter[1]+var_inter[2])-45.0/2.0)+var_inter[2]*(27*var_inter[1]+27.0/2.0*var_inter[2]-45.0/2.0))+var_inter[0]*(1-9.0/2.0*var_inter[0]*(1-var_inter[0]))*val[3]+val[6]*var_inter[1]*var_inter[0]*(27.0/2.0*var_inter[0]-9.0/2.0)+val[7]*var_inter[1]*(var_inter[1]*(18-27.0/2.0*(var_inter[2]+var_inter[1]+var_inter[0]))-9.0/2.0*(1-var_inter[0]-var_inter[2]))+val[8]*var_inter[0]*var_inter[1]*(27.0/2.0*var_inter[1]-9.0/2.0)+val[10]*var_inter[2]*(9+var_inter[0]*(27.0/2.0*var_inter[0]-45.0/2.0)+var_inter[2]*(27*(var_inter[1]+var_inter[0])+27.0/2.0*var_inter[2]-45.0/2.0)+var_inter[1]*(27.0/2.0*var_inter[1]+27*var_inter[0]-45.0/2.0))+var_inter[2]*(var_inter[2]*(18-27.0/2.0*(var_inter[2]+var_inter[1]+var_inter[0]))-9.0/2.0*(1-var_inter[1]-var_inter[0]))*val[16]+var_inter[0]*var_inter[2]*(27.0/2.0*var_inter[2]-9.0/2.0)*val[17]+var_inter[1]*var_inter[2]*(27.0/2.0*var_inter[2]-9.0/2.0)*val[18]+var_inter[2]*(1-9.0/2.0*var_inter[2]*(1-var_inter[2]))*val[19]-27*val[11]*var_inter[0]*var_inter[2]*(var_inter[2]+var_inter[1]+var_inter[0]-1)-27*var_inter[0]*var_inter[1]*(var_inter[2]+var_inter[1]+var_inter[0]-1)*val[5]-27*val[13]*var_inter[1]*var_inter[2]*(var_inter[2]+var_inter[1]+var_inter[0]-1)
    else if interpolation_base == "hierarchical"
        return var_inter[2]*val[19]+var_inter[1]*var_inter[2]*(27.0/2.0*var_inter[2]-9.0/2.0)*val[18]+var_inter[0]*var_inter[2]*(27.0/2.0*var_inter[2]-9.0/2.0)*val[17]+var_inter[2]*(var_inter[2]*(18-27.0/2.0*(var_inter[2]+var_inter[1]+var_inter[0]))-9.0/2.0*(1-var_inter[1]-var_inter[0]))*val[16]+var_inter[1]*var_inter[2]*(27.0/2.0*var_inter[1]-9.0/2.0)*val[15]+27*var_inter[2]*var_inter[1]*var_inter[0]*val[14]+val[8]*var_inter[0]*var_inter[1]*(27.0/2.0*var_inter[1]-9.0/2.0)+val[7]*var_inter[1]*(var_inter[1]*(18-27.0/2.0*(var_inter[2]+var_inter[1]+var_inter[0]))-9.0/2.0*(1-var_inter[0]-var_inter[2]))+val[6]*var_inter[1]*var_inter[0]*(27.0/2.0*var_inter[0]-9.0/2.0)+var_inter[1]*(9+var_inter[0]*(27.0/2.0*var_inter[0]+27*(var_inter[1]+var_inter[2])-45.0/2.0)+var_inter[1]*(27.0/2.0*var_inter[1]+27*var_inter[2]-45.0/2.0)+var_inter[2]*(27.0/2.0*var_inter[2]-45.0/2.0))*val[4]+var_inter[0]*(var_inter[0]*(18-27.0/2.0*(var_inter[2]+var_inter[1]+var_inter[0]))-9.0/2.0*(1-var_inter[1]-var_inter[2]))*val[2]+(1-var_inter[1]-var_inter[0]-var_inter[2])*val[0]+val[1]*var_inter[0]*(9+var_inter[2]*(27.0/2.0*var_inter[2]-45.0/2.0)+var_inter[0]*(27.0/2.0*var_inter[0]+27*var_inter[2]-45.0/2.0)+var_inter[1]*(27.0/2.0*var_inter[1]+27*(var_inter[0]+var_inter[2])-45.0/2.0))+var_inter[0]*val[3]+var_inter[1]*val[9]+val[10]*var_inter[2]*(9+var_inter[2]*(27.0/2.0*var_inter[2]-45.0/2.0)+var_inter[0]*(27.0/2.0*var_inter[0]+27*var_inter[2]-45.0/2.0)+var_inter[1]*(27.0/2.0*var_inter[1]+27*(var_inter[0]+var_inter[2])-45.0/2.0))+val[12]*var_inter[0]*var_inter[2]*(27.0/2.0*var_inter[0]-9.0/2.0)-27*val[11]*var_inter[0]*var_inter[2]*(var_inter[2]+var_inter[1]+var_inter[0]-1)-27*var_inter[1]*var_inter[0]*(var_inter[2]+var_inter[1]+var_inter[0]-1)*val[5]-27*val[13]*var_inter[1]*var_inter[2]*(var_inter[2]+var_inter[1]+var_inter[0]-1)

#
def generic_interpolation( var_inter, val, interpolation_base, deg ) when deg == 4
    if interpolation_base == "lagrange"
        return var_inter[2]*(var_inter[2]*(22.0/3.0+var_inter[2]*(32.0/3.0*var_inter[2]-16))-1)*val[34]+var_inter[1]*var_inter[2]*(16.0/3.0+var_inter[2]*(128.0/3.0*var_inter[2]-32))*val[33]+var_inter[0]*var_inter[2]*(16.0/3.0+var_inter[2]*(128.0/3.0*var_inter[2]-32))*val[32]+var_inter[2]*(16.0/3.0*(1-var_inter[1]-var_inter[0])+var_inter[2]*(var_inter[2]*(224.0/3.0-128.0/3.0*(var_inter[2]+var_inter[1]+var_inter[0]))+32*(var_inter[1]+var_inter[0])-112.0/3.0))*val[31]+var_inter[1]*var_inter[2]*(4+64*var_inter[1]*var_inter[2]-16*(var_inter[1]+var_inter[2]))*val[30]+val[29]*var_inter[1]*var_inter[0]*var_inter[2]*(128*var_inter[2]-32)+var_inter[0]*var_inter[2]*(4+64*var_inter[0]*var_inter[2]-16*(var_inter[0]+var_inter[2]))*val[27]+val[26]*var_inter[0]*var_inter[2]*(var_inter[2]*(160-128*(var_inter[2]+var_inter[1]+var_inter[0]))-32*(1-var_inter[1]-var_inter[0]))+var_inter[2]*var_inter[1]*var_inter[0]*(128*var_inter[1]-32)*val[23]+var_inter[2]*var_inter[1]*(var_inter[1]*(160-128*(var_inter[2]+var_inter[1]+var_inter[0]))-32*(1-var_inter[0]-var_inter[2]))*val[22]+var_inter[2]*var_inter[0]*(var_inter[0]*(160-128*(var_inter[2]+var_inter[1]+var_inter[0]))-32*(1-var_inter[1]-var_inter[2]))*val[17]+var_inter[0]*var_inter[2]*(96+var_inter[2]*(256*var_inter[1]+128*var_inter[2]-224)+var_inter[0]*(256*(var_inter[1]+var_inter[2])+128*var_inter[0]-224)+var_inter[1]*(128*var_inter[1]-224))*val[16]+val[14]*var_inter[1]*(var_inter[1]*(22.0/3.0+var_inter[1]*(32.0/3.0*var_inter[1]-16))-1)+var_inter[0]*var_inter[1]*(16.0/3.0+var_inter[1]*(128.0/3.0*var_inter[1]-32))*val[13]+var_inter[1]*(var_inter[2]*(28-16*var_inter[2])+var_inter[0]*(28-16*var_inter[0]-32*var_inter[2])+var_inter[1]*(76+128*(var_inter[0]*var_inter[2]+var_inter[1]*(var_inter[0]+var_inter[2]-1))+64*(pow(var_inter[2],2)+pow(var_inter[0],2)+pow(var_inter[1],2))-144*(var_inter[0]+var_inter[2]))-12)*val[9]+var_inter[1]*var_inter[0]*(96+var_inter[1]*(256*(var_inter[0]+var_inter[2])+128*var_inter[1]-224)+var_inter[0]*(256*var_inter[2]+128*var_inter[0]-224)+var_inter[2]*(128*var_inter[2]-224))*val[6]+val[5]*var_inter[1]*(16+var_inter[0]*(var_inter[0]*(96-128.0/3.0*var_inter[0])-208.0/3.0)+var_inter[1]*(var_inter[1]*(96-128*var_inter[0]-128.0/3.0*var_inter[1])+var_inter[0]*(192-128*var_inter[0])-208.0/3.0)+var_inter[2]*(var_inter[0]*(192-128*var_inter[0])+var_inter[2]*(96-128*(var_inter[1]+var_inter[0])-128.0/3.0*var_inter[2])+var_inter[1]*(192-256*var_inter[0]-128*var_inter[1])-208.0/3.0))+(1+var_inter[0]*(var_inter[0]*(70.0/3.0+var_inter[0]*(32.0/3.0*var_inter[0]-80.0/3.0))-25.0/3.0)+var_inter[2]*(var_inter[0]*(140.0/3.0+var_inter[2]*(128.0/3.0*var_inter[2]-80)+var_inter[0]*(64*var_inter[2]+128.0/3.0*var_inter[0]-80))+var_inter[2]*(70.0/3.0+var_inter[2]*(32.0/3.0*var_inter[2]-80.0/3.0))-25.0/3.0)+var_inter[1]*(var_inter[0]*(140.0/3.0+var_inter[0]*(128.0/3.0*var_inter[0]-80))+var_inter[1]*(70.0/3.0+var_inter[1]*(32.0/3.0*var_inter[1]+128.0/3.0*(var_inter[0]+var_inter[2])-80.0/3.0)+var_inter[0]*(64*var_inter[0]+128*var_inter[2]-80)+var_inter[2]*(64*var_inter[2]-80))+var_inter[2]*(140.0/3.0+var_inter[2]*(128*var_inter[0]+128.0/3.0*var_inter[2]-80)+var_inter[0]*(128*var_inter[0]-160))-25.0/3.0))*val[0]+val[1]*var_inter[0]*(16+var_inter[0]*(var_inter[1]*(192-256*var_inter[2])+var_inter[0]*(96-128.0/3.0*var_inter[0])+192*var_inter[2]-208.0/3.0-128*(pow(var_inter[1],2)+pow(var_inter[2],2)+var_inter[0]*(var_inter[1]+var_inter[2])))+var_inter[1]*(var_inter[1]*(96-128.0/3.0*var_inter[1])+var_inter[2]*(192-128*(var_inter[1]+var_inter[2]))-208.0/3.0)+var_inter[2]*(var_inter[2]*(96-128.0/3.0*var_inter[2])-208.0/3.0))+val[2]*var_inter[0]*(var_inter[2]*(28-16*var_inter[2])+var_inter[0]*(76+128*(var_inter[1]*var_inter[2]+var_inter[0]*(var_inter[1]+var_inter[2]-1))+64*(pow(var_inter[2],2)+pow(var_inter[0],2)+pow(var_inter[1],2))-144*(var_inter[1]+var_inter[2]))+var_inter[1]*(28-16*var_inter[1]-32*var_inter[2])-12)+var_inter[0]*(16.0/3.0*(1-var_inter[1]-var_inter[2])+var_inter[0]*(var_inter[0]*(224.0/3.0-128.0/3.0*(var_inter[2]+var_inter[1]+var_inter[0]))+32*(var_inter[1]+var_inter[2])-112.0/3.0))*val[3]+val[4]*var_inter[0]*(var_inter[0]*(22.0/3.0+var_inter[0]*(32.0/3.0*var_inter[0]-16))-1)+var_inter[1]*var_inter[0]*(var_inter[0]*(160-128*(var_inter[2]+var_inter[1]+var_inter[0]))-32*(1-var_inter[1]-var_inter[2]))*val[7]+val[8]*var_inter[1]*var_inter[0]*(16.0/3.0+var_inter[0]*(128.0/3.0*var_inter[0]-32))+var_inter[0]*var_inter[1]*(var_inter[1]*(160-128*(var_inter[2]+var_inter[1]+var_inter[0]))-32*(1-var_inter[0]-var_inter[2]))*val[10]+val[11]*var_inter[0]*var_inter[1]*(4+64*var_inter[1]*var_inter[0]-16*(var_inter[1]+var_inter[0]))+var_inter[1]*(16.0/3.0*(1-var_inter[0]-var_inter[2])+var_inter[1]*(32*(var_inter[0]+var_inter[2])+var_inter[1]*(224.0/3.0-128.0/3.0*(var_inter[2]+var_inter[1]+var_inter[0]))-112.0/3.0))*val[12]+var_inter[2]*(16+var_inter[1]*(var_inter[1]*(96-128.0/3.0*var_inter[1])+var_inter[0]*(192-256*var_inter[2])+192*var_inter[2]-208.0/3.0-128*(var_inter[1]*(var_inter[0]+var_inter[2])+pow(var_inter[0],2)+pow(var_inter[2],2)))+var_inter[0]*(var_inter[0]*(96-128.0/3.0*var_inter[0]-128*var_inter[2])+var_inter[2]*(192-128*var_inter[2])-208.0/3.0)+var_inter[2]*(var_inter[2]*(96-128.0/3.0*var_inter[2])-208.0/3.0))*val[15]+var_inter[2]*var_inter[0]*(16.0/3.0+var_inter[0]*(128.0/3.0*var_inter[0]-32))*val[18]+var_inter[1]*var_inter[2]*(96+var_inter[2]*(128*var_inter[2]-224)+var_inter[1]*(256*var_inter[2]+128*var_inter[1]-224)+var_inter[0]*(256*(var_inter[1]+var_inter[2])+128*var_inter[0]-224))*val[19]+var_inter[2]*var_inter[1]*var_inter[0]*(128*var_inter[0]-32)*val[21]+var_inter[2]*var_inter[1]*(16.0/3.0+var_inter[1]*(128.0/3.0*var_inter[1]-32))*val[24]+var_inter[2]*(var_inter[1]*(28-16*var_inter[1])+var_inter[0]*(28-16*var_inter[0]-32*var_inter[1])+var_inter[2]*(76+128*(var_inter[1]*var_inter[0]+var_inter[2]*(var_inter[1]+var_inter[0]-1))+64*(pow(var_inter[2],2)+pow(var_inter[0],2)+pow(var_inter[1],2))-144*(var_inter[1]+var_inter[0]))-12)*val[25]+var_inter[1]*var_inter[2]*(var_inter[2]*(160-128*(var_inter[2]+var_inter[1]+var_inter[0]))-32*(1-var_inter[1]-var_inter[0]))*val[28]-256*var_inter[1]*var_inter[0]*var_inter[2]*(var_inter[2]+var_inter[1]+var_inter[0]-1)*val[20]
    else if interpolation_base == "hierarchical"
        return var_inter[2]*val[34]+var_inter[1]*var_inter[2]*(16.0/3.0+var_inter[2]*(128.0/3.0*var_inter[2]-32))*val[33]+var_inter[0]*var_inter[2]*(16.0/3.0+var_inter[2]*(128.0/3.0*var_inter[2]-32))*val[32]+var_inter[2]*(16.0/3.0*(1-var_inter[1]-var_inter[0])+var_inter[2]*(var_inter[2]*(224.0/3.0-128.0/3.0*(var_inter[2]+var_inter[1]+var_inter[0]))+32*(var_inter[1]+var_inter[0])-112.0/3.0))*val[31]+var_inter[1]*var_inter[2]*(4+64*var_inter[1]*var_inter[2]-16*(var_inter[1]+var_inter[2]))*val[30]+val[28]*var_inter[1]*var_inter[2]*(160*var_inter[2]+128*(pow(var_inter[0],2)+var_inter[1]*(var_inter[0]-var_inter[2])-pow(var_inter[2],2))-32*(1-var_inter[1])-96*var_inter[0])+var_inter[0]*var_inter[2]*(4+64*var_inter[0]*var_inter[2]-16*(var_inter[0]+var_inter[2]))*val[27]+var_inter[2]*var_inter[1]*(16.0/3.0+var_inter[1]*(128.0/3.0*var_inter[1]-32))*val[24]+var_inter[2]*var_inter[1]*var_inter[0]*(128*var_inter[1]-32)*val[23]+var_inter[2]*var_inter[1]*(var_inter[1]*(160-128*(var_inter[2]+var_inter[1]+var_inter[0]))-32*(1-var_inter[0]-var_inter[2]))*val[22]+var_inter[2]*var_inter[1]*var_inter[0]*(128*var_inter[0]-32)*val[21]+var_inter[2]*var_inter[0]*(var_inter[0]*(160-128*(var_inter[2]+var_inter[1]+var_inter[0]))-32*(1-var_inter[1]-var_inter[2]))*val[17]+var_inter[0]*var_inter[2]*(96+32*var_inter[1]+128*(pow(var_inter[0],2)+pow(var_inter[2],2)-pow(var_inter[1],2))+var_inter[0]*(256*var_inter[2]-224)-224*var_inter[2])*val[16]+var_inter[2]*(16+var_inter[0]*(var_inter[0]*(96-128.0/3.0*var_inter[0])-208.0/3.0)+var_inter[2]*(var_inter[0]*(192-128*(var_inter[0]+var_inter[2]))+var_inter[2]*(96-128.0/3.0*var_inter[2])-208.0/3.0)+var_inter[1]*(var_inter[1]*(96-128.0/3.0*var_inter[1])+128*(pow(var_inter[0],2)+var_inter[1]*(var_inter[0]-var_inter[2])-pow(var_inter[2],2))+192*var_inter[2]-208.0/3.0-64*var_inter[0]))*val[15]+var_inter[1]*val[14]+var_inter[0]*var_inter[1]*(16.0/3.0+var_inter[1]*(128.0/3.0*var_inter[1]-32))*val[13]+var_inter[1]*(16.0/3.0*(1-var_inter[0]-var_inter[2])+var_inter[1]*(32*(var_inter[0]+var_inter[2])+var_inter[1]*(224.0/3.0-128.0/3.0*(var_inter[2]+var_inter[1]+var_inter[0]))-112.0/3.0))*val[12]+var_inter[0]*var_inter[1]*(var_inter[0]*(128*(var_inter[0]+var_inter[2])-224)+var_inter[1]*(256*var_inter[0]+128*(var_inter[1]+var_inter[2])-224)+96*(1-var_inter[2]))*val[6]+var_inter[0]*(16+var_inter[2]*(64*var_inter[1]+var_inter[2]*(96-128.0/3.0*var_inter[2])-208.0/3.0)+var_inter[0]*(var_inter[0]*(96-128.0/3.0*var_inter[0])+192*(var_inter[1]+var_inter[2])-208.0/3.0-128*(var_inter[2]*(var_inter[2]+var_inter[1]+var_inter[0])+var_inter[1]*(var_inter[1]+var_inter[0])))+var_inter[1]*(var_inter[1]*(96-128.0/3.0*var_inter[1])-208.0/3.0))*val[1]+(1-var_inter[1]-var_inter[0]-var_inter[2])*val[0]+var_inter[0]*(var_inter[2]*(28-16*var_inter[2])+var_inter[0]*(76+var_inter[0]*(64*var_inter[0]-128)+var_inter[2]*(128*(var_inter[1]+var_inter[0])+64*var_inter[2]-144)+var_inter[1]*(64*var_inter[1]+128*var_inter[0]-144))+var_inter[1]*(28-16*var_inter[1]-32*var_inter[2])-12)*val[2]+var_inter[0]*(16.0/3.0*(1-var_inter[1]-var_inter[2])+var_inter[0]*(var_inter[0]*(224.0/3.0-128.0/3.0*(var_inter[2]+var_inter[1]+var_inter[0]))+32*(var_inter[1]+var_inter[2])-112.0/3.0))*val[3]+var_inter[0]*val[4]+val[5]*var_inter[1]*(16+var_inter[0]*(var_inter[0]*(96-128.0/3.0*var_inter[0])+64*var_inter[2]-208.0/3.0)+var_inter[1]*(var_inter[1]*(96-128.0/3.0*var_inter[1])+192*(var_inter[0]+var_inter[2])-208.0/3.0-128*(var_inter[0]*(var_inter[2]+var_inter[1]+var_inter[0])+var_inter[2]*(var_inter[1]+var_inter[2])))+var_inter[2]*(var_inter[2]*(96-128.0/3.0*var_inter[2])-208.0/3.0))+var_inter[1]*var_inter[0]*(var_inter[0]*(160-128*(var_inter[2]+var_inter[1]+var_inter[0]))-32*(1-var_inter[1]-var_inter[2]))*val[7]+val[8]*var_inter[1]*var_inter[0]*(16.0/3.0+var_inter[0]*(128.0/3.0*var_inter[0]-32))+var_inter[1]*(var_inter[2]*(28-16*var_inter[2])+var_inter[0]*(28-16*var_inter[0]-32*var_inter[2])+var_inter[1]*(76+128*(var_inter[0]*var_inter[2]+var_inter[1]*(var_inter[0]+var_inter[2]-1))+64*(pow(var_inter[2],2)+pow(var_inter[0],2)+pow(var_inter[1],2))-144*(var_inter[0]+var_inter[2]))-12)*val[9]+var_inter[0]*var_inter[1]*(var_inter[1]*(160-128*(var_inter[2]+var_inter[1]+var_inter[0]))-32*(1-var_inter[0]-var_inter[2]))*val[10]+val[11]*var_inter[0]*var_inter[1]*(4+64*var_inter[1]*var_inter[0]-16*(var_inter[1]+var_inter[0]))+var_inter[2]*var_inter[0]*(16.0/3.0+var_inter[0]*(128.0/3.0*var_inter[0]-32))*val[18]+var_inter[1]*var_inter[2]*(96+var_inter[1]*(128*var_inter[1]-224)+var_inter[2]*(256*var_inter[1]+128*var_inter[2]-224)+var_inter[0]*(32-128*var_inter[0]))*val[19]+var_inter[2]*(var_inter[1]*(28-16*var_inter[1])+var_inter[0]*(28+var_inter[1]*(96-128*(var_inter[1]+var_inter[0]))-16*var_inter[0])+var_inter[2]*(76+64*(pow(var_inter[0],2)+pow(var_inter[1],2))+var_inter[2]*(64*var_inter[2]-128*(1-var_inter[1]-var_inter[0]))-144*(var_inter[1]+var_inter[0]))-12)*val[25]+var_inter[0]*var_inter[2]*(160*var_inter[2]-32*(1-var_inter[0])-96*var_inter[1]-128*(pow(var_inter[2],2)+var_inter[0]*(var_inter[2]-var_inter[1])-pow(var_inter[1],2)))*val[26]+var_inter[2]*var_inter[1]*var_inter[0]*(96-128*(var_inter[1]+var_inter[0]))*val[29]-256*var_inter[1]*var_inter[0]*var_inter[2]*(var_inter[2]+var_inter[1]+var_inter[0]-1)*val[20]

#
def interpolation_vertex( var_inter, val_vertex )
    return var_inter[2]*val_vertex[3]+var_inter[1]*val_vertex[2]+var_inter[0]*val_vertex[1]+val_vertex[0]*(1-var_inter[1]-var_inter[0]-var_inter[2])
#
def nb_children( sub_nvi ) when sub_nvi==0
    return 1
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==0
    return child_var_inter
def type_child( sub_nvi, num_child ) when sub_nvi==0
    return Tetra
def node_number_child( sub_nvi, num_child ) when sub_nvi==0
    return 0 .. 4
#
def nb_children( sub_nvi ) when sub_nvi==1
    return 4
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==0
    return [child_var_inter[1],child_var_inter[0],0]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return Triangle
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return [0,2,1]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==1
    return [child_var_inter[0],0,child_var_inter[1]]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return Triangle
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return [0,1,3]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==2
    return [0,child_var_inter[1],child_var_inter[0]]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==2
    return Triangle
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==2
    return [0,3,2]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==3
    return [1-child_var_inter[0]-child_var_inter[1],child_var_inter[0],child_var_inter[1]]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==3
    return Triangle
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==3
    return [1,2,3]
#
def nb_children( sub_nvi ) when sub_nvi==2
    return 12
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==2 and num_child==0
    return [0,child_var_inter[0],0]
def type_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==0
    return Bar
def node_number_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==0
    return [0,2]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==2 and num_child==1
    return [child_var_inter[0],1-child_var_inter[0],0]
def type_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==1
    return Bar
def node_number_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==1
    return [2,1]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==2 and num_child==2
    return [1-child_var_inter[0],0,0]
def type_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==2
    return Bar
def node_number_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==2
    return [1,0]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==2 and num_child==3
    return [child_var_inter[0],0,0]
def type_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==3
    return Bar
def node_number_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==3
    return [0,1]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==2 and num_child==4
    return [1-child_var_inter[0],0,child_var_inter[0]]
def type_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==4
    return Bar
def node_number_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==4
    return [1,3]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==2 and num_child==5
    return [0,0,1-child_var_inter[0]]
def type_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==5
    return Bar
def node_number_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==5
    return [3,0]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==2 and num_child==6
    return [0,0,child_var_inter[0]]
def type_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==6
    return Bar
def node_number_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==6
    return [0,3]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==2 and num_child==7
    return [0,child_var_inter[0],1-child_var_inter[0]]
def type_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==7
    return Bar
def node_number_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==7
    return [3,2]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==2 and num_child==8
    return [0,1-child_var_inter[0],0]
def type_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==8
    return Bar
def node_number_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==8
    return [2,0]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==2 and num_child==9
    return [1-child_var_inter[0],child_var_inter[0],0]
def type_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==9
    return Bar
def node_number_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==9
    return [1,2]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==2 and num_child==10
    return [0,1-child_var_inter[0],child_var_inter[0]]
def type_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==10
    return Bar
def node_number_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==10
    return [2,3]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==2 and num_child==11
    return [child_var_inter[0],0,1-child_var_inter[0]]
def type_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==11
    return Bar
def node_number_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==11
    return [3,1]
#
def nb_children( sub_nvi ) when sub_nvi==3
    return 4
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==3 and num_child==0
    return [0,0,0]
def type_child( sub_nvi, num_child ) when sub_nvi==3 and num_child==0
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==3 and num_child==0
    return [0]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==3 and num_child==1
    return [0,1,0]
def type_child( sub_nvi, num_child ) when sub_nvi==3 and num_child==1
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==3 and num_child==1
    return [2]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==3 and num_child==2
    return [1,0,0]
def type_child( sub_nvi, num_child ) when sub_nvi==3 and num_child==2
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==3 and num_child==2
    return [1]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==3 and num_child==3
    return [0,0,1]
def type_child( sub_nvi, num_child ) when sub_nvi==3 and num_child==3
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==3 and num_child==3
    return [3]
def normal( var_inter, pos_nodes )
    assert( 0, "normal is defined only for nb_dim == nvi + 1" )
#
def jac_mat( var_inter, pos_nodes )
    res := Mat[ type_promote(var_inter[0],pos_nodes[0][0],mul), Gen[ 3, 3 ] ]()
    R_0 := pos_nodes[3][2]; R_1 := pos_nodes[3][1]; R_2 := pos_nodes[3][0]; R_3 := pos_nodes[2][2];
    R_4 := pos_nodes[2][1]; R_5 := pos_nodes[2][0]; R_6 := pos_nodes[0][2]; R_6 = (-1.0)*R_6;
    R_0 = R_0+R_6; res(2,2) = R_0; R_3 = R_3+R_6; res(1,2) = R_3;
    R_3 = pos_nodes[1][2]; R_6 = R_3+R_6; res(0,2) = R_6; R_6 = pos_nodes[0][1];
    R_6 = (-1.0)*R_6; R_1 = R_1+R_6; res(2,1) = R_1; R_4 = R_4+R_6;
    res(1,1) = R_4; R_4 = pos_nodes[1][1]; R_6 = R_4+R_6; res(0,1) = R_6;
    R_6 = pos_nodes[0][0]; R_6 = (-1.0)*R_6; R_2 = R_2+R_6; res(2,0) = R_2;
    R_5 = R_5+R_6; res(1,0) = R_5; R_5 = pos_nodes[1][0]; R_6 = R_5+R_6;
    res(0,0) = R_6; 
    return res
#
def jac( var_inter, pos_nodes )
    R_0 := pos_nodes[2][0]; R_1 := pos_nodes[3][2]; R_2 := pos_nodes[3][1]; R_3 := pos_nodes[1][0];
    R_4 := pos_nodes[0][0]; R_4 = (-1.0)*R_4; R_0 = R_0+R_4; R_3 = R_3+R_4;
    R_5 := pos_nodes[3][0]; R_4 = R_5+R_4; R_5 = pos_nodes[2][2]; R_6 := pos_nodes[1][1];
    R_7 := pos_nodes[0][1]; R_7 = (-1.0)*R_7; R_2 = R_2+R_7; R_6 = R_6+R_7;
    R_8 := pos_nodes[2][1]; R_7 = R_8+R_7; R_8 = pos_nodes[0][2]; R_8 = (-1.0)*R_8;
    R_1 = R_1+R_8; R_9 := R_6*R_1; R_1 = R_1*R_7; R_5 = R_5+R_8;
    R_10 := R_2*R_5; R_10 = (-1.0)*R_10; R_1 = R_10+R_1; R_1 = R_3*R_1;
    R_5 = R_6*R_5; R_6 = pos_nodes[1][2]; R_8 = R_6+R_8; R_2 = R_8*R_2;
    R_2 = (-1.0)*R_2; R_2 = R_9+R_2; R_2 = R_0*R_2; R_2 = (-1.0)*R_2;
    R_2 = R_1+R_2; R_7 = R_8*R_7; R_7 = (-1.0)*R_7; R_5 = R_7+R_5;
    R_4 = R_5*R_4; R_2 = R_4+R_2; res := R_2; 
    return res
#
def inv_jac_mat( var_inter, pos_nodes )
    res := Mat[ type_promote(var_inter[0],pos_nodes[0][0],mul), Gen[ 3, 3 ] ]()
    R_0 := pos_nodes[2][0]; R_1 := pos_nodes[3][2]; R_2 := pos_nodes[3][1]; R_3 := pos_nodes[1][0];
    R_4 := pos_nodes[0][0]; R_4 = (-1.0)*R_4; R_0 = R_0+R_4; R_3 = R_3+R_4;
    R_5 := pos_nodes[3][0]; R_4 = R_5+R_4; R_5 = pos_nodes[2][2]; R_6 := pos_nodes[1][1];
    R_7 := pos_nodes[0][1]; R_7 = (-1.0)*R_7; R_2 = R_2+R_7; R_8 := R_2*R_3;
    R_9 := R_2*R_0; R_6 = R_6+R_7; R_10 := R_6*R_0; R_10 = (-1.0)*R_10;
    R_11 := R_6*R_4; R_11 = (-1.0)*R_11; R_11 = R_8+R_11; R_8 = pos_nodes[2][1];
    R_7 = R_8+R_7; R_8 = R_3*R_7; R_10 = R_8+R_10; R_8 = R_7*R_4;
    R_8 = (-1.0)*R_8; R_8 = R_9+R_8; R_9 = pos_nodes[0][2]; R_9 = (-1.0)*R_9;
    R_1 = R_1+R_9; R_12 := R_3*R_1; R_13 := R_0*R_1; R_14 := R_6*R_1;
    R_1 = R_1*R_7; R_5 = R_5+R_9; R_15 := R_3*R_5; R_16 := R_5*R_4;
    R_16 = (-1.0)*R_16; R_16 = R_13+R_16; R_13 = R_2*R_5; R_13 = (-1.0)*R_13;
    R_1 = R_13+R_1; R_3 = R_3*R_1; R_5 = R_6*R_5; R_6 = pos_nodes[1][2];
    R_9 = R_6+R_9; R_6 = R_9*R_0; R_6 = (-1.0)*R_6; R_6 = R_15+R_6;
    R_15 = R_9*R_4; R_15 = (-1.0)*R_15; R_15 = R_12+R_15; R_2 = R_9*R_2;
    R_2 = (-1.0)*R_2; R_2 = R_14+R_2; R_0 = R_0*R_2; R_0 = (-1.0)*R_0;
    R_0 = R_3+R_0; R_7 = R_9*R_7; R_7 = (-1.0)*R_7; R_5 = R_7+R_5;
    R_4 = R_5*R_4; R_0 = R_4+R_0; R_0 = 1/R_0; R_10 = R_0*R_10;
    res(2,2) = R_10; R_11 = R_0*R_11; R_11 = (-1.0)*R_11; res(2,1) = R_11;
    R_8 = R_0*R_8; res(2,0) = R_8; R_6 = R_0*R_6; R_6 = (-1.0)*R_6;
    res(1,2) = R_6; R_15 = R_0*R_15; res(1,1) = R_15; R_16 = R_0*R_16;
    R_16 = (-1.0)*R_16; res(1,0) = R_16; R_5 = R_0*R_5; res(0,2) = R_5;
    R_2 = R_0*R_2; R_2 = (-1.0)*R_2; res(0,1) = R_2; R_1 = R_0*R_1;
    res(0,0) = R_1; 
    return res
#
def measure( var_inter, pos_nodes )
    R_0 := pos_nodes[2][0]; R_1 := pos_nodes[3][2]; R_2 := pos_nodes[3][1]; R_3 := pos_nodes[1][0];
    R_4 := pos_nodes[0][0]; R_4 = (-1.0)*R_4; R_0 = R_0+R_4; R_3 = R_3+R_4;
    R_5 := pos_nodes[3][0]; R_4 = R_5+R_4; R_5 = pos_nodes[2][2]; R_6 := pos_nodes[1][1];
    R_7 := pos_nodes[0][1]; R_7 = (-1.0)*R_7; R_2 = R_2+R_7; R_6 = R_6+R_7;
    R_8 := pos_nodes[2][1]; R_7 = R_8+R_7; R_8 = pos_nodes[0][2]; R_8 = (-1.0)*R_8;
    R_1 = R_1+R_8; R_9 := R_6*R_1; R_1 = R_1*R_7; R_5 = R_5+R_8;
    R_10 := R_2*R_5; R_10 = (-1.0)*R_10; R_1 = R_10+R_1; R_1 = R_3*R_1;
    R_1 = (1.0/6.0)*R_1; R_5 = R_6*R_5; R_6 = pos_nodes[1][2]; R_8 = R_6+R_8;
    R_2 = R_8*R_2; R_2 = (-1.0)*R_2; R_2 = R_9+R_2; R_2 = R_0*R_2;
    R_2 = (-1.0/6.0)*R_2; R_7 = R_8*R_7; R_7 = (-1.0)*R_7; R_5 = R_7+R_5;
    R_4 = R_5*R_4; R_4 = (1.0/6.0)*R_4; R_1 = R_4+R_1; R_2 = R_1+R_2;
    res := R_2; 
    return res
#
def barycenter( var_inter, pos_nodes )
    res := Vec[ type_promote(var_inter[0],pos_nodes[0][0],mul), 3 ]()
    R_0 := pos_nodes[1][2]; R_1 := pos_nodes[0][2]; R_0 = R_1+R_0; R_1 = pos_nodes[2][2];
    R_0 = R_1+R_0; R_1 = pos_nodes[3][2]; R_0 = R_1+R_0; R_0 = 0.25*R_0;
    res[2] = R_0; R_0 = pos_nodes[1][1]; R_1 = pos_nodes[0][1]; R_0 = R_1+R_0;
    R_1 = pos_nodes[2][1]; R_0 = R_1+R_0; R_1 = pos_nodes[3][1]; R_0 = R_1+R_0;
    R_0 = 0.25*R_0; res[1] = R_0; R_0 = pos_nodes[1][0]; R_1 = pos_nodes[0][0];
    R_0 = R_1+R_0; R_1 = pos_nodes[2][0]; R_0 = R_1+R_0; R_1 = pos_nodes[3][0];
    R_0 = R_1+R_0; R_0 = 0.25*R_0; res[0] = R_0; 
    return res
#
def inertia_operator_for_barycenter( var_inter, pos_nodes )
    res := Mat[ type_promote(var_inter[0],pos_nodes[0][0],mul), Gen[ 3, 3 ] ]()
    R_0 := pos_nodes[2][0]; R_1 := (-1.0/16.0)*R_0; R_2 := -0.5*R_0; R_3 := 0.5*R_0;
    R_4 := (-1.0)*R_0; R_5 := pos_nodes[3][2]; R_6 := (-1.0)*R_5; R_7 := pos_nodes[3][1];
    R_8 := pos_nodes[1][0]; R_9 := -0.125*R_8; R_9 = R_1+R_9; R_1 = 0.75*R_8;
    R_10 := (-1.0)*R_8; R_10 = R_0+R_10; R_2 = R_8+R_2; R_11 := 0.25*R_8;
    R_12 := -0.75*R_8; R_12 = R_3+R_12; R_4 = R_8+R_4; R_3 = (-1.0/32.0)*R_8;
    R_13 := pos_nodes[0][0]; R_14 := R_13+R_0; R_15 := (-1.0)*R_13; R_16 := R_0+R_15;
    R_8 = R_8+R_15; R_17 := pos_nodes[3][0]; R_13 = R_13+R_17; R_18 := (3.0/32.0)*R_13;
    R_9 = R_18+R_9; R_18 = -0.375*R_13; R_1 = R_18+R_1; R_18 = -0.5*R_13;
    R_18 = R_0+R_18; R_1 = R_18*R_1; R_0 = pow(R_18,2); R_19 := -0.25*R_13;
    R_2 = R_19+R_2; R_19 = pow(R_2,2); R_20 := R_18*R_2; R_9 = R_2*R_9;
    R_21 := -0.125*R_13; R_21 = R_11+R_21; R_11 = pow(R_21,2); R_22 := R_18*R_21;
    R_13 = 0.125*R_13; R_12 = R_13+R_12; R_14 = R_17+R_14; R_14 = (1.0/96.0)*R_14;
    R_3 = R_14+R_3; R_15 = R_17+R_15; R_17 = pow(R_15,2); R_14 = pos_nodes[2][2];
    R_13 = 0.5*R_14; R_23 := (-1.0/16.0)*R_14; R_24 := -0.5*R_14; R_25 := pos_nodes[1][1];
    R_26 := -0.125*R_25; R_27 := 0.75*R_25; R_28 := 0.25*R_25; R_29 := pos_nodes[0][1];
    R_30 := R_29+R_7; R_31 := -0.75*R_30; R_32 := (3.0/32.0)*R_30; R_33 := -0.375*R_30;
    R_33 = R_27+R_33; R_34 := -0.125*R_30; R_28 = R_28+R_34; R_35 := R_28*R_21;
    R_35 = -0.125*R_35; R_36 := R_18*R_28; R_37 := (-1.0)*R_36; R_12 = R_28*R_12;
    R_3 = R_28*R_3; R_38 := pow(R_28,2); R_39 := R_38+R_11; R_40 := 0.5*R_39;
    R_40 = R_9+R_40; R_39 = 0.125*R_39; R_41 := -0.25*R_30; R_30 = -0.5*R_30;
    R_29 = (-1.0)*R_29; R_7 = R_7+R_29; R_42 := R_7*R_15; R_43 := (-1.0/48.0)*R_42;
    R_44 := (-1.0/32.0)*R_42; R_42 = (-1.0/768.0)*R_42; R_35 = R_35+R_42; R_3 = R_42+R_3;
    R_42 = pow(R_7,2); R_45 := R_42+R_17; R_46 := (1.0/32.0)*R_45; R_47 := (1.0/768.0)*R_45;
    R_45 = (1.0/48.0)*R_45; R_48 := R_25+R_29; R_49 := pos_nodes[2][1]; R_50 := 0.5*R_49;
    R_50 = R_25+R_50; R_31 = R_50+R_31; R_31 = R_18*R_31; R_50 = (-1.0/16.0)*R_49;
    R_50 = R_26+R_50; R_32 = R_50+R_32; R_50 = -0.5*R_49; R_27 = R_50+R_27;
    R_27 = R_34+R_27; R_50 = R_25+R_50; R_50 = R_41+R_50; R_41 = R_18*R_50;
    R_25 = R_2*R_50; R_34 = -0.5*R_25; R_43 = R_34+R_43; R_37 = R_25+R_37;
    R_25 = R_50*R_21; R_25 = (-1.0)*R_25; R_25 = R_12+R_25; R_25 = -0.5*R_25;
    R_32 = R_50*R_32; R_12 = pow(R_50,2); R_34 = R_12+R_19; R_34 = 0.5*R_34;
    R_30 = R_49+R_30; R_26 = R_18*R_30; R_51 := (-1.0/384.0)*R_26; R_51 = R_35+R_51;
    R_26 = (-1.0/24.0)*R_26; R_26 = R_43+R_26; R_43 = R_30*R_2; R_41 = R_41+R_43;
    R_41 = (-1.0/12.0)*R_41; R_41 = R_26+R_41; R_31 = R_43+R_31; R_31 = (-1.0/16.0)*R_31;
    R_43 = R_30*R_21; R_36 = R_36+R_43; R_36 = (1.0/96.0)*R_36; R_36 = R_51+R_36;
    R_43 = (-1.0)*R_43; R_43 = R_37+R_43; R_43 = -0.125*R_43; R_43 = R_25+R_43;
    R_44 = R_43+R_44; R_31 = R_44+R_31; R_4 = R_30*R_4; R_4 = (1.0/384.0)*R_4;
    R_4 = R_3+R_4; R_33 = R_30*R_33; R_3 = R_33+R_1; R_3 = (1.0/12.0)*R_3;
    R_40 = R_3+R_40; R_46 = R_40+R_46; R_46 = R_32+R_46; R_40 = R_30*R_28;
    R_3 = R_40+R_22; R_3 = (-1.0/48.0)*R_3; R_44 = R_30*R_50; R_43 = R_44+R_20;
    R_43 = (1.0/6.0)*R_43; R_43 = R_34+R_43; R_34 = pow(R_30,2); R_25 = R_34+R_0;
    R_37 = (1.0/384.0)*R_25; R_3 = R_37+R_3; R_47 = R_3+R_47; R_47 = R_39+R_47;
    R_25 = (1.0/24.0)*R_25; R_25 = R_43+R_25; R_25 = R_45+R_25; R_29 = R_49+R_29;
    R_49 = pos_nodes[0][2]; R_45 = R_49+R_14; R_45 = R_5+R_45; R_45 = (1.0/6.0)*R_45;
    R_43 = R_49+R_5; R_39 = (1.0/24.0)*R_43; R_3 = -0.75*R_43; R_37 = -0.375*R_43;
    R_51 = (3.0/32.0)*R_43; R_26 = -0.125*R_43; R_35 = -0.25*R_43; R_43 = -0.5*R_43;
    R_43 = R_14+R_43; R_52 := R_43*R_50; R_53 := R_30*R_43; R_54 := (-1.0/24.0)*R_53;
    R_53 = (-1.0/384.0)*R_53; R_55 := R_43*R_28; R_56 := (-1.0)*R_55; R_10 = R_43*R_10;
    R_10 = (-1.0)*R_10; R_57 := R_43*R_21; R_58 := R_18*R_43; R_59 := (-1.0/384.0)*R_58;
    R_58 = (-1.0/24.0)*R_58; R_60 := R_2*R_43; R_61 := pow(R_43,2); R_0 = R_61+R_0;
    R_62 := (1.0/24.0)*R_0; R_0 = (1.0/384.0)*R_0; R_34 = R_61+R_34; R_61 = (1.0/384.0)*R_34;
    R_34 = (1.0/24.0)*R_34; R_49 = (-1.0)*R_49; R_5 = R_5+R_49; R_63 := R_7*R_5;
    R_64 := (-1.0/48.0)*R_63; R_54 = R_64+R_54; R_64 = (-1.0/32.0)*R_63; R_63 = (-1.0/768.0)*R_63;
    R_65 := R_5*R_15; R_66 := (-1.0/32.0)*R_65; R_10 = R_65+R_10; R_67 := (-1.0/768.0)*R_65;
    R_59 = R_67+R_59; R_65 = (-1.0/48.0)*R_65; R_58 = R_65+R_58; R_67 = pow(R_5,2);
    R_17 = R_67+R_17; R_68 := (1.0/48.0)*R_17; R_69 := (1.0/32.0)*R_17; R_17 = (1.0/768.0)*R_17;
    R_42 = R_67+R_42; R_67 = (1.0/32.0)*R_42; R_70 := (1.0/768.0)*R_42; R_42 = (1.0/48.0)*R_42;
    R_71 := R_48*R_5; R_5 = R_5*R_29; R_72 := R_14+R_49; R_73 := R_7*R_72;
    R_73 = (-1.0)*R_73; R_5 = R_73+R_5; R_5 = R_8*R_5; R_72 = R_48*R_72;
    R_48 = pos_nodes[1][2]; R_8 = -0.5*R_48; R_45 = R_8+R_45; R_45 = R_2*R_45;
    R_8 = (-1.0/12.0)*R_48; R_39 = R_8+R_39; R_39 = R_18*R_39; R_39 = R_65+R_39;
    R_45 = R_39+R_45; R_13 = R_48+R_13; R_3 = R_13+R_3; R_13 = R_18*R_3;
    R_13 = R_60+R_13; R_13 = (-1.0/16.0)*R_13; R_3 = R_30*R_3; R_3 = R_52+R_3;
    R_3 = (-1.0/16.0)*R_3; R_14 = R_48+R_14; R_14 = R_49+R_14; R_14 = R_6+R_14;
    R_14 = R_18*R_14; R_14 = R_10+R_14; R_14 = (-1.0/32.0)*R_14; R_10 = 0.75*R_48;
    R_6 = R_24+R_10; R_6 = R_26+R_6; R_6 = R_6*R_21; R_37 = R_10+R_37;
    R_37 = R_43*R_37; R_1 = R_37+R_1; R_1 = (1.0/12.0)*R_1; R_33 = R_37+R_33;
    R_33 = (1.0/12.0)*R_33; R_37 = -0.125*R_48; R_37 = R_23+R_37; R_51 = R_37+R_51;
    R_37 = 0.25*R_48; R_26 = R_37+R_26; R_27 = R_26*R_27; R_37 = R_28*R_26;
    R_37 = -0.125*R_37; R_37 = R_63+R_37; R_53 = R_37+R_53; R_37 = R_30*R_26;
    R_63 = (-1.0)*R_37; R_63 = R_56+R_63; R_55 = R_37+R_55; R_55 = (1.0/96.0)*R_55;
    R_53 = R_55+R_53; R_55 = R_2*R_26; R_55 = R_6+R_55; R_55 = 0.5*R_55;
    R_66 = R_55+R_66; R_21 = R_26*R_21; R_21 = -0.125*R_21; R_21 = R_59+R_21;
    R_59 = R_18*R_26; R_59 = R_57+R_59; R_57 = (1.0/96.0)*R_59; R_21 = R_57+R_21;
    R_57 = pow(R_26,2); R_11 = R_57+R_11; R_6 = 0.5*R_11; R_1 = R_6+R_1;
    R_9 = R_1+R_9; R_69 = R_9+R_69; R_11 = 0.125*R_11; R_57 = R_38+R_57;
    R_38 = 0.5*R_57; R_57 = 0.125*R_57; R_26 = R_43*R_26; R_22 = R_26+R_22;
    R_22 = (-1.0/48.0)*R_22; R_11 = R_22+R_11; R_17 = R_11+R_17; R_17 = R_0+R_17;
    R_26 = R_40+R_26; R_26 = (-1.0/48.0)*R_26; R_57 = R_26+R_57; R_70 = R_57+R_70;
    R_70 = R_61+R_70; R_24 = R_48+R_24; R_35 = R_24+R_35; R_30 = R_30*R_35;
    R_52 = R_30+R_52; R_52 = (-1.0/12.0)*R_52; R_50 = R_50*R_35; R_30 = -0.5*R_50;
    R_30 = R_54+R_30; R_52 = R_30+R_52; R_50 = R_63+R_50; R_50 = -0.125*R_50;
    R_28 = R_35*R_28; R_28 = R_27+R_28; R_28 = 0.5*R_28; R_50 = R_28+R_50;
    R_64 = R_50+R_64; R_64 = R_3+R_64; R_2 = R_2*R_35; R_3 = (-1.0)*R_2;
    R_3 = R_59+R_3; R_3 = 0.125*R_3; R_3 = R_66+R_3; R_3 = R_13+R_3;
    R_13 = -0.125*R_2; R_13 = R_14+R_13; R_13 = R_55+R_13; R_2 = -0.5*R_2;
    R_2 = R_58+R_2; R_18 = R_18*R_35; R_18 = R_60+R_18; R_18 = (-1.0/12.0)*R_18;
    R_2 = R_18+R_2; R_51 = R_35*R_51; R_69 = R_51+R_69; R_67 = R_51+R_67;
    R_33 = R_67+R_33; R_38 = R_33+R_38; R_32 = R_38+R_32; R_38 = pow(R_35,2);
    R_19 = R_38+R_19; R_19 = 0.5*R_19; R_12 = R_38+R_12; R_12 = 0.5*R_12;
    R_35 = R_43*R_35; R_20 = R_35+R_20; R_20 = (1.0/6.0)*R_20; R_20 = R_68+R_20;
    R_62 = R_20+R_62; R_19 = R_62+R_19; R_35 = R_44+R_35; R_35 = (1.0/6.0)*R_35;
    R_42 = R_35+R_42; R_12 = R_42+R_12; R_12 = R_34+R_12; R_49 = R_48+R_49;
    R_7 = R_49*R_7; R_7 = (-1.0)*R_7; R_7 = R_71+R_7; R_7 = R_16*R_7;
    R_7 = (-1.0)*R_7; R_7 = R_5+R_7; R_29 = R_49*R_29; R_29 = (-1.0)*R_29;
    R_72 = R_29+R_72; R_15 = R_72*R_15; R_7 = R_15+R_7; R_46 = R_7*R_46;
    R_46 = (1.0/12.0)*R_46; R_47 = R_7*R_47; R_46 = R_47+R_46; R_25 = R_7*R_25;
    R_25 = (1.0/80.0)*R_25; R_46 = R_25+R_46; res(2,2) = R_46; R_3 = R_7*R_3;
    R_3 = (1.0/12.0)*R_3; R_45 = R_7*R_45; R_45 = (1.0/80.0)*R_45; R_52 = R_7*R_52;
    R_52 = (1.0/80.0)*R_52; R_64 = R_7*R_64; R_64 = (1.0/12.0)*R_64; R_53 = R_7*R_53;
    R_64 = R_53+R_64; R_52 = R_64+R_52; res(1,2) = R_52; res(2,1) = R_52;
    R_19 = R_7*R_19; R_19 = (1.0/80.0)*R_19; R_69 = R_7*R_69; R_69 = (1.0/12.0)*R_69;
    R_17 = R_7*R_17; R_69 = R_17+R_69; R_19 = R_69+R_19; res(1,1) = R_19;
    R_36 = R_7*R_36; R_13 = R_7*R_13; R_13 = (1.0/12.0)*R_13; R_21 = R_7*R_21;
    R_3 = R_21+R_3; R_3 = R_45+R_3; res(2,0) = R_3; R_13 = R_21+R_13;
    R_2 = R_7*R_2; R_2 = (1.0/80.0)*R_2; R_13 = R_2+R_13; res(0,2) = R_13;
    R_41 = R_7*R_41; R_41 = (1.0/80.0)*R_41; R_31 = R_7*R_31; R_31 = (1.0/12.0)*R_31;
    R_36 = R_31+R_36; R_36 = R_36+R_41; res(1,0) = R_36; R_4 = R_7*R_4;
    R_31 = R_4+R_31; R_41 = R_31+R_41; res(0,1) = R_41; R_32 = R_7*R_32;
    R_32 = (1.0/12.0)*R_32; R_70 = R_7*R_70; R_32 = R_70+R_32; R_12 = R_7*R_12;
    R_12 = (1.0/80.0)*R_12; R_32 = R_12+R_32; res(0,0) = R_32; 
    return res
