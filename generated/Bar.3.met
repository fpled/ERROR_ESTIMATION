static const nvi := 1
static const nb_nodes := 2
static const nb_vertex_nodes := 2
static const center_of_var_inter := [ 1.0/2.0 ]
#
def interpolation( var_inter, val, interpolation_base )
    if interpolation_base == "lagrange"
        return val[1]*var_inter[0]+val[0]*(1-var_inter[0])
    else if interpolation_base == "hierarchical"
        return val[1]*var_inter[0]+val[0]*(1-var_inter[0])

#
def generic_interpolation( var_inter, val, interpolation_base, deg ) when deg == 1
    if interpolation_base == "lagrange"
        return (1-var_inter[0])*val[0]+var_inter[0]*val[1]
    else if interpolation_base == "hierarchical"
        return (1-var_inter[0])*val[0]+var_inter[0]*val[1]

#
def generic_interpolation( var_inter, val, interpolation_base, deg ) when deg == 2
    if interpolation_base == "lagrange"
        return val[0]*(1+var_inter[0]*(2*var_inter[0]-3))+var_inter[0]*(2*var_inter[0]-1)*val[2]-4*val[1]*var_inter[0]*(var_inter[0]-1)
    else if interpolation_base == "hierarchical"
        return (1-var_inter[0])*val[0]+var_inter[0]*val[2]-4*val[1]*var_inter[0]*(var_inter[0]-1)

#
def generic_interpolation( var_inter, val, interpolation_base, deg ) when deg == 3
    if interpolation_base == "lagrange"
        return var_inter[0]*(1-9.0/2.0*var_inter[0]*(1-var_inter[0]))*val[3]+val[2]*var_inter[0]*(var_inter[0]*(18-27.0/2.0*var_inter[0])-9.0/2.0)+val[0]*(1+var_inter[0]*(var_inter[0]*(9-9.0/2.0*var_inter[0])-11.0/2.0))+val[1]*var_inter[0]*(9+var_inter[0]*(27.0/2.0*var_inter[0]-45.0/2.0))
    else if interpolation_base == "hierarchical"
        return val[2]*var_inter[0]*(var_inter[0]*(18-27.0/2.0*var_inter[0])-9.0/2.0)+val[1]*var_inter[0]*(9+var_inter[0]*(27.0/2.0*var_inter[0]-45.0/2.0))+(1-var_inter[0])*val[0]+var_inter[0]*val[3]

#
def generic_interpolation( var_inter, val, interpolation_base, deg ) when deg == 4
    if interpolation_base == "lagrange"
        return var_inter[0]*(16.0/3.0+var_inter[0]*(var_inter[0]*(224.0/3.0-128.0/3.0*var_inter[0])-112.0/3.0))*val[3]+var_inter[0]*(var_inter[0]*(76+var_inter[0]*(64*var_inter[0]-128))-12)*val[2]+(1+var_inter[0]*(var_inter[0]*(70.0/3.0+var_inter[0]*(32.0/3.0*var_inter[0]-80.0/3.0))-25.0/3.0))*val[0]+var_inter[0]*(16+var_inter[0]*(var_inter[0]*(96-128.0/3.0*var_inter[0])-208.0/3.0))*val[1]+val[4]*var_inter[0]*(var_inter[0]*(22.0/3.0+var_inter[0]*(32.0/3.0*var_inter[0]-16))-1)
    else if interpolation_base == "hierarchical"
        return var_inter[0]*val[4]+var_inter[0]*(16.0/3.0+var_inter[0]*(var_inter[0]*(224.0/3.0-128.0/3.0*var_inter[0])-112.0/3.0))*val[3]+var_inter[0]*(var_inter[0]*(76+var_inter[0]*(64*var_inter[0]-128))-12)*val[2]+(1-var_inter[0])*val[0]+var_inter[0]*(16+var_inter[0]*(var_inter[0]*(96-128.0/3.0*var_inter[0])-208.0/3.0))*val[1]

#
def interpolation_vertex( var_inter, val_vertex )
    return val_vertex[0]*(1-var_inter[0])+var_inter[0]*val_vertex[1]
#
def nb_children( sub_nvi ) when sub_nvi==0
    return 1
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==0
    return child_var_inter
def type_child( sub_nvi, num_child ) when sub_nvi==0
    return Bar
def node_number_child( sub_nvi, num_child ) when sub_nvi==0
    return 0 .. 2
#
def nb_children( sub_nvi ) when sub_nvi==1
    return 2
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==0
    return [0]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return [0]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==1
    return [1]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return [1]
def normal( var_inter, pos_nodes )
    assert( 0, "normal is defined only for nb_dim == nvi + 1" )
#
def jac_mat( var_inter, pos_nodes )
    res := Mat[ type_promote(var_inter[0],pos_nodes[0][0],mul), Gen[ 1, 3 ] ]()
    R_0 := pos_nodes[0][2]; R_0 = (-1.0)*R_0; R_1 := pos_nodes[1][2]; R_0 = R_1+R_0;
    res(0,2) = R_0; R_0 = pos_nodes[0][1]; R_0 = (-1.0)*R_0; R_1 = pos_nodes[1][1];
    R_0 = R_1+R_0; res(0,1) = R_0; R_0 = pos_nodes[0][0]; R_0 = (-1.0)*R_0;
    R_1 = pos_nodes[1][0]; R_0 = R_1+R_0; res(0,0) = R_0; 
    return res
#
def jac( var_inter, pos_nodes )
    R_0 := pos_nodes[0][2]; R_0 = (-1.0)*R_0; R_1 := pos_nodes[1][2]; R_0 = R_1+R_0;
    R_0 = pow(R_0,2); R_1 = pos_nodes[0][0]; R_1 = (-1.0)*R_1; R_2 := pos_nodes[1][0];
    R_1 = R_2+R_1; R_1 = pow(R_1,2); R_2 = pos_nodes[0][1]; R_2 = (-1.0)*R_2;
    R_3 := pos_nodes[1][1]; R_2 = R_3+R_2; R_2 = pow(R_2,2); R_1 = R_2+R_1;
    R_0 = R_1+R_0; R_0 = sqrt(R_0); res := R_0; 
    return res
#
def inv_jac_mat( var_inter, pos_nodes )
    assert( 0, "inv_jac_mat() available only when nb var inter == dim" )
#
def measure( var_inter, pos_nodes )
    R_0 := pos_nodes[0][2]; R_0 = (-1.0)*R_0; R_1 := pos_nodes[1][2]; R_0 = R_1+R_0;
    R_0 = pow(R_0,2); R_1 = pos_nodes[0][0]; R_1 = (-1.0)*R_1; R_2 := pos_nodes[1][0];
    R_1 = R_2+R_1; R_1 = pow(R_1,2); R_2 = pos_nodes[0][1]; R_2 = (-1.0)*R_2;
    R_3 := pos_nodes[1][1]; R_2 = R_3+R_2; R_2 = pow(R_2,2); R_1 = R_2+R_1;
    R_0 = R_1+R_0; R_0 = sqrt(R_0); res := R_0; 
    return res
#
def barycenter( var_inter, pos_nodes )
    res := Vec[ type_promote(var_inter[0],pos_nodes[0][0],mul), 3 ]()
    R_0 := pos_nodes[1][2]; R_1 := pos_nodes[0][2]; R_0 = R_1+R_0; R_0 = 0.5*R_0;
    res[2] = R_0; R_0 = pos_nodes[1][1]; R_1 = pos_nodes[0][1]; R_0 = R_1+R_0;
    R_0 = 0.5*R_0; res[1] = R_0; R_0 = pos_nodes[1][0]; R_1 = pos_nodes[0][0];
    R_0 = R_1+R_0; R_0 = 0.5*R_0; res[0] = R_0; 
    return res
#
def inertia_operator_for_barycenter( var_inter, pos_nodes )
    R_0 := pos_nodes[0][2]; R_0 = (-1.0)*R_0; R_1 := pos_nodes[1][2]; R_0 = R_1+R_0;
    R_0 = pow(R_0,2); R_1 = pos_nodes[0][0]; R_1 = (-1.0)*R_1; R_2 := pos_nodes[1][0];
    R_1 = R_2+R_1; R_1 = pow(R_1,2); R_2 = pos_nodes[0][1]; R_2 = (-1.0)*R_2;
    R_3 := pos_nodes[1][1]; R_2 = R_3+R_2; R_2 = pow(R_2,2); R_1 = R_2+R_1;
    R_0 = R_1+R_0; R_0 = pow(R_0,3/2.0); R_0 = (1.0/12.0)*R_0; res := R_0;
    return res
