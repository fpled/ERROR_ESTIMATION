static const nvi := 1
static const nb_nodes := 8
static const nb_vertex_nodes := 2
static const center_of_var_inter := [ 1.0/2.0 ]
#
def interpolation( var_inter, val, interpolation_base )
    if interpolation_base == "lagrange"
        return val[2]*var_inter[0]*(var_inter[0]*(43071.0/40.0+var_inter[0]*(var_inter[0]*(170471.0/12.0+var_inter[0]*(var_inter[0]*(1529437.0/120.0-823543.0/240.0*var_inter[0])-151263.0/8.0))-1347647.0/240.0))-147.0/2.0)+val[0]*(1+var_inter[0]*(var_inter[0]*(22981.0/180.0+var_inter[0]*(var_inter[0]*(16807.0/18.0+var_inter[0]*(var_inter[0]*(117649.0/180.0-117649.0/720.0*var_inter[0])-386561.0/360.0))-331681.0/720.0))-363.0/20.0))+val[1]*var_inter[0]*(49+var_inter[0]*(var_inter[0]*(109417.0/45.0+var_inter[0]*(var_inter[0]*(991613.0/144.0+var_inter[0]*(823543.0/720.0*var_inter[0]-352947.0/80.0))-88837.0/16.0))-10927.0/20.0))+var_inter[0]*(245.0/3.0+var_inter[0]*(var_inter[0]*(133427.0/18.0+var_inter[0]*(var_inter[0]*(4151329.0/144.0+var_inter[0]*(823543.0/144.0*var_inter[0]-2941225.0/144.0))-2926819.0/144.0))-46501.0/36.0))*val[3]+var_inter[0]*(var_inter[0]*(2009.0/2.0+var_inter[0]*(var_inter[0]*(52822.0/3.0+var_inter[0]*(var_inter[0]*(117649.0/6.0-823543.0/144.0*var_inter[0])-1899191.0/72.0))-872935.0/144.0))-245.0/4.0)*val[4]+var_inter[0]*(147.0/5.0+var_inter[0]*(var_inter[0]*(45962.0/15.0+var_inter[0]*(var_inter[0]*(1159683.0/80.0+var_inter[0]*(823543.0/240.0*var_inter[0]-2705927.0/240.0))-444185.0/48.0))-9849.0/20.0))*val[5]+var_inter[0]*(var_inter[0]*(49931.0/360.0+var_inter[0]*(var_inter[0]*(98441.0/36.0+var_inter[0]*(var_inter[0]*(1294139.0/360.0-823543.0/720.0*var_inter[0])-319333.0/72.0))-634207.0/720.0))-49.0/6.0)*val[6]+var_inter[0]*(1+var_inter[0]*(var_inter[0]*(9947.0/90.0+var_inter[0]*(var_inter[0]*(84035.0/144.0+var_inter[0]*(117649.0/720.0*var_inter[0]-117649.0/240.0))-16807.0/48.0))-343.0/20.0))*val[7]
    else if interpolation_base == "hierarchical"
        return val[0]*(1-var_inter[0])+val[1]*var_inter[0]*(49+var_inter[0]*(var_inter[0]*(109417.0/45.0+var_inter[0]*(var_inter[0]*(991613.0/144.0+var_inter[0]*(823543.0/720.0*var_inter[0]-352947.0/80.0))-88837.0/16.0))-10927.0/20.0))+val[2]*var_inter[0]*(var_inter[0]*(43071.0/40.0+var_inter[0]*(var_inter[0]*(170471.0/12.0+var_inter[0]*(var_inter[0]*(1529437.0/120.0-823543.0/240.0*var_inter[0])-151263.0/8.0))-1347647.0/240.0))-147.0/2.0)+var_inter[0]*(245.0/3.0+var_inter[0]*(var_inter[0]*(133427.0/18.0+var_inter[0]*(var_inter[0]*(4151329.0/144.0+var_inter[0]*(823543.0/144.0*var_inter[0]-2941225.0/144.0))-2926819.0/144.0))-46501.0/36.0))*val[3]+var_inter[0]*(var_inter[0]*(2009.0/2.0+var_inter[0]*(var_inter[0]*(52822.0/3.0+var_inter[0]*(var_inter[0]*(117649.0/6.0-823543.0/144.0*var_inter[0])-1899191.0/72.0))-872935.0/144.0))-245.0/4.0)*val[4]+var_inter[0]*(147.0/5.0+var_inter[0]*(var_inter[0]*(45962.0/15.0+var_inter[0]*(var_inter[0]*(1159683.0/80.0+var_inter[0]*(823543.0/240.0*var_inter[0]-2705927.0/240.0))-444185.0/48.0))-9849.0/20.0))*val[5]+var_inter[0]*(var_inter[0]*(49931.0/360.0+var_inter[0]*(var_inter[0]*(98441.0/36.0+var_inter[0]*(var_inter[0]*(1294139.0/360.0-823543.0/720.0*var_inter[0])-319333.0/72.0))-634207.0/720.0))-49.0/6.0)*val[6]+var_inter[0]*val[7]

#
def generic_interpolation( var_inter, val, interpolation_base, deg ) when deg == 7
    if interpolation_base == "lagrange"
        return val[0]*(1+var_inter[0]*(var_inter[0]*(22981.0/180.0+var_inter[0]*(var_inter[0]*(16807.0/18.0+var_inter[0]*(var_inter[0]*(117649.0/180.0-117649.0/720.0*var_inter[0])-386561.0/360.0))-331681.0/720.0))-363.0/20.0))+val[1]*var_inter[0]*(49+var_inter[0]*(var_inter[0]*(109417.0/45.0+var_inter[0]*(var_inter[0]*(991613.0/144.0+var_inter[0]*(823543.0/720.0*var_inter[0]-352947.0/80.0))-88837.0/16.0))-10927.0/20.0))+val[2]*var_inter[0]*(var_inter[0]*(43071.0/40.0+var_inter[0]*(var_inter[0]*(170471.0/12.0+var_inter[0]*(var_inter[0]*(1529437.0/120.0-823543.0/240.0*var_inter[0])-151263.0/8.0))-1347647.0/240.0))-147.0/2.0)+val[3]*var_inter[0]*(245.0/3.0+var_inter[0]*(var_inter[0]*(133427.0/18.0+var_inter[0]*(var_inter[0]*(4151329.0/144.0+var_inter[0]*(823543.0/144.0*var_inter[0]-2941225.0/144.0))-2926819.0/144.0))-46501.0/36.0))+val[4]*var_inter[0]*(var_inter[0]*(2009.0/2.0+var_inter[0]*(var_inter[0]*(52822.0/3.0+var_inter[0]*(var_inter[0]*(117649.0/6.0-823543.0/144.0*var_inter[0])-1899191.0/72.0))-872935.0/144.0))-245.0/4.0)+val[5]*var_inter[0]*(147.0/5.0+var_inter[0]*(var_inter[0]*(45962.0/15.0+var_inter[0]*(var_inter[0]*(1159683.0/80.0+var_inter[0]*(823543.0/240.0*var_inter[0]-2705927.0/240.0))-444185.0/48.0))-9849.0/20.0))+val[6]*var_inter[0]*(var_inter[0]*(49931.0/360.0+var_inter[0]*(var_inter[0]*(98441.0/36.0+var_inter[0]*(var_inter[0]*(1294139.0/360.0-823543.0/720.0*var_inter[0])-319333.0/72.0))-634207.0/720.0))-49.0/6.0)+val[7]*var_inter[0]*(1+var_inter[0]*(var_inter[0]*(9947.0/90.0+var_inter[0]*(var_inter[0]*(84035.0/144.0+var_inter[0]*(117649.0/720.0*var_inter[0]-117649.0/240.0))-16807.0/48.0))-343.0/20.0))
    else if interpolation_base == "hierarchical"
        return val[0]*(1-var_inter[0])+val[1]*var_inter[0]*(49+var_inter[0]*(var_inter[0]*(109417.0/45.0+var_inter[0]*(var_inter[0]*(991613.0/144.0+var_inter[0]*(823543.0/720.0*var_inter[0]-352947.0/80.0))-88837.0/16.0))-10927.0/20.0))+val[2]*var_inter[0]*(var_inter[0]*(43071.0/40.0+var_inter[0]*(var_inter[0]*(170471.0/12.0+var_inter[0]*(var_inter[0]*(1529437.0/120.0-823543.0/240.0*var_inter[0])-151263.0/8.0))-1347647.0/240.0))-147.0/2.0)+val[3]*var_inter[0]*(245.0/3.0+var_inter[0]*(var_inter[0]*(133427.0/18.0+var_inter[0]*(var_inter[0]*(4151329.0/144.0+var_inter[0]*(823543.0/144.0*var_inter[0]-2941225.0/144.0))-2926819.0/144.0))-46501.0/36.0))+val[4]*var_inter[0]*(var_inter[0]*(2009.0/2.0+var_inter[0]*(var_inter[0]*(52822.0/3.0+var_inter[0]*(var_inter[0]*(117649.0/6.0-823543.0/144.0*var_inter[0])-1899191.0/72.0))-872935.0/144.0))-245.0/4.0)+val[5]*var_inter[0]*(147.0/5.0+var_inter[0]*(var_inter[0]*(45962.0/15.0+var_inter[0]*(var_inter[0]*(1159683.0/80.0+var_inter[0]*(823543.0/240.0*var_inter[0]-2705927.0/240.0))-444185.0/48.0))-9849.0/20.0))+val[6]*var_inter[0]*(var_inter[0]*(49931.0/360.0+var_inter[0]*(var_inter[0]*(98441.0/36.0+var_inter[0]*(var_inter[0]*(1294139.0/360.0-823543.0/720.0*var_inter[0])-319333.0/72.0))-634207.0/720.0))-49.0/6.0)+var_inter[0]*val[7]

#
def interpolation_vertex( var_inter, val_vertex )
    return val_vertex[0]*(1-var_inter[0])+var_inter[0]*val_vertex[1]
#
def nb_children( sub_nvi ) when sub_nvi==0
    return 1
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==0
    return child_var_inter
def type_child( sub_nvi, num_child ) when sub_nvi==0
    return BarGeneric[Int32]
def node_number_child( sub_nvi, num_child ) when sub_nvi==0
    return 0 .. 8
#
def nb_children( sub_nvi ) when sub_nvi==1
    return 2
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==0
    return [0]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return [0]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==1
    return [1]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return [7]
def normal( var_inter, pos_nodes )
    assert( 0, "normal is defined only for nb_dim == nvi + 1" )
#
def jac_mat( var_inter, pos_nodes )
    res := Mat[ type_promote(var_inter[0],pos_nodes[0][0],mul), Gen[ 1, 1 ] ]()
    R_0 := pos_nodes[7][0]; R_1 := pos_nodes[4][0]; R_2 := pos_nodes[2][0]; R_3 := pos_nodes[1][0];
    R_4 := pos_nodes[0][0]; R_5 := pos_nodes[3][0]; R_6 := pos_nodes[5][0]; R_7 := pos_nodes[6][0];
    R_8 := var_inter[0]; R_9 := (823543.0/720.0)*R_8; R_9 = (-117649.0/40.0)+R_9; R_9 = R_8*R_9;
    R_9 = (420175.0/144.0)+R_9; R_9 = R_8*R_9; R_9 = (-16807.0/12.0)+R_9; R_9 = R_8*R_9;
    R_9 = (9947.0/30.0)+R_9; R_9 = R_8*R_9; R_9 = (-343.0/10.0)+R_9; R_9 = R_8*R_9;
    R_9 = 1.0+R_9; R_0 = R_9*R_0; R_9 = (-5764801.0/144.0)*R_8; R_9 = 117649.0+R_9;
    R_9 = R_8*R_9; R_9 = (-9495955.0/72.0)+R_9; R_9 = R_8*R_9; R_9 = (211288.0/3.0)+R_9;
    R_9 = R_8*R_9; R_9 = (-872935.0/48.0)+R_9; R_9 = R_8*R_9; R_9 = 2009.0+R_9;
    R_9 = R_8*R_9; R_9 = -61.25+R_9; R_1 = R_9*R_1; R_9 = (-5764801.0/240.0)*R_8;
    R_9 = (1529437.0/20.0)+R_9; R_9 = R_8*R_9; R_9 = -94539.4+R_9; R_9 = R_8*R_9;
    R_9 = (170471.0/3.0)+R_9; R_9 = R_8*R_9; R_9 = (-1347647.0/80.0)+R_9; R_9 = R_8*R_9;
    R_9 = (43071.0/20.0)+R_9; R_9 = R_8*R_9; R_9 = -73.5+R_9; R_2 = R_9*R_2;
    R_9 = (5764801.0/720.0)*R_8; R_9 = (-1058841.0/40.0)+R_9; R_9 = R_8*R_9; R_9 = (4958065.0/144.0)+R_9;
    R_9 = R_8*R_9; R_9 = -22209.2+R_9; R_9 = R_8*R_9; R_9 = (109417.0/15.0)+R_9;
    R_9 = R_8*R_9; R_9 = (-10927.0/10.0)+R_9; R_9 = R_8*R_9; R_9 = 49.0+R_9;
    R_3 = R_9*R_3; R_9 = (-823543.0/720.0)*R_8; R_9 = (117649.0/30.0)+R_9; R_9 = R_8*R_9;
    R_9 = (-386561.0/72.0)+R_9; R_9 = R_8*R_9; R_9 = (33614.0/9.0)+R_9; R_9 = R_8*R_9;
    R_9 = (-331681.0/240.0)+R_9; R_9 = R_8*R_9; R_9 = (22981.0/90.0)+R_9; R_9 = R_8*R_9;
    R_9 = (-363.0/20.0)+R_9; R_4 = R_9*R_4; R_3 = R_4+R_3; R_2 = R_3+R_2;
    R_3 = (5764801.0/144.0)*R_8; R_3 = (-2941225.0/24.0)+R_3; R_3 = R_8*R_3; R_3 = (20756645.0/144.0)+R_3;
    R_3 = R_8*R_3; R_3 = (-2926819.0/36.0)+R_3; R_3 = R_8*R_3; R_3 = (133427.0/6.0)+R_3;
    R_3 = R_8*R_3; R_3 = (-46501.0/18.0)+R_3; R_3 = R_8*R_3; R_3 = (245.0/3.0)+R_3;
    R_5 = R_3*R_5; R_2 = R_5+R_2; R_1 = R_2+R_1; R_2 = (5764801.0/240.0)*R_8;
    R_2 = (-2705927.0/40.0)+R_2; R_2 = R_8*R_2; R_2 = (1159683.0/16.0)+R_2; R_2 = R_8*R_2;
    R_2 = (-444185.0/12.0)+R_2; R_2 = R_8*R_2; R_2 = (45962.0/5.0)+R_2; R_2 = R_8*R_2;
    R_2 = (-9849.0/10.0)+R_2; R_2 = R_8*R_2; R_2 = (147.0/5.0)+R_2; R_6 = R_2*R_6;
    R_1 = R_6+R_1; R_6 = (-5764801.0/720.0)*R_8; R_6 = (1294139.0/60.0)+R_6; R_6 = R_8*R_6;
    R_6 = (-1596665.0/72.0)+R_6; R_6 = R_8*R_6; R_6 = (98441.0/9.0)+R_6; R_6 = R_8*R_6;
    R_6 = (-634207.0/240.0)+R_6; R_6 = R_8*R_6; R_6 = (49931.0/180.0)+R_6; R_6 = R_8*R_6;
    R_6 = (-49.0/6.0)+R_6; R_7 = R_6*R_7; R_1 = R_7+R_1; R_0 = R_1+R_0;
    res(0,0) = R_0; 
    return res
#
def jac( var_inter, pos_nodes )
    R_0 := pos_nodes[7][0]; R_1 := pos_nodes[4][0]; R_2 := pos_nodes[2][0]; R_3 := pos_nodes[1][0];
    R_4 := pos_nodes[0][0]; R_5 := pos_nodes[3][0]; R_6 := pos_nodes[5][0]; R_7 := pos_nodes[6][0];
    R_8 := var_inter[0]; R_9 := (823543.0/720.0)*R_8; R_9 = (-117649.0/40.0)+R_9; R_9 = R_8*R_9;
    R_9 = (420175.0/144.0)+R_9; R_9 = R_8*R_9; R_9 = (-16807.0/12.0)+R_9; R_9 = R_8*R_9;
    R_9 = (9947.0/30.0)+R_9; R_9 = R_8*R_9; R_9 = (-343.0/10.0)+R_9; R_9 = R_8*R_9;
    R_9 = 1.0+R_9; R_0 = R_9*R_0; R_9 = (-5764801.0/144.0)*R_8; R_9 = 117649.0+R_9;
    R_9 = R_8*R_9; R_9 = (-9495955.0/72.0)+R_9; R_9 = R_8*R_9; R_9 = (211288.0/3.0)+R_9;
    R_9 = R_8*R_9; R_9 = (-872935.0/48.0)+R_9; R_9 = R_8*R_9; R_9 = 2009.0+R_9;
    R_9 = R_8*R_9; R_9 = -61.25+R_9; R_1 = R_9*R_1; R_9 = (-5764801.0/240.0)*R_8;
    R_9 = (1529437.0/20.0)+R_9; R_9 = R_8*R_9; R_9 = -94539.4+R_9; R_9 = R_8*R_9;
    R_9 = (170471.0/3.0)+R_9; R_9 = R_8*R_9; R_9 = (-1347647.0/80.0)+R_9; R_9 = R_8*R_9;
    R_9 = (43071.0/20.0)+R_9; R_9 = R_8*R_9; R_9 = -73.5+R_9; R_2 = R_9*R_2;
    R_9 = (5764801.0/720.0)*R_8; R_9 = (-1058841.0/40.0)+R_9; R_9 = R_8*R_9; R_9 = (4958065.0/144.0)+R_9;
    R_9 = R_8*R_9; R_9 = -22209.2+R_9; R_9 = R_8*R_9; R_9 = (109417.0/15.0)+R_9;
    R_9 = R_8*R_9; R_9 = (-10927.0/10.0)+R_9; R_9 = R_8*R_9; R_9 = 49.0+R_9;
    R_3 = R_9*R_3; R_9 = (-823543.0/720.0)*R_8; R_9 = (117649.0/30.0)+R_9; R_9 = R_8*R_9;
    R_9 = (-386561.0/72.0)+R_9; R_9 = R_8*R_9; R_9 = (33614.0/9.0)+R_9; R_9 = R_8*R_9;
    R_9 = (-331681.0/240.0)+R_9; R_9 = R_8*R_9; R_9 = (22981.0/90.0)+R_9; R_9 = R_8*R_9;
    R_9 = (-363.0/20.0)+R_9; R_4 = R_9*R_4; R_3 = R_4+R_3; R_2 = R_3+R_2;
    R_3 = (5764801.0/144.0)*R_8; R_3 = (-2941225.0/24.0)+R_3; R_3 = R_8*R_3; R_3 = (20756645.0/144.0)+R_3;
    R_3 = R_8*R_3; R_3 = (-2926819.0/36.0)+R_3; R_3 = R_8*R_3; R_3 = (133427.0/6.0)+R_3;
    R_3 = R_8*R_3; R_3 = (-46501.0/18.0)+R_3; R_3 = R_8*R_3; R_3 = (245.0/3.0)+R_3;
    R_5 = R_3*R_5; R_2 = R_5+R_2; R_1 = R_2+R_1; R_2 = (5764801.0/240.0)*R_8;
    R_2 = (-2705927.0/40.0)+R_2; R_2 = R_8*R_2; R_2 = (1159683.0/16.0)+R_2; R_2 = R_8*R_2;
    R_2 = (-444185.0/12.0)+R_2; R_2 = R_8*R_2; R_2 = (45962.0/5.0)+R_2; R_2 = R_8*R_2;
    R_2 = (-9849.0/10.0)+R_2; R_2 = R_8*R_2; R_2 = (147.0/5.0)+R_2; R_6 = R_2*R_6;
    R_1 = R_6+R_1; R_6 = (-5764801.0/720.0)*R_8; R_6 = (1294139.0/60.0)+R_6; R_6 = R_8*R_6;
    R_6 = (-1596665.0/72.0)+R_6; R_6 = R_8*R_6; R_6 = (98441.0/9.0)+R_6; R_6 = R_8*R_6;
    R_6 = (-634207.0/240.0)+R_6; R_6 = R_8*R_6; R_6 = (49931.0/180.0)+R_6; R_6 = R_8*R_6;
    R_6 = (-49.0/6.0)+R_6; R_7 = R_6*R_7; R_1 = R_7+R_1; R_0 = R_1+R_0;
    res := R_0; 
    return res
#
def inv_jac_mat( var_inter, pos_nodes )
    res := Mat[ type_promote(var_inter[0],pos_nodes[0][0],mul), Gen[ 1, 1 ] ]()
    R_0 := pos_nodes[7][0]; R_1 := pos_nodes[4][0]; R_2 := pos_nodes[2][0]; R_3 := pos_nodes[1][0];
    R_4 := pos_nodes[0][0]; R_5 := pos_nodes[3][0]; R_6 := pos_nodes[5][0]; R_7 := pos_nodes[6][0];
    R_8 := var_inter[0]; R_9 := (823543.0/720.0)*R_8; R_9 = (-117649.0/40.0)+R_9; R_9 = R_8*R_9;
    R_9 = (420175.0/144.0)+R_9; R_9 = R_8*R_9; R_9 = (-16807.0/12.0)+R_9; R_9 = R_8*R_9;
    R_9 = (9947.0/30.0)+R_9; R_9 = R_8*R_9; R_9 = (-343.0/10.0)+R_9; R_9 = R_8*R_9;
    R_9 = 1.0+R_9; R_0 = R_9*R_0; R_9 = (-5764801.0/144.0)*R_8; R_9 = 117649.0+R_9;
    R_9 = R_8*R_9; R_9 = (-9495955.0/72.0)+R_9; R_9 = R_8*R_9; R_9 = (211288.0/3.0)+R_9;
    R_9 = R_8*R_9; R_9 = (-872935.0/48.0)+R_9; R_9 = R_8*R_9; R_9 = 2009.0+R_9;
    R_9 = R_8*R_9; R_9 = -61.25+R_9; R_1 = R_9*R_1; R_9 = (-5764801.0/240.0)*R_8;
    R_9 = (1529437.0/20.0)+R_9; R_9 = R_8*R_9; R_9 = -94539.4+R_9; R_9 = R_8*R_9;
    R_9 = (170471.0/3.0)+R_9; R_9 = R_8*R_9; R_9 = (-1347647.0/80.0)+R_9; R_9 = R_8*R_9;
    R_9 = (43071.0/20.0)+R_9; R_9 = R_8*R_9; R_9 = -73.5+R_9; R_2 = R_9*R_2;
    R_9 = (5764801.0/720.0)*R_8; R_9 = (-1058841.0/40.0)+R_9; R_9 = R_8*R_9; R_9 = (4958065.0/144.0)+R_9;
    R_9 = R_8*R_9; R_9 = -22209.2+R_9; R_9 = R_8*R_9; R_9 = (109417.0/15.0)+R_9;
    R_9 = R_8*R_9; R_9 = (-10927.0/10.0)+R_9; R_9 = R_8*R_9; R_9 = 49.0+R_9;
    R_3 = R_9*R_3; R_9 = (-823543.0/720.0)*R_8; R_9 = (117649.0/30.0)+R_9; R_9 = R_8*R_9;
    R_9 = (-386561.0/72.0)+R_9; R_9 = R_8*R_9; R_9 = (33614.0/9.0)+R_9; R_9 = R_8*R_9;
    R_9 = (-331681.0/240.0)+R_9; R_9 = R_8*R_9; R_9 = (22981.0/90.0)+R_9; R_9 = R_8*R_9;
    R_9 = (-363.0/20.0)+R_9; R_4 = R_9*R_4; R_3 = R_4+R_3; R_2 = R_3+R_2;
    R_3 = (5764801.0/144.0)*R_8; R_3 = (-2941225.0/24.0)+R_3; R_3 = R_8*R_3; R_3 = (20756645.0/144.0)+R_3;
    R_3 = R_8*R_3; R_3 = (-2926819.0/36.0)+R_3; R_3 = R_8*R_3; R_3 = (133427.0/6.0)+R_3;
    R_3 = R_8*R_3; R_3 = (-46501.0/18.0)+R_3; R_3 = R_8*R_3; R_3 = (245.0/3.0)+R_3;
    R_5 = R_3*R_5; R_2 = R_5+R_2; R_1 = R_2+R_1; R_2 = (5764801.0/240.0)*R_8;
    R_2 = (-2705927.0/40.0)+R_2; R_2 = R_8*R_2; R_2 = (1159683.0/16.0)+R_2; R_2 = R_8*R_2;
    R_2 = (-444185.0/12.0)+R_2; R_2 = R_8*R_2; R_2 = (45962.0/5.0)+R_2; R_2 = R_8*R_2;
    R_2 = (-9849.0/10.0)+R_2; R_2 = R_8*R_2; R_2 = (147.0/5.0)+R_2; R_6 = R_2*R_6;
    R_1 = R_6+R_1; R_6 = (-5764801.0/720.0)*R_8; R_6 = (1294139.0/60.0)+R_6; R_6 = R_8*R_6;
    R_6 = (-1596665.0/72.0)+R_6; R_6 = R_8*R_6; R_6 = (98441.0/9.0)+R_6; R_6 = R_8*R_6;
    R_6 = (-634207.0/240.0)+R_6; R_6 = R_8*R_6; R_6 = (49931.0/180.0)+R_6; R_6 = R_8*R_6;
    R_6 = (-49.0/6.0)+R_6; R_7 = R_6*R_7; R_1 = R_7+R_1; R_0 = R_1+R_0;
    R_0 = 1/R_0; res(0,0) = R_0; 
    return res
#
def measure( var_inter, pos_nodes )
    R_0 := pos_nodes[4][0]; R_0 = (823543.0/9216.0)*R_0; R_1 := pos_nodes[1][0]; R_1 = (-823543.0/46080.0)*R_1;
    R_2 := pos_nodes[5][0]; R_2 = (-823543.0/15360.0)*R_2; R_3 := pos_nodes[6][0]; R_3 = (823543.0/46080.0)*R_3;
    R_4 := pos_nodes[3][0]; R_4 = (-823543.0/9216.0)*R_4; R_5 := pos_nodes[0][0]; R_5 = (71569.0/46080.0)*R_5;
    R_4 = R_5+R_4; R_3 = R_4+R_3; R_4 = pos_nodes[2][0]; R_4 = (823543.0/15360.0)*R_4;
    R_3 = R_4+R_3; R_2 = R_3+R_2; R_1 = R_2+R_1; R_2 = pos_nodes[7][0];
    R_2 = (-71569.0/46080.0)*R_2; R_1 = R_2+R_1; R_0 = R_1+R_0; res := R_0;
    return res
