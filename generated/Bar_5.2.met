static const nvi := 1
static const nb_nodes := 5
static const nb_vertex_nodes := 2
static const center_of_var_inter := [ 1.0/2.0 ]
#
def interpolation( var_inter, val, interpolation_base )
    if interpolation_base == "lagrange"
        return var_inter[0]*(var_inter[0]*(76+var_inter[0]*(64*var_inter[0]-128))-12)*val[3]+var_inter[0]*(var_inter[0]*(22.0/3.0+var_inter[0]*(32.0/3.0*var_inter[0]-16))-1)*val[1]+(1+var_inter[0]*(var_inter[0]*(70.0/3.0+var_inter[0]*(32.0/3.0*var_inter[0]-80.0/3.0))-25.0/3.0))*val[0]+var_inter[0]*(16+var_inter[0]*(var_inter[0]*(96-128.0/3.0*var_inter[0])-208.0/3.0))*val[2]+var_inter[0]*(16.0/3.0+var_inter[0]*(var_inter[0]*(224.0/3.0-128.0/3.0*var_inter[0])-112.0/3.0))*val[4]
    else if interpolation_base == "hierarchical"
        return var_inter[0]*val[1]+(1-var_inter[0])*val[0]+var_inter[0]*(16+var_inter[0]*(var_inter[0]*(96-128.0/3.0*var_inter[0])-208.0/3.0))*val[2]+var_inter[0]*(var_inter[0]*(76+var_inter[0]*(64*var_inter[0]-128))-12)*val[3]+var_inter[0]*(16.0/3.0+var_inter[0]*(var_inter[0]*(224.0/3.0-128.0/3.0*var_inter[0])-112.0/3.0))*val[4]

#
def generic_interpolation( var_inter, val, interpolation_base, deg ) when deg == 4
    if interpolation_base == "lagrange"
        return val[0]*(1+var_inter[0]*(var_inter[0]*(70.0/3.0+var_inter[0]*(32.0/3.0*var_inter[0]-80.0/3.0))-25.0/3.0))+var_inter[0]*(16+var_inter[0]*(var_inter[0]*(96-128.0/3.0*var_inter[0])-208.0/3.0))*val[1]+var_inter[0]*(var_inter[0]*(76+var_inter[0]*(64*var_inter[0]-128))-12)*val[2]+var_inter[0]*(16.0/3.0+var_inter[0]*(var_inter[0]*(224.0/3.0-128.0/3.0*var_inter[0])-112.0/3.0))*val[3]+var_inter[0]*(var_inter[0]*(22.0/3.0+var_inter[0]*(32.0/3.0*var_inter[0]-16))-1)*val[4]
    else if interpolation_base == "hierarchical"
        return var_inter[0]*(16.0/3.0+var_inter[0]*(var_inter[0]*(224.0/3.0-128.0/3.0*var_inter[0])-112.0/3.0))*val[3]+var_inter[0]*(16+var_inter[0]*(var_inter[0]*(96-128.0/3.0*var_inter[0])-208.0/3.0))*val[1]+val[0]*(1-var_inter[0])+var_inter[0]*(var_inter[0]*(76+var_inter[0]*(64*var_inter[0]-128))-12)*val[2]+var_inter[0]*val[4]

#
def generic_interpolation( var_inter, val, interpolation_base, deg ) when deg == 5
    if interpolation_base == "lagrange"
        return (1+var_inter[0]*(var_inter[0]*(375.0/8.0+var_inter[0]*(var_inter[0]*(625.0/8.0-625.0/24.0*var_inter[0])-2125.0/24.0))-137.0/12.0))*val[0]+val[1]*var_inter[0]*(25+var_inter[0]*(var_inter[0]*(8875.0/24.0+var_inter[0]*(3125.0/24.0*var_inter[0]-4375.0/12.0))-1925.0/12.0))+val[2]*var_inter[0]*(var_inter[0]*(2675.0/12.0+var_inter[0]*(var_inter[0]*(8125.0/12.0-3125.0/12.0*var_inter[0])-7375.0/12.0))-25)+val[3]*var_inter[0]*(50.0/3.0+var_inter[0]*(var_inter[0]*(6125.0/12.0+var_inter[0]*(3125.0/12.0*var_inter[0]-625))-325.0/2.0))+val[4]*var_inter[0]*(var_inter[0]*(1525.0/24.0+var_inter[0]*(var_inter[0]*(6875.0/24.0-3125.0/24.0*var_inter[0])-5125.0/24.0))-25.0/4.0)+val[5]*var_inter[0]*(1+var_inter[0]*(var_inter[0]*(875.0/24.0+var_inter[0]*(625.0/24.0*var_inter[0]-625.0/12.0))-125.0/12.0))
    else if interpolation_base == "hierarchical"
        return val[3]*var_inter[0]*(50.0/3.0+var_inter[0]*(var_inter[0]*(6125.0/12.0+var_inter[0]*(3125.0/12.0*var_inter[0]-625))-325.0/2.0))+(1-var_inter[0])*val[0]+val[1]*var_inter[0]*(25+var_inter[0]*(var_inter[0]*(8875.0/24.0+var_inter[0]*(3125.0/24.0*var_inter[0]-4375.0/12.0))-1925.0/12.0))+val[2]*var_inter[0]*(var_inter[0]*(2675.0/12.0+var_inter[0]*(var_inter[0]*(8125.0/12.0-3125.0/12.0*var_inter[0])-7375.0/12.0))-25)+val[4]*var_inter[0]*(var_inter[0]*(1525.0/24.0+var_inter[0]*(var_inter[0]*(6875.0/24.0-3125.0/24.0*var_inter[0])-5125.0/24.0))-25.0/4.0)+var_inter[0]*val[5]

#
def generic_interpolation( var_inter, val, interpolation_base, deg ) when deg == 6
    if interpolation_base == "lagrange"
        return var_inter[0]*(36.0/5.0+var_inter[0]*(var_inter[0]*(468+var_inter[0]*(var_inter[0]*(5184.0/5.0-1944.0/5.0*var_inter[0])-1026))-486.0/5.0))*val[5]+var_inter[0]*(36+var_inter[0]*(var_inter[0]*(1044+var_inter[0]*(var_inter[0]*(1296-1944.0/5.0*var_inter[0])-1674))-1566.0/5.0))*val[1]+(1+var_inter[0]*(var_inter[0]*(406.0/5.0+var_inter[0]*(var_inter[0]*(315+var_inter[0]*(324.0/5.0*var_inter[0]-1134.0/5.0))-441.0/2.0))-147.0/10.0))*val[0]+val[2]*var_inter[0]*(var_inter[0]*(1053.0/2.0+var_inter[0]*(var_inter[0]*(3699+var_inter[0]*(972*var_inter[0]-3078))-4149.0/2.0))-45)+var_inter[0]*(40+var_inter[0]*(var_inter[0]*(2232+var_inter[0]*(var_inter[0]*(3888-1296*var_inter[0])-4356))-508))*val[3]+var_inter[0]*(var_inter[0]*(297+var_inter[0]*(var_inter[0]*(2889+var_inter[0]*(972*var_inter[0]-2754))-2763.0/2.0))-45.0/2.0)*val[4]+val[6]*var_inter[0]*(var_inter[0]*(137.0/10.0+var_inter[0]*(var_inter[0]*(153+var_inter[0]*(324.0/5.0*var_inter[0]-162))-135.0/2.0))-1)
    else if interpolation_base == "hierarchical"
        return var_inter[0]*(36+var_inter[0]*(var_inter[0]*(1044+var_inter[0]*(var_inter[0]*(1296-1944.0/5.0*var_inter[0])-1674))-1566.0/5.0))*val[1]+val[0]*(1-var_inter[0])+val[2]*var_inter[0]*(var_inter[0]*(1053.0/2.0+var_inter[0]*(var_inter[0]*(3699+var_inter[0]*(972*var_inter[0]-3078))-4149.0/2.0))-45)+var_inter[0]*(40+var_inter[0]*(var_inter[0]*(2232+var_inter[0]*(var_inter[0]*(3888-1296*var_inter[0])-4356))-508))*val[3]+var_inter[0]*(var_inter[0]*(297+var_inter[0]*(var_inter[0]*(2889+var_inter[0]*(972*var_inter[0]-2754))-2763.0/2.0))-45.0/2.0)*val[4]+var_inter[0]*(36.0/5.0+var_inter[0]*(var_inter[0]*(468+var_inter[0]*(var_inter[0]*(5184.0/5.0-1944.0/5.0*var_inter[0])-1026))-486.0/5.0))*val[5]+var_inter[0]*val[6]

#
def generic_interpolation( var_inter, val, interpolation_base, deg ) when deg == 7
    if interpolation_base == "lagrange"
        return val[6]*var_inter[0]*(var_inter[0]*(49931.0/360.0+var_inter[0]*(var_inter[0]*(98441.0/36.0+var_inter[0]*(var_inter[0]*(1294139.0/360.0-823543.0/720.0*var_inter[0])-319333.0/72.0))-634207.0/720.0))-49.0/6.0)+var_inter[0]*(245.0/3.0+var_inter[0]*(var_inter[0]*(133427.0/18.0+var_inter[0]*(var_inter[0]*(4151329.0/144.0+var_inter[0]*(823543.0/144.0*var_inter[0]-2941225.0/144.0))-2926819.0/144.0))-46501.0/36.0))*val[3]+var_inter[0]*(var_inter[0]*(43071.0/40.0+var_inter[0]*(var_inter[0]*(170471.0/12.0+var_inter[0]*(var_inter[0]*(1529437.0/120.0-823543.0/240.0*var_inter[0])-151263.0/8.0))-1347647.0/240.0))-147.0/2.0)*val[2]+var_inter[0]*(49+var_inter[0]*(var_inter[0]*(109417.0/45.0+var_inter[0]*(var_inter[0]*(991613.0/144.0+var_inter[0]*(823543.0/720.0*var_inter[0]-352947.0/80.0))-88837.0/16.0))-10927.0/20.0))*val[1]+val[0]*(1+var_inter[0]*(var_inter[0]*(22981.0/180.0+var_inter[0]*(var_inter[0]*(16807.0/18.0+var_inter[0]*(var_inter[0]*(117649.0/180.0-117649.0/720.0*var_inter[0])-386561.0/360.0))-331681.0/720.0))-363.0/20.0))+val[4]*var_inter[0]*(var_inter[0]*(2009.0/2.0+var_inter[0]*(var_inter[0]*(52822.0/3.0+var_inter[0]*(var_inter[0]*(117649.0/6.0-823543.0/144.0*var_inter[0])-1899191.0/72.0))-872935.0/144.0))-245.0/4.0)+val[5]*var_inter[0]*(147.0/5.0+var_inter[0]*(var_inter[0]*(45962.0/15.0+var_inter[0]*(var_inter[0]*(1159683.0/80.0+var_inter[0]*(823543.0/240.0*var_inter[0]-2705927.0/240.0))-444185.0/48.0))-9849.0/20.0))+val[7]*var_inter[0]*(1+var_inter[0]*(var_inter[0]*(9947.0/90.0+var_inter[0]*(var_inter[0]*(84035.0/144.0+var_inter[0]*(117649.0/720.0*var_inter[0]-117649.0/240.0))-16807.0/48.0))-343.0/20.0))
    else if interpolation_base == "hierarchical"
        return val[6]*var_inter[0]*(var_inter[0]*(49931.0/360.0+var_inter[0]*(var_inter[0]*(98441.0/36.0+var_inter[0]*(var_inter[0]*(1294139.0/360.0-823543.0/720.0*var_inter[0])-319333.0/72.0))-634207.0/720.0))-49.0/6.0)+val[5]*var_inter[0]*(147.0/5.0+var_inter[0]*(var_inter[0]*(45962.0/15.0+var_inter[0]*(var_inter[0]*(1159683.0/80.0+var_inter[0]*(823543.0/240.0*var_inter[0]-2705927.0/240.0))-444185.0/48.0))-9849.0/20.0))+val[4]*var_inter[0]*(var_inter[0]*(2009.0/2.0+var_inter[0]*(var_inter[0]*(52822.0/3.0+var_inter[0]*(var_inter[0]*(117649.0/6.0-823543.0/144.0*var_inter[0])-1899191.0/72.0))-872935.0/144.0))-245.0/4.0)+var_inter[0]*(245.0/3.0+var_inter[0]*(var_inter[0]*(133427.0/18.0+var_inter[0]*(var_inter[0]*(4151329.0/144.0+var_inter[0]*(823543.0/144.0*var_inter[0]-2941225.0/144.0))-2926819.0/144.0))-46501.0/36.0))*val[3]+var_inter[0]*(var_inter[0]*(43071.0/40.0+var_inter[0]*(var_inter[0]*(170471.0/12.0+var_inter[0]*(var_inter[0]*(1529437.0/120.0-823543.0/240.0*var_inter[0])-151263.0/8.0))-1347647.0/240.0))-147.0/2.0)*val[2]+var_inter[0]*(49+var_inter[0]*(var_inter[0]*(109417.0/45.0+var_inter[0]*(var_inter[0]*(991613.0/144.0+var_inter[0]*(823543.0/720.0*var_inter[0]-352947.0/80.0))-88837.0/16.0))-10927.0/20.0))*val[1]+val[0]*(1-var_inter[0])+var_inter[0]*val[7]

#
def interpolation_vertex( var_inter, val_vertex )
    return (1-var_inter[0])*val_vertex[0]+val_vertex[1]*var_inter[0]
#
def nb_children( sub_nvi ) when sub_nvi==0
    return 1
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==0
    return child_var_inter
def type_child( sub_nvi, num_child ) when sub_nvi==0
    return Bar_5
def node_number_child( sub_nvi, num_child ) when sub_nvi==0
    return 0 .. 5
#
def nb_children( sub_nvi ) when sub_nvi==1
    return 2
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==0
    return [0]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return [0]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==1
    return [1]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return [1]
def normal( var_inter, pos_nodes )
    res := Vec[ type_promote(var_inter[0],pos_nodes[0][0],mul), 2 ]()
    R_0 := pos_nodes[4][0]; R_1 := pos_nodes[1][0]; R_2 := pos_nodes[0][0]; R_3 := pos_nodes[2][0];
    R_4 := pos_nodes[3][0]; R_5 := pos_nodes[4][1]; R_6 := pos_nodes[3][1]; R_7 := pos_nodes[0][1];
    R_8 := pos_nodes[1][1]; R_9 := var_inter[0]; R_10 := 256.0*R_9; R_10 = (-384.0)+R_10;
    R_10 = R_9*R_10; R_10 = 152.0+R_10; R_10 = R_9*R_10; R_10 = (-12.0)+R_10;
    R_4 = R_10*R_4; R_6 = R_10*R_6; R_10 = (128.0/3.0)*R_9; R_11 := (-80.0)+R_10;
    R_11 = R_9*R_11; R_11 = (140.0/3.0)+R_11; R_11 = R_9*R_11; R_11 = (-25.0/3.0)+R_11;
    R_2 = R_11*R_2; R_11 = R_7*R_11; R_10 = (-48.0)+R_10; R_10 = R_9*R_10;
    R_10 = (44.0/3.0)+R_10; R_10 = R_9*R_10; R_10 = (-1.0)+R_10; R_1 = R_1*R_10;
    R_1 = R_2+R_1; R_8 = R_10*R_8; R_11 = R_8+R_11; R_8 = (-512.0/3.0)*R_9;
    R_10 = 224.0+R_8; R_10 = R_9*R_10; R_10 = (-224.0/3.0)+R_10; R_10 = R_9*R_10;
    R_10 = (16.0/3.0)+R_10; R_0 = R_10*R_0; R_5 = R_10*R_5; R_8 = 288.0+R_8;
    R_8 = R_9*R_8; R_8 = (-416.0/3.0)+R_8; R_8 = R_9*R_8; R_8 = 16.0+R_8;
    R_3 = R_3*R_8; R_1 = R_3+R_1; R_1 = R_4+R_1; R_0 = R_1+R_0;
    R_1 = pow(R_0,2); R_4 = pos_nodes[2][1]; R_8 = R_4*R_8; R_11 = R_8+R_11;
    R_6 = R_11+R_6; R_5 = R_6+R_5; R_6 = pow(R_5,2); R_6 = R_1+R_6;
    R_6 = rsqrt(R_6); R_0 = R_0*R_6; R_0 = (-1.0)*R_0; res[1] = R_0;
    R_6 = R_5*R_6; res[0] = R_6; 
    return res
#
def jac_mat( var_inter, pos_nodes )
    res := Mat[ type_promote(var_inter[0],pos_nodes[0][0],mul), Gen[ 1, 2 ] ]()
    R_0 := pos_nodes[4][1]; R_1 := pos_nodes[3][1]; R_2 := pos_nodes[0][1]; R_3 := pos_nodes[1][1];
    R_4 := pos_nodes[2][1]; R_5 := pos_nodes[4][0]; R_6 := pos_nodes[1][0]; R_7 := pos_nodes[0][0];
    R_8 := pos_nodes[2][0]; R_9 := pos_nodes[3][0]; R_10 := var_inter[0]; R_11 := (128.0/3.0)*R_10;
    R_12 := (-48.0)+R_11; R_12 = R_10*R_12; R_12 = (44.0/3.0)+R_12; R_12 = R_10*R_12;
    R_12 = (-1.0)+R_12; R_3 = R_12*R_3; R_12 = R_6*R_12; R_11 = (-80.0)+R_11;
    R_11 = R_10*R_11; R_11 = (140.0/3.0)+R_11; R_11 = R_10*R_11; R_11 = (-25.0/3.0)+R_11;
    R_2 = R_2*R_11; R_2 = R_3+R_2; R_7 = R_11*R_7; R_12 = R_7+R_12;
    R_7 = (-512.0/3.0)*R_10; R_11 = 224.0+R_7; R_11 = R_10*R_11; R_11 = (-224.0/3.0)+R_11;
    R_11 = R_10*R_11; R_11 = (16.0/3.0)+R_11; R_0 = R_11*R_0; R_5 = R_11*R_5;
    R_7 = 288.0+R_7; R_7 = R_10*R_7; R_7 = (-416.0/3.0)+R_7; R_7 = R_10*R_7;
    R_7 = 16.0+R_7; R_4 = R_4*R_7; R_2 = R_4+R_2; R_7 = R_8*R_7;
    R_12 = R_7+R_12; R_7 = 256.0*R_10; R_7 = (-384.0)+R_7; R_7 = R_10*R_7;
    R_7 = 152.0+R_7; R_7 = R_10*R_7; R_7 = (-12.0)+R_7; R_1 = R_7*R_1;
    R_1 = R_2+R_1; R_0 = R_1+R_0; res(0,1) = R_0; R_9 = R_7*R_9;
    R_12 = R_9+R_12; R_5 = R_12+R_5; res(0,0) = R_5; 
    return res
#
def jac( var_inter, pos_nodes )
    R_0 := pos_nodes[4][1]; R_1 := pos_nodes[3][1]; R_2 := pos_nodes[0][1]; R_3 := pos_nodes[1][1];
    R_4 := pos_nodes[2][1]; R_5 := pos_nodes[4][0]; R_6 := pos_nodes[1][0]; R_7 := pos_nodes[0][0];
    R_8 := pos_nodes[2][0]; R_9 := pos_nodes[3][0]; R_10 := var_inter[0]; R_11 := (128.0/3.0)*R_10;
    R_12 := (-48.0)+R_11; R_12 = R_10*R_12; R_12 = (44.0/3.0)+R_12; R_12 = R_10*R_12;
    R_12 = (-1.0)+R_12; R_3 = R_12*R_3; R_12 = R_6*R_12; R_11 = (-80.0)+R_11;
    R_11 = R_10*R_11; R_11 = (140.0/3.0)+R_11; R_11 = R_10*R_11; R_11 = (-25.0/3.0)+R_11;
    R_2 = R_2*R_11; R_2 = R_3+R_2; R_7 = R_11*R_7; R_12 = R_7+R_12;
    R_7 = (-512.0/3.0)*R_10; R_11 = 224.0+R_7; R_11 = R_10*R_11; R_11 = (-224.0/3.0)+R_11;
    R_11 = R_10*R_11; R_11 = (16.0/3.0)+R_11; R_0 = R_11*R_0; R_5 = R_11*R_5;
    R_7 = 288.0+R_7; R_7 = R_10*R_7; R_7 = (-416.0/3.0)+R_7; R_7 = R_10*R_7;
    R_7 = 16.0+R_7; R_4 = R_4*R_7; R_2 = R_4+R_2; R_7 = R_8*R_7;
    R_12 = R_7+R_12; R_7 = 256.0*R_10; R_7 = (-384.0)+R_7; R_7 = R_10*R_7;
    R_7 = 152.0+R_7; R_7 = R_10*R_7; R_7 = (-12.0)+R_7; R_1 = R_7*R_1;
    R_1 = R_2+R_1; R_0 = R_1+R_0; R_0 = pow(R_0,2); R_9 = R_7*R_9;
    R_12 = R_9+R_12; R_5 = R_12+R_5; R_5 = pow(R_5,2); R_0 = R_5+R_0;
    R_0 = sqrt(R_0); res := R_0; 
    return res
#
def inv_jac_mat( var_inter, pos_nodes )
    assert( 0, "inv_jac_mat() available only when nb var inter == dim" )
#
def measure( var_inter, pos_nodes )
    R_0 := pos_nodes[3][1]; R_1 := 256.0*R_0; R_0 = (-40.0)*R_0; R_2 := pos_nodes[3][0];
    R_3 := 256.0*R_2; R_2 = (-40.0)*R_2; R_4 := pos_nodes[1][1]; R_5 := pos_nodes[0][1];
    R_6 := R_5+R_4; R_7 := (128.0/3.0)*R_6; R_6 = (-4.0/3.0)*R_6; R_5 = (-1.0)*R_5;
    R_4 = R_5+R_4; R_5 = 16.0*R_4; R_4 = (-1.0/3.0)*R_4; R_8 := pos_nodes[2][1];
    R_9 := pos_nodes[4][1]; R_10 := R_8+R_9; R_11 := (-512.0/3.0)*R_10; R_11 = R_1+R_11;
    R_7 = R_11+R_7; R_10 = (64.0/3.0)*R_10; R_10 = R_0+R_10; R_6 = R_10+R_6;
    R_10 = R_6*R_7; R_0 = pow(R_6,2); R_11 = (-1.0)*R_0; R_9 = (-1.0)*R_9;
    R_8 = R_9+R_8; R_9 = 32.0*R_8; R_5 = R_9+R_5; R_9 = pow(R_5,2);
    R_1 = R_6*R_5; R_8 = (-8.0/3.0)*R_8; R_4 = R_8+R_4; R_7 = R_4*R_7;
    R_6 = R_4*R_6; R_5 = R_4*R_5; R_4 = pow(R_4,2); R_8 = pos_nodes[0][0];
    R_12 := pos_nodes[1][0]; R_13 := R_12+R_8; R_14 := (128.0/3.0)*R_13; R_13 = (-4.0/3.0)*R_13;
    R_12 = (-1.0)*R_12; R_8 = R_12+R_8; R_12 = (-16.0)*R_8; R_8 = (1.0/3.0)*R_8;
    R_15 := pos_nodes[2][0]; R_16 := pos_nodes[4][0]; R_17 := R_15+R_16; R_18 := (-512.0/3.0)*R_17;
    R_18 = R_3+R_18; R_14 = R_18+R_14; R_17 = (64.0/3.0)*R_17; R_17 = R_2+R_17;
    R_13 = R_17+R_13; R_17 = R_13*R_14; R_10 = R_17+R_10; R_10 = 2.0*R_10;
    R_17 = pow(R_13,2); R_2 = (-1.0)*R_17; R_0 = R_17+R_0; R_16 = (-1.0)*R_16;
    R_15 = R_16+R_15; R_16 = 32.0*R_15; R_12 = R_16+R_12; R_16 = pow(R_12,2);
    R_9 = R_16+R_9; R_10 = R_9+R_10; R_10 = 24.0*R_10; R_9 = R_13*R_12;
    R_15 = (-8.0/3.0)*R_15; R_8 = R_15+R_8; R_14 = R_8*R_14; R_9 = R_14+R_9;
    R_9 = R_7+R_9; R_9 = R_1+R_9; R_9 = 48.0*R_9; R_13 = R_8*R_13;
    R_6 = R_13+R_6; R_13 = pow(R_6,2); R_12 = R_8*R_12; R_5 = R_12+R_5;
    R_12 = (-60.0)*R_5; R_1 = 24.0*R_5; R_5 = 2.0*R_5; R_5 = R_0+R_5;
    R_8 = pow(R_8,2); R_4 = R_8+R_4; R_8 = sqrt(R_4); R_7 = rsqrt(R_4);
    R_4 = 1/R_4; R_13 = R_4*R_13; R_14 = (-1.0)*R_13; R_15 = R_5+R_14;
    R_15 = R_7*R_15; R_15 = (1.0/24.0)*R_15; R_15 = R_8+R_15; R_14 = R_0+R_14;
    R_14 = (-30.0)*R_14; R_12 = R_14+R_12; R_12 = R_12*R_6; R_12 = R_12*R_4;
    R_9 = R_12+R_9; R_9 = R_6*R_9; R_9 = 2.0*R_9; R_11 = R_13+R_11;
    R_2 = R_11+R_2; R_2 = (-12.0)*R_2; R_2 = R_1+R_2; R_2 = R_5*R_2;
    R_9 = R_2+R_9; R_9 = R_4*R_9; R_9 = -0.5*R_9; R_10 = R_9+R_10;
    R_7 = R_10*R_7; R_7 = (1.0/3840.0)*R_7; R_15 = R_7+R_15; res := R_15;
    return res
#
def barycenter( var_inter, pos_nodes )
    res := Vec[ type_promote(var_inter[0],pos_nodes[0][0],mul), 2 ]()
    R_0 := pos_nodes[3][1]; R_1 := (-20.0)*R_0; R_2 := (-10.0)*R_0; R_3 := 64.0*R_0;
    R_4 := 256.0*R_0; R_5 := (-40.0)*R_0; R_6 := pos_nodes[3][0]; R_7 := (-20.0)*R_6;
    R_8 := 64.0*R_6; R_9 := 256.0*R_6; R_10 := (-40.0)*R_6; R_11 := pos_nodes[0][0];
    R_12 := (-1.0)*R_11; R_13 := pos_nodes[1][0]; R_12 = R_12+R_13; R_12 = (-1.0/3.0)*R_12;
    R_14 := R_13+R_11; R_15 := (-2.0/3.0)*R_14; R_15 = R_7+R_15; R_7 = (32.0/3.0)*R_14;
    R_16 := (128.0/3.0)*R_14; R_17 := R_9+R_16; R_14 = (-4.0/3.0)*R_14; R_18 := R_10+R_14;
    R_13 = (-1.0)*R_13; R_11 = R_13+R_11; R_13 = (-16.0/3.0)*R_11; R_19 := (-16.0)*R_11;
    R_11 = (1.0/3.0)*R_11; R_20 := pos_nodes[2][0]; R_21 := (-1.0)*R_20; R_22 := pos_nodes[4][0];
    R_21 = R_21+R_22; R_21 = (-32.0)*R_21; R_21 = R_21+R_19; R_23 := pow(R_21,2);
    R_24 := R_20+R_22; R_25 := (32.0/3.0)*R_24; R_25 = R_15+R_25; R_15 = (-128.0/3.0)*R_24;
    R_15 = R_8+R_15; R_7 = R_15+R_7; R_15 = (-512.0/3.0)*R_24; R_9 = R_9+R_15;
    R_16 = R_9+R_16; R_15 = R_17+R_15; R_24 = (64.0/3.0)*R_24; R_10 = R_10+R_24;
    R_14 = R_10+R_14; R_10 = R_14*R_16; R_10 = (-1.0)*R_10; R_17 = R_21*R_14;
    R_9 = pow(R_14,2); R_8 = (-1.0)*R_9; R_24 = R_18+R_24; R_18 = R_24*R_15;
    R_26 := pow(R_24,2); R_27 := (-1.0)*R_26; R_22 = (-1.0)*R_22; R_20 = R_22+R_20;
    R_22 = (32.0/3.0)*R_20; R_22 = R_13+R_22; R_13 = 32.0*R_20; R_19 = R_13+R_19;
    R_13 = pow(R_19,2); R_28 := R_24*R_19; R_20 = (-8.0/3.0)*R_20; R_12 = R_12+R_20;
    R_11 = R_20+R_11; R_16 = R_11*R_16; R_16 = R_17+R_16; R_14 = R_11*R_14;
    R_21 = R_21*R_11; R_15 = R_15*R_11; R_24 = R_24*R_11; R_19 = R_11*R_19;
    R_11 = pow(R_11,2); R_17 = pos_nodes[1][1]; R_20 = pos_nodes[0][1]; R_29 := R_20+R_17;
    R_30 := (-2.0/3.0)*R_29; R_31 := (-1.0/3.0)*R_29; R_31 = R_2+R_31; R_2 = (32.0/3.0)*R_29;
    R_32 := (128.0/3.0)*R_29; R_29 = (-4.0/3.0)*R_29; R_20 = (-1.0)*R_20; R_17 = R_20+R_17;
    R_20 = (16.0/3.0)*R_17; R_33 := 16.0*R_17; R_17 = (-1.0/3.0)*R_17; R_34 := pos_nodes[4][1];
    R_35 := (-1.0)*R_34; R_36 := pos_nodes[2][1]; R_35 = R_35+R_36; R_37 := (-8.0/3.0)*R_35;
    R_37 = R_37+R_17; R_38 := pow(R_37,2); R_38 = R_11+R_38; R_39 := 1/R_38;
    R_40 := rsqrt(R_38); R_41 := R_40*R_37; R_38 = sqrt(R_38); R_42 := (-1.0)*R_38;
    R_35 = 32.0*R_35; R_33 = R_35+R_33; R_35 = R_37*R_33; R_35 = R_21+R_35;
    R_21 = (-60.0)*R_35; R_43 := 24.0*R_35; R_35 = 2.0*R_35; R_44 := R_35+R_9;
    R_45 := pow(R_33,2); R_23 = R_23+R_45; R_23 = -0.5*R_23; R_45 = R_13+R_45;
    R_45 = 0.5*R_45; R_13 = R_36+R_34; R_46 := (32.0/3.0)*R_13; R_1 = R_46+R_1;
    R_30 = R_1+R_30; R_30 = R_30*R_38; R_1 = (16.0/3.0)*R_13; R_1 = R_31+R_1;
    R_31 = (-128.0/3.0)*R_13; R_3 = R_31+R_3; R_3 = R_2+R_3; R_38 = R_3*R_38;
    R_3 = (-512.0/3.0)*R_13; R_3 = R_4+R_3; R_32 = R_3+R_32; R_3 = R_37*R_32;
    R_3 = R_16+R_3; R_13 = (64.0/3.0)*R_13; R_13 = R_5+R_13; R_29 = R_13+R_29;
    R_13 = R_37*R_29; R_13 = R_14+R_13; R_41 = R_41*R_13; R_41 = R_30+R_41;
    R_41 = (-1.0/12.0)*R_41; R_30 = pow(R_13,2); R_30 = R_39*R_30; R_14 = (-1.0)*R_30;
    R_5 = R_29*R_32; R_16 = (-1.0)*R_5; R_4 = R_29*R_33; R_3 = R_3+R_4;
    R_2 = 48.0*R_3; R_31 = pow(R_29,2); R_44 = R_44+R_31; R_44 = R_44+R_14;
    R_1 = R_44*R_1; R_46 = R_44*R_13; R_46 = R_46*R_39; R_46 = -0.5*R_46;
    R_46 = R_3+R_46; R_37 = R_46*R_37; R_44 = (-1.0/24.0)*R_44; R_9 = R_9+R_31;
    R_14 = R_9+R_14; R_14 = 12.0*R_14; R_14 = R_43+R_14; R_9 = R_35+R_9;
    R_14 = R_9*R_14; R_9 = (-1.0)*R_31; R_30 = R_30+R_9; R_8 = R_30+R_8;
    R_8 = 30.0*R_8; R_8 = R_21+R_8; R_8 = R_8*R_13; R_8 = R_8*R_39;
    R_8 = R_2+R_8; R_8 = R_8*R_13; R_8 = 2.0*R_8; R_8 = R_14+R_8;
    R_39 = R_8*R_39; R_39 = (1.0/96.0)*R_39; R_10 = R_39+R_10; R_10 = R_16+R_10;
    R_23 = R_10+R_23; R_23 = (1.0/80.0)*R_23; R_44 = R_23+R_44; R_44 = R_40*R_44;
    R_44 = R_42+R_44; R_0 = R_44*R_0; R_44 = 1/R_44; R_42 = R_26+R_31;
    R_36 = (-1.0)*R_36; R_34 = R_36+R_34; R_36 = (-32.0/3.0)*R_34; R_20 = R_36+R_20;
    R_13 = R_20*R_13; R_37 = R_13+R_37; R_1 = R_37+R_1; R_1 = R_40*R_1;
    R_1 = R_38+R_1; R_1 = (-1.0/80.0)*R_1; R_0 = R_1+R_0; R_41 = R_0+R_41;
    R_41 = R_44*R_41; res[1] = R_41; R_34 = (8.0/3.0)*R_34; R_17 = R_34+R_17;
    R_32 = R_17*R_32; R_15 = R_32+R_15; R_28 = R_15+R_28; R_4 = R_28+R_4;
    R_28 = 48.0*R_4; R_29 = R_17*R_29; R_24 = R_29+R_24; R_22 = R_24*R_22;
    R_29 = pow(R_24,2); R_33 = R_17*R_33; R_19 = R_33+R_19; R_33 = (-60.0)*R_19;
    R_15 = 24.0*R_19; R_19 = 2.0*R_19; R_42 = R_42+R_19; R_17 = pow(R_17,2);
    R_11 = R_17+R_11; R_17 = 1/R_11; R_29 = R_17*R_29; R_27 = R_29+R_27;
    R_9 = R_27+R_9; R_9 = 30.0*R_9; R_33 = R_9+R_33; R_33 = R_24*R_33;
    R_33 = R_17*R_33; R_33 = R_28+R_33; R_33 = R_24*R_33; R_33 = 2.0*R_33;
    R_29 = (-1.0)*R_29; R_19 = R_19+R_29; R_19 = R_19+R_26; R_19 = R_19+R_31;
    R_28 = R_24*R_19; R_28 = R_17*R_28; R_28 = -0.5*R_28; R_28 = R_4+R_28;
    R_28 = R_12*R_28; R_4 = R_19*R_25; R_4 = 0.5*R_4; R_28 = R_4+R_28;
    R_28 = R_22+R_28; R_19 = (-1.0/24.0)*R_19; R_26 = R_29+R_26; R_31 = R_26+R_31;
    R_31 = 12.0*R_31; R_15 = R_31+R_15; R_15 = R_42*R_15; R_33 = R_15+R_33;
    R_33 = R_17*R_33; R_33 = (-1.0/96.0)*R_33; R_18 = R_33+R_18; R_5 = R_18+R_5;
    R_45 = R_5+R_45; R_45 = (-1.0/80.0)*R_45; R_19 = R_45+R_19; R_45 = rsqrt(R_11);
    R_24 = R_24*R_45; R_24 = R_12*R_24; R_28 = R_45*R_28; R_19 = R_45*R_19;
    R_11 = sqrt(R_11); R_25 = R_11*R_25; R_24 = R_25+R_24; R_24 = (-1.0/12.0)*R_24;
    R_7 = R_11*R_7; R_28 = R_7+R_28; R_28 = (-1.0/80.0)*R_28; R_11 = (-1.0)*R_11;
    R_19 = R_11+R_19; R_6 = R_19*R_6; R_28 = R_6+R_28; R_24 = R_28+R_24;
    R_19 = 1/R_19; R_24 = R_19*R_24; res[0] = R_24; 
    return res
#
def inertia_operator_for_barycenter( var_inter, pos_nodes )
    R_0 := pos_nodes[3][1]; R_1 := (-20.0)*R_0; R_2 := (-10.0)*R_0; R_3 := 64.0*R_0;
    R_4 := 256.0*R_0; R_5 := (-40.0)*R_0; R_6 := pos_nodes[3][0]; R_7 := (-20.0)*R_6;
    R_8 := 64.0*R_6; R_9 := 256.0*R_6; R_10 := (-40.0)*R_6; R_11 := pos_nodes[1][1];
    R_12 := (-1.0)*R_11; R_13 := pos_nodes[0][1]; R_12 = R_12+R_13; R_12 = (-16.0/3.0)*R_12;
    R_14 := R_13+R_11; R_15 := (-2.0/3.0)*R_14; R_16 := R_15+R_1; R_17 := (-1.0/3.0)*R_14;
    R_17 = R_2+R_17; R_2 = (32.0/3.0)*R_14; R_18 := (128.0/3.0)*R_14; R_14 = (-4.0/3.0)*R_14;
    R_13 = (-1.0)*R_13; R_11 = R_13+R_11; R_13 = (16.0/3.0)*R_11; R_19 := 16.0*R_11;
    R_11 = (-1.0/3.0)*R_11; R_20 := pos_nodes[2][1]; R_21 := (-1.0)*R_20; R_22 := pos_nodes[4][1];
    R_21 = R_21+R_22; R_23 := (-32.0/3.0)*R_21; R_12 = R_23+R_12; R_13 = R_23+R_13;
    R_21 = (8.0/3.0)*R_21; R_21 = R_21+R_11; R_23 = R_12*R_21; R_24 := pow(R_21,2);
    R_25 := R_20+R_22; R_26 := (32.0/3.0)*R_25; R_16 = R_26+R_16; R_27 := pow(R_16,2);
    R_28 := R_16*R_21; R_1 = R_26+R_1; R_15 = R_1+R_15; R_1 = (16.0/3.0)*R_25;
    R_1 = R_17+R_1; R_17 = (-128.0/3.0)*R_25; R_3 = R_17+R_3; R_3 = R_2+R_3;
    R_2 = (-512.0/3.0)*R_25; R_2 = R_4+R_2; R_18 = R_2+R_18; R_2 = R_21*R_18;
    R_25 = (64.0/3.0)*R_25; R_25 = R_5+R_25; R_14 = R_25+R_14; R_25 = R_14*R_18;
    R_5 = (-1.0)*R_25; R_4 = R_21*R_14; R_17 = pow(R_14,2); R_26 = (-1.0)*R_17;
    R_22 = (-1.0)*R_22; R_20 = R_22+R_20; R_22 = 32.0*R_20; R_19 = R_22+R_19;
    R_22 = pow(R_19,2); R_29 := R_14*R_19; R_30 := R_21*R_19; R_20 = (-8.0/3.0)*R_20;
    R_11 = R_20+R_11; R_18 = R_11*R_18; R_19 = R_11*R_19; R_14 = R_11*R_14;
    R_20 = pow(R_11,2); R_31 := pos_nodes[0][0]; R_32 := (-1.0)*R_31; R_33 := pos_nodes[1][0];
    R_32 = R_32+R_33; R_32 = (-1.0/3.0)*R_32; R_34 := R_33+R_31; R_35 := (-2.0/3.0)*R_34;
    R_35 = R_7+R_35; R_7 = (32.0/3.0)*R_34; R_36 := (128.0/3.0)*R_34; R_37 := R_9+R_36;
    R_34 = (-4.0/3.0)*R_34; R_38 := R_10+R_34; R_33 = (-1.0)*R_33; R_31 = R_33+R_31;
    R_33 = (-16.0/3.0)*R_31; R_39 := (-16.0)*R_31; R_31 = (1.0/3.0)*R_31; R_40 := pos_nodes[2][0];
    R_41 := (-1.0)*R_40; R_42 := pos_nodes[4][0]; R_41 = R_41+R_42; R_41 = (-32.0)*R_41;
    R_41 = R_41+R_39; R_43 := pow(R_41,2); R_43 = R_43+R_22; R_44 := -0.5*R_43;
    R_45 := R_40+R_42; R_46 := (32.0/3.0)*R_45; R_46 = R_35+R_46; R_35 = pow(R_46,2);
    R_27 = R_35+R_27; R_35 = (-128.0/3.0)*R_45; R_35 = R_8+R_35; R_7 = R_35+R_7;
    R_35 = (-512.0/3.0)*R_45; R_9 = R_9+R_35; R_36 = R_9+R_36; R_35 = R_37+R_35;
    R_45 = (64.0/3.0)*R_45; R_10 = R_10+R_45; R_34 = R_10+R_34; R_10 = R_34*R_36;
    R_10 = (-1.0)*R_10; R_37 = R_41*R_34; R_9 = pow(R_34,2); R_8 = (-1.0)*R_9;
    R_47 := R_9+R_17; R_45 = R_38+R_45; R_38 = R_41*R_45; R_48 := R_45*R_35;
    R_49 := R_48+R_25; R_49 = 2.0*R_49; R_49 = R_43+R_49; R_49 = 24.0*R_49;
    R_43 = pow(R_45,2); R_50 := (-1.0)*R_43; R_51 := R_43+R_17; R_42 = (-1.0)*R_42;
    R_40 = R_42+R_40; R_42 = (32.0/3.0)*R_40; R_42 = R_33+R_42; R_33 = 32.0*R_40;
    R_39 = R_33+R_39; R_33 = pow(R_39,2); R_22 = R_33+R_22; R_22 = 0.5*R_22;
    R_33 = R_45*R_39; R_40 = (-8.0/3.0)*R_40; R_32 = R_32+R_40; R_52 := R_32*R_42;
    R_53 := R_32*R_46; R_54 := pow(R_32,2); R_54 = R_54+R_24; R_31 = R_40+R_31;
    R_36 = R_31*R_36; R_36 = R_37+R_36; R_36 = R_36+R_18; R_36 = R_36+R_29;
    R_37 = 48.0*R_36; R_34 = R_31*R_34; R_34 = R_34+R_14; R_13 = R_13*R_34;
    R_40 = pow(R_34,2); R_41 = R_41*R_31; R_19 = R_41+R_19; R_41 = (-60.0)*R_19;
    R_55 := 24.0*R_19; R_19 = 2.0*R_19; R_56 := R_51+R_19; R_9 = R_19+R_9;
    R_9 = R_9+R_17; R_57 := R_19+R_47; R_35 = R_35*R_31; R_38 = R_38+R_35;
    R_18 = R_38+R_18; R_18 = R_18+R_29; R_38 = 12.0*R_18; R_18 = 48.0*R_18;
    R_35 = R_2+R_35; R_33 = R_35+R_33; R_29 = R_33+R_29; R_33 = 48.0*R_29;
    R_39 = R_31*R_39; R_39 = R_30+R_39; R_30 = (-60.0)*R_39; R_35 = 24.0*R_39;
    R_39 = 2.0*R_39; R_51 = R_51+R_39; R_45 = R_45*R_31; R_4 = R_4+R_45;
    R_2 = R_4*R_42; R_58 := pow(R_4,2); R_14 = R_45+R_14; R_45 = pow(R_14,2);
    R_31 = pow(R_31,2); R_24 = R_24+R_31; R_59 := 1/R_24; R_58 = R_59*R_58;
    R_50 = R_58+R_50; R_50 = R_50+R_26; R_50 = 30.0*R_50; R_30 = R_50+R_30;
    R_30 = R_4*R_30; R_30 = R_59*R_30; R_30 = R_33+R_30; R_30 = R_4*R_30;
    R_30 = 2.0*R_30; R_58 = (-1.0)*R_58; R_39 = R_39+R_58; R_39 = R_39+R_43;
    R_39 = R_39+R_17; R_33 = R_4*R_39; R_33 = R_59*R_33; R_33 = -0.5*R_33;
    R_33 = R_29+R_33; R_33 = R_32*R_33; R_29 = R_39*R_46; R_29 = 0.5*R_29;
    R_33 = R_29+R_33; R_33 = R_2+R_33; R_39 = (-1.0/24.0)*R_39; R_58 = R_58+R_43;
    R_58 = R_58+R_17; R_58 = 12.0*R_58; R_35 = R_58+R_35; R_35 = R_51*R_35;
    R_30 = R_35+R_30; R_30 = R_59*R_30; R_30 = (-1.0/96.0)*R_30; R_48 = R_30+R_48;
    R_25 = R_48+R_25; R_22 = R_25+R_22; R_22 = (-1.0/80.0)*R_22; R_39 = R_22+R_39;
    R_22 = rsqrt(R_24); R_4 = R_4*R_22; R_4 = R_32*R_4; R_33 = R_22*R_33;
    R_39 = R_22*R_39; R_24 = sqrt(R_24); R_22 = R_24*R_46; R_4 = R_22+R_4;
    R_4 = (-1.0/12.0)*R_4; R_22 = R_24*R_7; R_33 = R_22+R_33; R_33 = (-1.0/80.0)*R_33;
    R_24 = (-1.0)*R_24; R_39 = R_24+R_39; R_24 = R_39*R_6; R_33 = R_24+R_33;
    R_4 = R_33+R_4; R_39 = 1/R_39; R_4 = R_39*R_4; R_4 = (-1.0)*R_4;
    R_6 = R_4+R_6; R_7 = R_7*R_6; R_52 = R_7+R_52; R_42 = R_42*R_6;
    R_53 = R_42+R_53; R_53 = R_28+R_53; R_46 = R_46*R_6; R_28 = pow(R_6,2);
    R_6 = R_32*R_6; R_20 = R_31+R_20; R_31 = 1/R_20; R_45 = R_45*R_31;
    R_45 = (-1.0)*R_45; R_32 = R_45+R_43; R_32 = R_32+R_17; R_42 = (-30.0)*R_32;
    R_42 = R_41+R_42; R_42 = R_14*R_42; R_42 = R_42*R_31; R_42 = R_18+R_42;
    R_42 = R_42*R_14; R_42 = 2.0*R_42; R_32 = 12.0*R_32; R_32 = R_55+R_32;
    R_32 = R_56*R_32; R_42 = R_32+R_42; R_42 = R_42*R_31; R_42 = -0.5*R_42;
    R_42 = R_49+R_42; R_45 = R_19+R_45; R_43 = R_45+R_43; R_17 = R_43+R_17;
    R_43 = R_14*R_17; R_43 = R_43*R_31; R_43 = (-6.0)*R_43; R_43 = R_38+R_43;
    R_40 = R_31*R_40; R_26 = R_40+R_26; R_8 = R_26+R_8; R_8 = 30.0*R_8;
    R_8 = R_41+R_8; R_8 = R_8*R_34; R_8 = R_8*R_31; R_8 = R_37+R_8;
    R_8 = R_8*R_34; R_8 = 2.0*R_8; R_40 = (-1.0)*R_40; R_9 = R_9+R_40;
    R_1 = R_9*R_1; R_37 = R_9*R_34; R_37 = R_37*R_31; R_37 = -0.5*R_37;
    R_37 = R_36+R_37; R_37 = R_37*R_11; R_37 = R_13+R_37; R_1 = R_37+R_1;
    R_9 = (-1.0/24.0)*R_9; R_40 = R_47+R_40; R_40 = 12.0*R_40; R_40 = R_55+R_40;
    R_40 = R_57*R_40; R_8 = R_40+R_8; R_31 = R_8*R_31; R_31 = (1.0/96.0)*R_31;
    R_10 = R_31+R_10; R_10 = R_5+R_10; R_44 = R_10+R_44; R_44 = (1.0/80.0)*R_44;
    R_9 = R_44+R_9; R_44 = sqrt(R_20); R_15 = R_15*R_44; R_10 = R_3*R_44;
    R_5 = (-1.0)*R_44; R_20 = rsqrt(R_20); R_11 = R_20*R_11; R_34 = R_11*R_34;
    R_34 = R_15+R_34; R_34 = (-1.0/12.0)*R_34; R_1 = R_20*R_1; R_1 = R_10+R_1;
    R_1 = (-1.0/80.0)*R_1; R_9 = R_20*R_9; R_9 = R_5+R_9; R_5 = R_9*R_0;
    R_5 = R_1+R_5; R_34 = R_5+R_34; R_9 = 1/R_9; R_34 = R_9*R_34;
    R_34 = (-1.0)*R_34; R_0 = R_34+R_0; R_3 = R_3*R_0; R_52 = R_3+R_52;
    R_52 = R_23+R_52; R_52 = 2.0*R_52; R_52 = R_27+R_52; R_52 = R_44*R_52;
    R_12 = R_0*R_12; R_53 = R_12+R_53; R_53 = R_14*R_53; R_53 = 2.0*R_53;
    R_16 = R_0*R_16; R_16 = R_46+R_16; R_16 = 2.0*R_16; R_16 = R_54+R_16;
    R_54 = R_17*R_16; R_54 = 0.5*R_54; R_16 = R_44*R_16; R_46 = pow(R_0,2);
    R_46 = R_28+R_46; R_42 = R_46*R_42; R_42 = (1.0/48.0)*R_42; R_44 = R_44*R_46;
    R_17 = R_46*R_17; R_17 = 0.5*R_17; R_21 = R_0*R_21; R_21 = R_6+R_21;
    R_43 = R_43*R_21; R_43 = (1.0/6.0)*R_43; R_43 = R_53+R_43; R_43 = R_42+R_43;
    R_54 = R_43+R_54; R_54 = R_20*R_54; R_52 = R_54+R_52; R_52 = (1.0/80.0)*R_52;
    R_21 = R_14*R_21; R_21 = 2.0*R_21; R_17 = R_21+R_17; R_17 = R_20*R_17;
    R_16 = R_17+R_16; R_16 = (1.0/12.0)*R_16; R_44 = R_16+R_44; R_52 = R_44+R_52;
    res := R_52; 
    return res
