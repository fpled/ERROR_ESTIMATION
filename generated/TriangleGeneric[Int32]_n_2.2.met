static const nvi := 2
static const nb_nodes := 6
static const nb_vertex_nodes := 3
static const center_of_var_inter := [ 1.0/3.0, 1.0/3.0 ]
#
def interpolation( var_inter, val, interpolation_base )
    if interpolation_base == "lagrange"
        return 4*val[4]*var_inter[1]*var_inter[0]+val[0]*(1+var_inter[1]*(4*var_inter[0]+2*var_inter[1]-3)+var_inter[0]*(2*var_inter[0]-3))+val[2]*var_inter[0]*(2*var_inter[0]-1)+4*val[3]*var_inter[1]*(1-var_inter[1]-var_inter[0])+val[5]*var_inter[1]*(2*var_inter[1]-1)-4*val[1]*var_inter[0]*(var_inter[1]+var_inter[0]-1)
    else if interpolation_base == "hierarchical"
        return val[0]*(1-var_inter[1]-var_inter[0])+var_inter[0]*val[2]+4*val[3]*var_inter[1]*(1-var_inter[1]-var_inter[0])+4*val[4]*var_inter[1]*var_inter[0]+var_inter[1]*val[5]-4*val[1]*var_inter[0]*(var_inter[1]+var_inter[0]-1)

#
def generic_interpolation( var_inter, val, interpolation_base, deg ) when deg == 2
    if interpolation_base == "lagrange"
        return 4*val[3]*var_inter[1]*(1-var_inter[1]-var_inter[0])+val[0]*(1+var_inter[1]*(4*var_inter[0]+2*var_inter[1]-3)+var_inter[0]*(2*var_inter[0]-3))+val[2]*var_inter[0]*(2*var_inter[0]-1)+4*var_inter[1]*var_inter[0]*val[4]+val[5]*var_inter[1]*(2*var_inter[1]-1)-4*val[1]*var_inter[0]*(var_inter[1]+var_inter[0]-1)
    else if interpolation_base == "hierarchical"
        return 4*var_inter[1]*var_inter[0]*val[4]+4*val[3]*var_inter[1]*(1-var_inter[1]-var_inter[0])+val[0]*(1-var_inter[1]-var_inter[0])+var_inter[0]*val[2]+var_inter[1]*val[5]-4*val[1]*var_inter[0]*(var_inter[1]+var_inter[0]-1)

#
def interpolation_vertex( var_inter, val_vertex )
    return val_vertex[2]*var_inter[1]+val_vertex[0]*(1-var_inter[1]-var_inter[0])+val_vertex[1]*var_inter[0]
#
def nb_children( sub_nvi ) when sub_nvi==0
    return 1
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==0
    return child_var_inter
def type_child( sub_nvi, num_child ) when sub_nvi==0
    return TriangleGeneric[Int32]
def node_number_child( sub_nvi, num_child ) when sub_nvi==0
    return 0 .. 6
#
def nb_children( sub_nvi ) when sub_nvi==1
    return 3
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==0
    return [child_var_inter[0]*(2*child_var_inter[0]-1)-2*child_var_inter[0]*(child_var_inter[0]-1),0]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return BarGeneric[Int32]
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return [0,1,2]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==1
    return [1+(2*child_var_inter[0]-3)*child_var_inter[0]-2*child_var_inter[0]*(child_var_inter[0]-1),child_var_inter[0]*(2*child_var_inter[0]-1)-2*child_var_inter[0]*(child_var_inter[0]-1)]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return BarGeneric[Int32]
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return [2,4,5]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==2
    return [0,1+child_var_inter[0]*(2*child_var_inter[0]-3)-2*child_var_inter[0]*(child_var_inter[0]-1)]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==2
    return BarGeneric[Int32]
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==2
    return [5,3,0]
#
def nb_children( sub_nvi ) when sub_nvi==2
    return 3
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==2 and num_child==0
    return [0,0]
def type_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==0
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==0
    return [0]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==2 and num_child==1
    return [1,0]
def type_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==1
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==1
    return [2]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==2 and num_child==2
    return [0,1]
def type_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==2
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==2
    return [5]
def normal( var_inter, pos_nodes )
    assert( 0, "normal is defined only for nb_dim == nvi + 1" )
#
def jac_mat( var_inter, pos_nodes )
    res := Mat[ type_promote(var_inter[0],pos_nodes[0][0],mul), Gen[ 2, 2 ] ]()
    R_0 := pos_nodes[5][1]; R_1 := pos_nodes[5][0]; R_2 := pos_nodes[4][1]; R_3 := pos_nodes[1][1];
    R_4 := pos_nodes[0][1]; R_5 := pos_nodes[2][1]; R_6 := pos_nodes[3][1]; R_7 := pos_nodes[4][0];
    R_8 := pos_nodes[3][0]; R_9 := pos_nodes[1][0]; R_10 := pos_nodes[0][0]; R_11 := var_inter[1];
    R_12 := 4.0*R_11; R_12 = (-1.0)+R_12; R_0 = R_12*R_0; R_1 = R_12*R_1;
    R_12 = (-2.0)*R_11; R_13 := R_11*R_2; R_13 = 4.0*R_13; R_14 := R_11*R_6;
    R_14 = (-4.0)*R_14; R_15 := R_11*R_7; R_15 = 4.0*R_15; R_16 := R_11*R_8;
    R_16 = (-4.0)*R_16; R_17 := pos_nodes[2][0]; R_18 := var_inter[0]; R_2 = R_18*R_2;
    R_2 = 4.0*R_2; R_19 := R_18*R_3; R_19 = (-4.0)*R_19; R_20 := R_18*R_9;
    R_20 = (-4.0)*R_20; R_21 := (-1.0)*R_18; R_21 = R_12+R_21; R_21 = 1.0+R_21;
    R_6 = R_21*R_6; R_6 = 4.0*R_6; R_8 = R_21*R_8; R_8 = 4.0*R_8;
    R_7 = R_18*R_7; R_7 = 4.0*R_7; R_21 = 2.0*R_18; R_21 = R_11+R_21;
    R_21 = (-1.0)+R_21; R_3 = R_21*R_3; R_3 = (-4.0)*R_3; R_9 = R_21*R_9;
    R_9 = (-4.0)*R_9; R_11 = R_11+R_18; R_11 = 4.0*R_11; R_11 = (-3.0)+R_11;
    R_4 = R_11*R_4; R_19 = R_4+R_19; R_19 = R_6+R_19; R_2 = R_19+R_2;
    R_0 = R_2+R_0; res(1,1) = R_0; R_3 = R_4+R_3; R_10 = R_11*R_10;
    R_20 = R_10+R_20; R_20 = R_8+R_20; R_20 = R_7+R_20; R_1 = R_20+R_1;
    res(1,0) = R_1; R_9 = R_10+R_9; R_18 = 4.0*R_18; R_18 = (-1.0)+R_18;
    R_5 = R_18*R_5; R_3 = R_5+R_3; R_3 = R_14+R_3; R_13 = R_3+R_13;
    res(0,1) = R_13; R_17 = R_18*R_17; R_9 = R_17+R_9; R_16 = R_9+R_16;
    R_15 = R_16+R_15; res(0,0) = R_15; 
    return res
#
def jac( var_inter, pos_nodes )
    R_0 := pos_nodes[5][0]; R_1 := pos_nodes[2][1]; R_2 := pos_nodes[1][1]; R_3 := (-1.0)*R_2;
    R_4 := pos_nodes[4][1]; R_5 := (-1.0)*R_4; R_3 = R_4+R_3; R_4 = pos_nodes[3][1];
    R_5 = R_4+R_5; R_6 := pos_nodes[5][1]; R_7 := pos_nodes[0][1]; R_8 := pos_nodes[4][0];
    R_9 := (-1.0)*R_8; R_10 := pos_nodes[3][0]; R_9 = R_10+R_9; R_11 := pos_nodes[1][0];
    R_12 := (-1.0)*R_11; R_12 = R_8+R_12; R_8 = pos_nodes[0][0]; R_13 := var_inter[1];
    R_5 = R_13*R_5; R_14 := (-2.0)*R_13; R_15 := 4.0*R_13; R_15 = (-1.0)+R_15;
    R_0 = R_15*R_0; R_6 = R_15*R_6; R_9 = R_13*R_9; R_15 = pos_nodes[2][0];
    R_16 := var_inter[0]; R_12 = R_16*R_12; R_3 = R_16*R_3; R_17 := (-1.0)*R_16;
    R_17 = R_14+R_17; R_17 = 1.0+R_17; R_10 = R_17*R_10; R_12 = R_10+R_12;
    R_12 = 4.0*R_12; R_4 = R_17*R_4; R_3 = R_4+R_3; R_3 = 4.0*R_3;
    R_4 = 2.0*R_16; R_4 = R_13+R_4; R_4 = (-1.0)+R_4; R_2 = R_4*R_2;
    R_5 = R_2+R_5; R_5 = (-4.0)*R_5; R_11 = R_4*R_11; R_9 = R_11+R_9;
    R_9 = (-4.0)*R_9; R_13 = R_13+R_16; R_13 = 4.0*R_13; R_13 = (-3.0)+R_13;
    R_7 = R_13*R_7; R_6 = R_7+R_6; R_3 = R_6+R_3; R_8 = R_13*R_8;
    R_0 = R_8+R_0; R_0 = R_12+R_0; R_16 = 4.0*R_16; R_16 = (-1.0)+R_16;
    R_1 = R_16*R_1; R_7 = R_1+R_7; R_5 = R_7+R_5; R_0 = R_5*R_0;
    R_0 = (-1.0)*R_0; R_15 = R_16*R_15; R_8 = R_15+R_8; R_9 = R_8+R_9;
    R_3 = R_9*R_3; R_0 = R_3+R_0; res := R_0; 
    return res
#
def inv_jac_mat( var_inter, pos_nodes )
    res := Mat[ type_promote(var_inter[0],pos_nodes[0][0],mul), Gen[ 2, 2 ] ]()
    R_0 := pos_nodes[5][0]; R_1 := pos_nodes[2][1]; R_2 := pos_nodes[1][1]; R_3 := (-1.0)*R_2;
    R_4 := pos_nodes[4][1]; R_5 := (-1.0)*R_4; R_3 = R_4+R_3; R_4 = pos_nodes[3][1];
    R_5 = R_4+R_5; R_6 := pos_nodes[5][1]; R_7 := pos_nodes[0][1]; R_8 := pos_nodes[4][0];
    R_9 := (-1.0)*R_8; R_10 := pos_nodes[3][0]; R_9 = R_10+R_9; R_11 := pos_nodes[1][0];
    R_12 := (-1.0)*R_11; R_12 = R_8+R_12; R_8 = pos_nodes[0][0]; R_13 := var_inter[1];
    R_5 = R_13*R_5; R_14 := (-2.0)*R_13; R_15 := 4.0*R_13; R_15 = (-1.0)+R_15;
    R_0 = R_15*R_0; R_6 = R_15*R_6; R_9 = R_13*R_9; R_15 = pos_nodes[2][0];
    R_16 := var_inter[0]; R_12 = R_16*R_12; R_3 = R_16*R_3; R_17 := (-1.0)*R_16;
    R_17 = R_14+R_17; R_17 = 1.0+R_17; R_10 = R_17*R_10; R_12 = R_10+R_12;
    R_12 = 4.0*R_12; R_4 = R_17*R_4; R_3 = R_4+R_3; R_3 = 4.0*R_3;
    R_4 = 2.0*R_16; R_4 = R_13+R_4; R_4 = (-1.0)+R_4; R_2 = R_4*R_2;
    R_5 = R_2+R_5; R_5 = (-4.0)*R_5; R_11 = R_4*R_11; R_9 = R_11+R_9;
    R_9 = (-4.0)*R_9; R_13 = R_13+R_16; R_13 = 4.0*R_13; R_13 = (-3.0)+R_13;
    R_7 = R_13*R_7; R_6 = R_7+R_6; R_3 = R_6+R_3; R_8 = R_13*R_8;
    R_0 = R_8+R_0; R_0 = R_12+R_0; R_16 = 4.0*R_16; R_16 = (-1.0)+R_16;
    R_1 = R_16*R_1; R_7 = R_1+R_7; R_5 = R_7+R_5; R_7 = R_5*R_0;
    R_7 = (-1.0)*R_7; R_15 = R_16*R_15; R_8 = R_15+R_8; R_9 = R_8+R_9;
    R_8 = R_9*R_3; R_7 = R_8+R_7; R_7 = 1/R_7; R_9 = R_7*R_9;
    res(1,1) = R_9; R_0 = R_7*R_0; R_0 = (-1.0)*R_0; res(1,0) = R_0;
    R_5 = R_7*R_5; R_5 = (-1.0)*R_5; res(0,1) = R_5; R_3 = R_7*R_3;
    res(0,0) = R_3; 
    return res
#
def measure( var_inter, pos_nodes )
    R_0 := pos_nodes[5][1]; R_1 := (-1.0)*R_0; R_2 := pos_nodes[5][0]; R_3 := (-1.0)*R_2;
    R_4 := pos_nodes[3][1]; R_5 := (-8.0)*R_4; R_6 := pos_nodes[0][1]; R_1 = R_6+R_1;
    R_1 = 2.0*R_1; R_0 = R_6+R_0; R_0 = 4.0*R_0; R_0 = R_5+R_0;
    R_5 = R_6+R_4; R_7 := pos_nodes[2][1]; R_8 := 4.0*R_7; R_9 := pos_nodes[3][0];
    R_10 := (-8.0)*R_9; R_11 := pos_nodes[0][0]; R_2 = R_11+R_2; R_2 = 4.0*R_2;
    R_10 = R_2+R_10; R_3 = R_11+R_3; R_3 = 2.0*R_3; R_2 = R_11+R_9;
    R_12 := pos_nodes[4][0]; R_13 := (-1.0)*R_12; R_14 := R_9+R_13; R_2 = R_13+R_2;
    R_2 = 2.0*R_2; R_15 := pos_nodes[1][0]; R_9 = R_15+R_9; R_9 = R_13+R_9;
    R_9 = (-1.0)*R_9; R_14 = R_15+R_14; R_14 = (-1.0)*R_14; R_14 = R_11+R_14;
    R_0 = R_14*R_0; R_0 = (1.0/12.0)*R_0; R_14 = (-1.0)*R_15; R_14 = R_12+R_14;
    R_12 = 4.0*R_14; R_3 = R_12+R_3; R_15 = (-6.0)*R_15; R_12 = pos_nodes[2][0];
    R_9 = R_12+R_9; R_12 = 4.0*R_12; R_15 = R_12+R_15; R_2 = R_15+R_2;
    R_15 = pos_nodes[1][1]; R_12 = R_15+R_4; R_11 = (-6.0)*R_15; R_11 = R_8+R_11;
    R_8 = (-1.0)*R_15; R_13 = pos_nodes[4][1]; R_16 := (-1.0)*R_13; R_4 = R_4+R_16;
    R_4 = R_15+R_4; R_4 = (-1.0)*R_4; R_4 = R_6+R_4; R_4 = R_10*R_4;
    R_4 = (-1.0/12.0)*R_4; R_0 = R_4+R_0; R_12 = R_16+R_12; R_12 = (-1.0)*R_12;
    R_12 = R_7+R_12; R_7 = R_12*R_3; R_7 = (1.0/12.0)*R_7; R_12 = R_14*R_12;
    R_12 = (-1.0)*R_12; R_0 = R_12+R_0; R_5 = R_16+R_5; R_5 = 2.0*R_5;
    R_5 = R_11+R_5; R_3 = R_3*R_5; R_3 = (-1.0/24.0)*R_3; R_5 = R_14*R_5;
    R_5 = (1.0/6.0)*R_5; R_8 = R_13+R_8; R_13 = 4.0*R_8; R_1 = R_13+R_1;
    R_13 = R_9*R_1; R_13 = (-1.0/12.0)*R_13; R_1 = R_2*R_1; R_1 = (1.0/24.0)*R_1;
    R_9 = R_8*R_9; R_9 = R_0+R_9; R_9 = R_3+R_9; R_1 = R_9+R_1;
    R_1 = R_5+R_1; R_7 = R_1+R_7; R_2 = R_8*R_2; R_2 = (-1.0/6.0)*R_2;
    R_7 = R_2+R_7; R_13 = R_7+R_13; res := R_13; 
    return res
