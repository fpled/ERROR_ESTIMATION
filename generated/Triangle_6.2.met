static const nvi := 2
static const nb_nodes := 6
static const nb_vertex_nodes := 3
static const center_of_var_inter := [ 1.0/3.0, 1.0/3.0 ]
#
def interpolation( var_inter, val, interpolation_base )
    if interpolation_base == "lagrange"
        return 4*val[3]*var_inter[0]*(1-var_inter[0]-var_inter[1])+val[0]*(1+var_inter[1]*(2*var_inter[1]-3)+var_inter[0]*(4*var_inter[1]+2*var_inter[0]-3))+val[1]*var_inter[0]*(2*var_inter[0]-1)+val[2]*var_inter[1]*(2*var_inter[1]-1)+4*val[4]*var_inter[0]*var_inter[1]-4*val[5]*var_inter[1]*(var_inter[0]+var_inter[1]-1)
    else if interpolation_base == "hierarchical"
        return 4*val[3]*var_inter[0]*(1-var_inter[0]-var_inter[1])+var_inter[1]*val[2]+val[0]*(1-var_inter[0]-var_inter[1])+var_inter[0]*val[1]+4*val[4]*var_inter[0]*var_inter[1]-4*val[5]*var_inter[1]*(var_inter[0]+var_inter[1]-1)

#
def interpolation_deg( var_inter, val, interpolation_base, deg ) when deg == 2
    if interpolation_base == "lagrange"
        return 4*var_inter[0]*var_inter[1]*val[4]+var_inter[0]*(2*var_inter[0]-1)*val[2]+(1+var_inter[1]*(2*var_inter[1]-3)+var_inter[0]*(4*var_inter[1]+2*var_inter[0]-3))*val[0]+4*var_inter[0]*(1-var_inter[0]-var_inter[1])*val[1]+var_inter[1]*(2*var_inter[1]-1)*val[5]-4*var_inter[1]*(var_inter[0]+var_inter[1]-1)*val[3]
    else if interpolation_base == "hierarchical"
        return 4*var_inter[0]*var_inter[1]*val[4]+4*var_inter[0]*(1-var_inter[0]-var_inter[1])*val[1]+(1-var_inter[0]-var_inter[1])*val[0]+var_inter[0]*val[2]+var_inter[1]*val[5]-4*var_inter[1]*(var_inter[0]+var_inter[1]-1)*val[3]

#
def interpolation_deg( var_inter, val, interpolation_base, deg ) when deg == 3
    if interpolation_base == "lagrange"
        return val[9]*var_inter[1]*(1-9.0/2.0*var_inter[1]*(1-var_inter[1]))+val[8]*var_inter[0]*var_inter[1]*(27.0/2.0*var_inter[1]-9.0/2.0)+val[6]*var_inter[1]*var_inter[0]*(27.0/2.0*var_inter[0]-9.0/2.0)+var_inter[0]*(1-9.0/2.0*var_inter[0]*(1-var_inter[0]))*val[3]+val[2]*var_inter[0]*(var_inter[0]*(18-27.0/2.0*(var_inter[0]+var_inter[1]))-9.0/2.0*(1-var_inter[1]))+val[0]*(1+var_inter[1]*(var_inter[1]*(9-9.0/2.0*var_inter[1]-27.0/2.0*var_inter[0])+var_inter[0]*(18-27.0/2.0*var_inter[0])-11.0/2.0)+var_inter[0]*(var_inter[0]*(9-9.0/2.0*var_inter[0])-11.0/2.0))+val[1]*var_inter[0]*(9+var_inter[0]*(27*var_inter[1]+27.0/2.0*var_inter[0]-45.0/2.0)+var_inter[1]*(27.0/2.0*var_inter[1]-45.0/2.0))+val[4]*var_inter[1]*(9+var_inter[1]*(27.0/2.0*var_inter[1]+27*var_inter[0]-45.0/2.0)+var_inter[0]*(27.0/2.0*var_inter[0]-45.0/2.0))+val[7]*var_inter[1]*(var_inter[1]*(18-27.0/2.0*(var_inter[0]+var_inter[1]))-9.0/2.0*(1-var_inter[0]))-27*var_inter[0]*var_inter[1]*(var_inter[0]+var_inter[1]-1)*val[5]
    else if interpolation_base == "hierarchical"
        return val[8]*var_inter[1]*var_inter[0]*(9-27.0/2.0*var_inter[0])+val[6]*var_inter[1]*var_inter[0]*(27.0/2.0*var_inter[0]-9.0/2.0)+val[2]*var_inter[0]*(var_inter[0]*(18-27.0/2.0*(var_inter[0]+var_inter[1]))-9.0/2.0*(1-var_inter[1]))+(1-var_inter[0]-var_inter[1])*val[0]+val[1]*var_inter[0]*(9*(1-var_inter[1])+var_inter[0]*(27.0/2.0*(var_inter[0]+var_inter[1])-45.0/2.0))+var_inter[0]*val[3]+val[4]*var_inter[1]*(9+9.0/2.0*var_inter[0]+27.0/2.0*(pow(var_inter[1],2)-pow(var_inter[0],2))-45.0/2.0*var_inter[1])+val[7]*var_inter[1]*(var_inter[1]*(18-27.0/2.0*var_inter[1])+var_inter[0]*(27.0/2.0*var_inter[0]-9)-9.0/2.0)+var_inter[1]*val[9]-27*var_inter[0]*var_inter[1]*(var_inter[0]+var_inter[1]-1)*val[5]

#
def interpolation_deg( var_inter, val, interpolation_base, deg ) when deg == 4
    if interpolation_base == "lagrange"
        return var_inter[0]*var_inter[1]*(16.0/3.0+var_inter[1]*(128.0/3.0*var_inter[1]-32))*val[13]+val[12]*var_inter[1]*(16.0/3.0*(1-var_inter[0])+var_inter[1]*(32*var_inter[0]+var_inter[1]*(224.0/3.0-128.0/3.0*(var_inter[0]+var_inter[1]))-112.0/3.0))+val[9]*var_inter[1]*(var_inter[0]*(28-16*var_inter[0])+var_inter[1]*(76+var_inter[0]*(64*var_inter[0]+128*var_inter[1]-144)+var_inter[1]*(64*var_inter[1]-128))-12)+val[6]*var_inter[0]*var_inter[1]*(96+var_inter[0]*(256*var_inter[1]+128*var_inter[0]-224)+var_inter[1]*(128*var_inter[1]-224))+var_inter[1]*(16+var_inter[1]*(var_inter[1]*(96-128.0/3.0*var_inter[1])-208.0/3.0)+var_inter[0]*(var_inter[0]*(96-128.0/3.0*var_inter[0]-128*var_inter[1])+var_inter[1]*(192-128*var_inter[1])-208.0/3.0))*val[5]+val[4]*var_inter[0]*(var_inter[0]*(22.0/3.0+var_inter[0]*(32.0/3.0*var_inter[0]-16))-1)+val[1]*var_inter[0]*(16+var_inter[1]*(var_inter[1]*(96-128.0/3.0*var_inter[1])-208.0/3.0)+var_inter[0]*(var_inter[0]*(96-128.0/3.0*var_inter[0])+var_inter[1]*(192-128*(var_inter[0]+var_inter[1]))-208.0/3.0))+(1+var_inter[0]*(var_inter[0]*(70.0/3.0+var_inter[0]*(32.0/3.0*var_inter[0]-80.0/3.0))-25.0/3.0)+var_inter[1]*(var_inter[0]*(140.0/3.0+var_inter[0]*(128.0/3.0*var_inter[0]+64*var_inter[1]-80)+var_inter[1]*(128.0/3.0*var_inter[1]-80))+var_inter[1]*(70.0/3.0+var_inter[1]*(32.0/3.0*var_inter[1]-80.0/3.0))-25.0/3.0))*val[0]+val[2]*var_inter[0]*(var_inter[1]*(28-16*var_inter[1])+var_inter[0]*(76+var_inter[0]*(64*var_inter[0]-128*(1-var_inter[1]))+var_inter[1]*(64*var_inter[1]-144))-12)+val[3]*var_inter[0]*(var_inter[0]*(var_inter[0]*(224.0/3.0-128.0/3.0*(var_inter[0]+var_inter[1]))+32*var_inter[1]-112.0/3.0)+16.0/3.0*(1-var_inter[1]))+val[7]*var_inter[1]*var_inter[0]*(var_inter[0]*(160-128*(var_inter[0]+var_inter[1]))-32*(1-var_inter[1]))+val[8]*var_inter[1]*var_inter[0]*(16.0/3.0+var_inter[0]*(128.0/3.0*var_inter[0]-32))+val[10]*var_inter[0]*var_inter[1]*(var_inter[1]*(160-128*(var_inter[0]+var_inter[1]))-32*(1-var_inter[0]))+val[11]*var_inter[0]*var_inter[1]*(4+64*var_inter[0]*var_inter[1]-16*(var_inter[0]+var_inter[1]))+val[14]*var_inter[1]*(var_inter[1]*(22.0/3.0+var_inter[1]*(32.0/3.0*var_inter[1]-16))-1)
    else if interpolation_base == "hierarchical"
        return var_inter[1]*val[14]+val[11]*var_inter[1]*var_inter[0]*(64*var_inter[0]*(1-var_inter[0])-12)+val[10]*var_inter[0]*var_inter[1]*(var_inter[1]*(160-128*(var_inter[0]+var_inter[1]))-32*(1-var_inter[0]))+val[7]*var_inter[1]*var_inter[0]*(var_inter[0]*(160-128*(var_inter[0]+var_inter[1]))-32*(1-var_inter[1]))+val[6]*var_inter[0]*var_inter[1]*(96+var_inter[1]*(128*var_inter[1]+256*var_inter[0]-224)+var_inter[0]*(128*var_inter[0]-224))+val[1]*var_inter[0]*(16*(1-var_inter[1])+var_inter[0]*(160.0/3.0*var_inter[1]+var_inter[0]*(96-128.0/3.0*(var_inter[0]+var_inter[1]))-208.0/3.0))+(1-var_inter[0]-var_inter[1])*val[0]+val[2]*var_inter[0]*(var_inter[0]*(76+64*(pow(var_inter[0],2)+var_inter[1]*(var_inter[0]-1))-128*var_inter[0])-12*(1-var_inter[1]))+val[3]*var_inter[0]*(var_inter[0]*(var_inter[0]*(224.0/3.0-128.0/3.0*(var_inter[0]+var_inter[1]))+32*var_inter[1]-112.0/3.0)+16.0/3.0*(1-var_inter[1]))+var_inter[0]*val[4]+val[5]*var_inter[1]*(16+var_inter[1]*(var_inter[1]*(96-128.0/3.0*var_inter[1])-208.0/3.0)+var_inter[0]*(var_inter[0]*(32-128.0/3.0*var_inter[0])-16.0/3.0))+val[8]*var_inter[1]*var_inter[0]*(16.0/3.0+var_inter[0]*(128.0/3.0*var_inter[0]-32))+val[9]*var_inter[1]*(var_inter[1]*(76+var_inter[1]*(64*var_inter[1]-128))+var_inter[0]*(12-64*var_inter[0]*(1-var_inter[0]))-12)+val[12]*var_inter[1]*(16.0/3.0+var_inter[0]*(var_inter[0]*(160.0/3.0-128.0/3.0*var_inter[0])-16)+var_inter[1]*(var_inter[1]*(224.0/3.0-128.0/3.0*var_inter[1])-112.0/3.0))+val[13]*var_inter[1]*var_inter[0]*(16+var_inter[0]*(128.0/3.0*var_inter[0]-160.0/3.0))

#
def interpolation_deg( var_inter, val, interpolation_base, deg ) when deg == 5
    if interpolation_base == "lagrange"
        return val[19]*var_inter[0]*var_inter[1]*(var_inter[1]*(1375.0/24.0+var_inter[1]*(3125.0/24.0*var_inter[1]-625.0/4.0))-25.0/4.0)+val[18]*var_inter[1]*(var_inter[1]*(1525.0/24.0+var_inter[1]*(625.0/4.0*var_inter[0]+var_inter[1]*(6875.0/24.0-3125.0/24.0*(var_inter[0]+var_inter[1]))-5125.0/24.0)-1375.0/24.0*var_inter[0])-25.0/4.0*(1-var_inter[0]))+val[16]*var_inter[0]*var_inter[1]*(var_inter[1]*(625.0/2.0*var_inter[0]+var_inter[1]*(2500.0/3.0-3125.0/6.0*(var_inter[0]+var_inter[1]))-2125.0/6.0)+125.0/3.0*(1-var_inter[0]))+var_inter[0]*var_inter[1]*(125.0/6.0*var_inter[1]+var_inter[0]*(125.0/4.0+var_inter[0]*(3125.0/12.0*var_inter[1]-625.0/12.0)-625.0/4.0*var_inter[1])-25.0/6.0)*val[14]+val[12]*var_inter[1]*var_inter[0]*(var_inter[0]*(1125.0/4.0-625.0/4.0*var_inter[0])+var_inter[1]*(3625.0/4.0+var_inter[0]*(3125.0/4.0*var_inter[0]-6875.0/4.0)+var_inter[1]*(3125.0/4.0*var_inter[1]-3125.0/2.0*(1-var_inter[0])))-125)+var_inter[1]*var_inter[0]*(var_inter[0]*(625.0/2.0*var_inter[1]+var_inter[0]*(2500.0/3.0-3125.0/6.0*(var_inter[0]+var_inter[1]))-2125.0/6.0)+125.0/3.0*(1-var_inter[1]))*val[9]+val[0]*(1+var_inter[1]*(var_inter[1]*(375.0/8.0+var_inter[1]*(var_inter[1]*(625.0/8.0-625.0/24.0*var_inter[1])-2125.0/24.0))-137.0/12.0)+var_inter[0]*(var_inter[1]*(375.0/4.0+var_inter[1]*(var_inter[1]*(625.0/2.0-3125.0/24.0*var_inter[1])-2125.0/8.0))+var_inter[0]*(375.0/8.0+var_inter[0]*(var_inter[0]*(625.0/8.0-625.0/24.0*var_inter[0])-2125.0/24.0)+var_inter[1]*(var_inter[0]*(625.0/2.0-3125.0/12.0*var_inter[1]-3125.0/24.0*var_inter[0])+var_inter[1]*(1875.0/4.0-3125.0/12.0*var_inter[1])-2125.0/8.0))-137.0/12.0))+val[1]*var_inter[0]*(25+var_inter[0]*(var_inter[1]*(8875.0/12.0+var_inter[1]*(3125.0/6.0*var_inter[1]-4375.0/4.0))+var_inter[0]*(8875.0/24.0+var_inter[0]*(3125.0/6.0*var_inter[1]+3125.0/24.0*var_inter[0]-4375.0/12.0)+var_inter[1]*(3125.0/4.0*var_inter[1]-4375.0/4.0))-1925.0/12.0)+var_inter[1]*(var_inter[1]*(8875.0/24.0+var_inter[1]*(3125.0/24.0*var_inter[1]-4375.0/12.0))-1925.0/12.0))+val[2]*var_inter[0]*(var_inter[1]*(1175.0/12.0+var_inter[1]*(625.0/12.0*var_inter[1]-125))+var_inter[0]*(2675.0/12.0+var_inter[1]*(var_inter[1]*(3125.0/4.0-3125.0/12.0*var_inter[1])-8875.0/12.0)+var_inter[0]*(var_inter[0]*(8125.0/12.0-3125.0/4.0*var_inter[1]-3125.0/12.0*var_inter[0])+var_inter[1]*(5625.0/4.0-3125.0/4.0*var_inter[1])-7375.0/12.0))-25)+val[3]*var_inter[0]*(50.0/3.0+var_inter[1]*(125.0/6.0*var_inter[1]-75.0/2.0)+var_inter[0]*(var_inter[0]*(6125.0/12.0+var_inter[0]*(3125.0/6.0*var_inter[1]+3125.0/12.0*var_inter[0]-625)+var_inter[1]*(3125.0/12.0*var_inter[1]-3125.0/4.0))+var_inter[1]*(3875.0/12.0-625.0/4.0*var_inter[1])-325.0/2.0))+val[4]*var_inter[0]*(var_inter[0]*(1525.0/24.0+var_inter[0]*(var_inter[0]*(6875.0/24.0-3125.0/24.0*(var_inter[0]+var_inter[1]))+625.0/4.0*var_inter[1]-5125.0/24.0)-1375.0/24.0*var_inter[1])-25.0/4.0*(1-var_inter[1]))+val[5]*var_inter[0]*(1+var_inter[0]*(var_inter[0]*(875.0/24.0+var_inter[0]*(625.0/24.0*var_inter[0]-625.0/12.0))-125.0/12.0))+val[6]*var_inter[1]*(25+var_inter[0]*(var_inter[0]*(8875.0/24.0+var_inter[0]*(3125.0/24.0*var_inter[0]-4375.0/12.0))-1925.0/12.0)+var_inter[1]*(var_inter[1]*(8875.0/24.0+var_inter[1]*(3125.0/24.0*var_inter[1]-4375.0/12.0))+var_inter[0]*(8875.0/12.0+var_inter[1]*(3125.0/6.0*var_inter[1]-4375.0/4.0)+var_inter[0]*(3125.0/4.0*var_inter[1]+3125.0/6.0*var_inter[0]-4375.0/4.0))-1925.0/12.0))+val[7]*var_inter[0]*var_inter[1]*(250+var_inter[0]*(var_inter[0]*(1250-3125.0/6.0*var_inter[0])-5875.0/6.0)+var_inter[1]*(var_inter[1]*(1250-3125.0/6.0*var_inter[1]-3125.0/2.0*var_inter[0])+var_inter[0]*(2500-3125.0/2.0*var_inter[0])-5875.0/6.0))+var_inter[0]*var_inter[1]*(var_inter[0]*(3625.0/4.0+var_inter[1]*(3125.0/4.0*var_inter[1]-6875.0/4.0)+var_inter[0]*(3125.0/4.0*var_inter[0]-3125.0/2.0*(1-var_inter[1])))+var_inter[1]*(1125.0/4.0-625.0/4.0*var_inter[1])-125)*val[8]+val[10]*var_inter[1]*var_inter[0]*(var_inter[0]*(1375.0/24.0+var_inter[0]*(3125.0/24.0*var_inter[0]-625.0/4.0))-25.0/4.0)+val[11]*var_inter[1]*(var_inter[0]*(1175.0/12.0+var_inter[0]*(625.0/12.0*var_inter[0]-125))+var_inter[1]*(2675.0/12.0+var_inter[0]*(5625.0/4.0*var_inter[1]-8875.0/12.0-3125.0/12.0*pow(var_inter[0],2)-3125.0/4.0*(pow(var_inter[1],2)+var_inter[0]*(var_inter[1]-1)))+var_inter[1]*(var_inter[1]*(8125.0/12.0-3125.0/12.0*var_inter[1])-7375.0/12.0))-25)+val[13]*var_inter[0]*var_inter[1]*(125.0/4.0+var_inter[1]*(625.0/4.0*var_inter[1]-375.0/2.0)+var_inter[0]*(625.0/4.0*var_inter[0]+var_inter[1]*(4375.0/4.0-3125.0/4.0*(var_inter[0]+var_inter[1]))-375.0/2.0))+val[15]*var_inter[1]*(50.0/3.0+var_inter[0]*(125.0/6.0*var_inter[0]-75.0/2.0)+var_inter[1]*(var_inter[0]*(3875.0/12.0-625.0/4.0*var_inter[0])+var_inter[1]*(6125.0/12.0+var_inter[1]*(3125.0/12.0*var_inter[1]+3125.0/6.0*var_inter[0]-625)+var_inter[0]*(3125.0/12.0*var_inter[0]-3125.0/4.0))-325.0/2.0))+val[17]*var_inter[0]*var_inter[1]*(125.0/6.0*var_inter[0]+var_inter[1]*(125.0/4.0+var_inter[1]*(3125.0/12.0*var_inter[0]-625.0/12.0)-625.0/4.0*var_inter[0])-25.0/6.0)+val[20]*var_inter[1]*(1+var_inter[1]*(var_inter[1]*(875.0/24.0+var_inter[1]*(625.0/24.0*var_inter[1]-625.0/12.0))-125.0/12.0))
    else if interpolation_base == "hierarchical"
        return val[19]*var_inter[1]*var_inter[0]*(25+var_inter[0]*(var_inter[0]*(1875.0/8.0-3125.0/24.0*var_inter[0])-1625.0/12.0))+val[18]*var_inter[1]*(var_inter[0]*(var_inter[0]*(1625.0/12.0+var_inter[0]*(3125.0/24.0*var_inter[0]-1875.0/8.0))-25)+var_inter[1]*(1525.0/24.0+var_inter[1]*(var_inter[1]*(6875.0/24.0-3125.0/24.0*var_inter[1])-5125.0/24.0))-25.0/4.0)+val[16]*var_inter[0]*var_inter[1]*(var_inter[1]*(625.0/2.0*var_inter[0]+var_inter[1]*(2500.0/3.0-3125.0/6.0*(var_inter[0]+var_inter[1]))-2125.0/6.0)+125.0/3.0*(1-var_inter[0]))+val[12]*var_inter[1]*var_inter[0]*(var_inter[0]*(1125.0/4.0-625.0/4.0*var_inter[0])+var_inter[1]*(3625.0/4.0+var_inter[0]*(3125.0/4.0*var_inter[0]+3125.0/2.0*var_inter[1]-6875.0/4.0)+var_inter[1]*(3125.0/4.0*var_inter[1]-3125.0/2.0))-125)+var_inter[1]*var_inter[0]*(var_inter[0]*(625.0/2.0*var_inter[1]+var_inter[0]*(2500.0/3.0-3125.0/6.0*(var_inter[0]+var_inter[1]))-2125.0/6.0)+125.0/3.0*(1-var_inter[1]))*val[9]+val[4]*var_inter[0]*(var_inter[0]*(1525.0/24.0+var_inter[0]*(var_inter[0]*(6875.0/24.0-3125.0/24.0*(var_inter[0]+var_inter[1]))+625.0/4.0*var_inter[1]-5125.0/24.0)-1375.0/24.0*var_inter[1])-25.0/4.0*(1-var_inter[1]))+val[3]*var_inter[0]*(50.0/3.0*(1-var_inter[1])+var_inter[0]*(875.0/6.0*var_inter[1]+var_inter[0]*(6125.0/12.0+var_inter[0]*(3125.0/12.0*(var_inter[0]+var_inter[1])-625)-4375.0/12.0*var_inter[1])-325.0/2.0))+(1-var_inter[0]-var_inter[1])*val[0]+val[1]*var_inter[0]*(25*(1-var_inter[1])+var_inter[0]*(1625.0/12.0*var_inter[1]+var_inter[0]*(8875.0/24.0+var_inter[0]*(3125.0/24.0*(var_inter[0]+var_inter[1])-4375.0/12.0)-1875.0/8.0*var_inter[1])-1925.0/12.0))+val[2]*var_inter[0]*(var_inter[0]*(2675.0/12.0+var_inter[0]*(1250.0/3.0*var_inter[1]+var_inter[0]*(8125.0/12.0-3125.0/12.0*(var_inter[0]+var_inter[1]))-7375.0/12.0)-2375.0/12.0*var_inter[1])-25*(1-var_inter[1]))+var_inter[0]*val[5]+val[6]*var_inter[1]*(25+var_inter[1]*(var_inter[1]*(8875.0/24.0+var_inter[1]*(3125.0/24.0*var_inter[1]-4375.0/12.0))-1925.0/12.0)+var_inter[0]*(25.0/4.0+var_inter[0]*(var_inter[0]*(625.0/4.0-3125.0/24.0*var_inter[0])-1375.0/24.0)))+val[7]*var_inter[0]*var_inter[1]*(250+var_inter[0]*(var_inter[0]*(1250-3125.0/6.0*var_inter[0]-3125.0/2.0*var_inter[1])+var_inter[1]*(2500-3125.0/2.0*var_inter[1])-5875.0/6.0)+var_inter[1]*(var_inter[1]*(1250-3125.0/6.0*var_inter[1])-5875.0/6.0))+var_inter[0]*var_inter[1]*(var_inter[0]*(3625.0/4.0+var_inter[1]*(3125.0/4.0*var_inter[1]-6875.0/4.0)+var_inter[0]*(3125.0/4.0*var_inter[0]-3125.0/2.0*(1-var_inter[1])))+var_inter[1]*(1125.0/4.0-625.0/4.0*var_inter[1])-125)*val[8]+val[10]*var_inter[1]*var_inter[0]*(var_inter[0]*(1375.0/24.0+var_inter[0]*(3125.0/24.0*var_inter[0]-625.0/4.0))-25.0/4.0)+val[11]*var_inter[1]*(var_inter[1]*(2675.0/12.0+var_inter[1]*(var_inter[1]*(8125.0/12.0-3125.0/12.0*var_inter[1])-7375.0/12.0))+var_inter[0]*(var_inter[0]*(875.0/6.0+var_inter[0]*(3125.0/12.0*var_inter[0]-4375.0/12.0))-50.0/3.0)-25)+val[13]*var_inter[0]*var_inter[1]*(125.0/4.0+var_inter[1]*(625.0/4.0*var_inter[1]-375.0/2.0)+var_inter[0]*(625.0/4.0*var_inter[0]+var_inter[1]*(4375.0/4.0-3125.0/4.0*(var_inter[0]+var_inter[1]))-375.0/2.0))+val[14]*var_inter[1]*var_inter[0]*(50.0/3.0+var_inter[0]*(var_inter[0]*(4375.0/12.0-3125.0/12.0*var_inter[0])-875.0/6.0))+val[15]*var_inter[1]*(50.0/3.0+var_inter[0]*(25+var_inter[0]*(var_inter[0]*(1250.0/3.0-3125.0/12.0*var_inter[0])-2375.0/12.0))+var_inter[1]*(var_inter[1]*(6125.0/12.0+var_inter[1]*(3125.0/12.0*var_inter[1]-625))-325.0/2.0))+val[17]*var_inter[1]*var_inter[0]*(var_inter[0]*(2375.0/12.0+var_inter[0]*(3125.0/12.0*var_inter[0]-1250.0/3.0))-25)+var_inter[1]*val[20]

#
def interpolation_vertex( var_inter, val_vertex )
    return var_inter[1]*val_vertex[2]+val_vertex[0]*(1-var_inter[0]-var_inter[1])+var_inter[0]*val_vertex[1]
#
def nb_children( sub_nvi ) when sub_nvi==0
    return 1
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==0
    return child_var_inter
def type_child( sub_nvi, num_child ) when sub_nvi==0
    return Triangle_6
def node_number_child( sub_nvi, num_child ) when sub_nvi==0
    return 0 .. 6
#
def nb_children( sub_nvi ) when sub_nvi==1
    return 3
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==0
    return [(2*child_var_inter[0]-1)*child_var_inter[0]-2*(child_var_inter[0]-1)*child_var_inter[0],0]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return Bar_3
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return [0,1,3]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==1
    return [1+(2*child_var_inter[0]-3)*child_var_inter[0]-2*(child_var_inter[0]-1)*child_var_inter[0],(2*child_var_inter[0]-1)*child_var_inter[0]-2*(child_var_inter[0]-1)*child_var_inter[0]]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return Bar_3
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return [1,2,4]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==2
    return [0,1+child_var_inter[0]*(2*child_var_inter[0]-3)-2*child_var_inter[0]*(child_var_inter[0]-1)]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==2
    return Bar_3
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==2
    return [2,0,5]
#
def nb_children( sub_nvi ) when sub_nvi==2
    return 6
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==2 and num_child==0
    return [0,0]
def type_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==0
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==0
    return [0]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==2 and num_child==1
    return [1/2,0]
def type_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==1
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==1
    return [3]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==2 and num_child==2
    return [1,0]
def type_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==2
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==2
    return [1]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==2 and num_child==3
    return [1/2,1/2]
def type_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==3
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==3
    return [4]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==2 and num_child==4
    return [0,1]
def type_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==4
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==4
    return [2]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==2 and num_child==5
    return [0,1/2]
def type_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==5
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==5
    return [5]
def normal( var_inter, pos_nodes )
    assert( 0, "normal is defined only for nb_dim == nvi + 1" )
#
def jac_mat( var_inter, pos_nodes )
    res := Mat[ type_promote(var_inter[0],pos_nodes[0][0],mul), Gen[ 2, 2 ] ]()
    R_0 := pos_nodes[2][1]; R_1 := pos_nodes[2][0]; R_2 := pos_nodes[1][1]; R_3 := pos_nodes[0][1];
    R_4 := pos_nodes[3][1]; R_5 := pos_nodes[4][1]; R_6 := pos_nodes[5][1]; R_7 := pos_nodes[5][0];
    R_8 := pos_nodes[4][0]; R_9 := pos_nodes[1][0]; R_10 := pos_nodes[0][0]; R_11 := var_inter[0];
    R_12 := R_11*R_5; R_12 = 4.0*R_12; R_13 := R_11*R_4; R_13 = (-4.0)*R_13;
    R_14 := R_11*R_8; R_14 = 4.0*R_14; R_15 := 4.0*R_11; R_15 = (-1.0)+R_15;
    R_2 = R_2*R_15; R_15 = R_9*R_15; R_9 = 2.0*R_11; R_16 := var_inter[1];
    R_17 := 4.0*R_16; R_17 = (-1.0)+R_17; R_0 = R_0*R_17; R_17 = R_1*R_17;
    R_1 = 2.0*R_16; R_1 = R_11+R_1; R_1 = (-1.0)+R_1; R_18 := R_6*R_1;
    R_18 = (-4.0)*R_18; R_1 = R_7*R_1; R_1 = (-4.0)*R_1; R_5 = R_16*R_5;
    R_5 = 4.0*R_5; R_6 = R_16*R_6; R_6 = (-4.0)*R_6; R_7 = R_16*R_7;
    R_7 = (-4.0)*R_7; R_8 = R_16*R_8; R_8 = 4.0*R_8; R_19 := R_16+R_11;
    R_19 = 4.0*R_19; R_19 = (-3.0)+R_19; R_3 = R_3*R_19; R_0 = R_0+R_3;
    R_0 = R_13+R_0; R_12 = R_0+R_12; R_18 = R_12+R_18; res(1,1) = R_18;
    R_2 = R_3+R_2; R_19 = R_10*R_19; R_17 = R_19+R_17; R_15 = R_19+R_15;
    R_9 = R_16+R_9; R_9 = (-1.0)+R_9; R_4 = R_4*R_9; R_4 = (-4.0)*R_4;
    R_2 = R_4+R_2; R_2 = R_5+R_2; R_2 = R_6+R_2; res(0,1) = R_2;
    R_2 = pos_nodes[3][0]; R_11 = R_11*R_2; R_11 = (-4.0)*R_11; R_11 = R_17+R_11;
    R_11 = R_14+R_11; R_11 = R_1+R_11; res(1,0) = R_11; R_9 = R_2*R_9;
    R_9 = (-4.0)*R_9; R_15 = R_9+R_15; R_8 = R_15+R_8; R_7 = R_8+R_7;
    res(0,0) = R_7; 
    return res
#
def jac( var_inter, pos_nodes )
    R_0 := pos_nodes[2][0]; R_1 := pos_nodes[1][1]; R_2 := pos_nodes[5][1]; R_3 := pos_nodes[4][1];
    R_3 = (-1.0)*R_3; R_4 := R_2+R_3; R_5 := pos_nodes[3][1]; R_3 = R_5+R_3;
    R_6 := pos_nodes[0][1]; R_7 := pos_nodes[2][1]; R_8 := pos_nodes[1][0]; R_9 := pos_nodes[0][0];
    R_10 := var_inter[0]; R_3 = R_10*R_3; R_11 := 4.0*R_10; R_11 = (-1.0)+R_11;
    R_1 = R_1*R_11; R_11 = R_8*R_11; R_8 = 2.0*R_10; R_12 := pos_nodes[3][0];
    R_13 := pos_nodes[4][0]; R_13 = (-1.0)*R_13; R_14 := R_12+R_13; R_14 = R_10*R_14;
    R_15 := pos_nodes[5][0]; R_13 = R_15+R_13; R_16 := var_inter[1]; R_4 = R_16*R_4;
    R_17 := 2.0*R_16; R_17 = R_10+R_17; R_17 = (-1.0)+R_17; R_15 = R_15*R_17;
    R_14 = R_15+R_14; R_14 = (-4.0)*R_14; R_17 = R_2*R_17; R_17 = R_3+R_17;
    R_17 = (-4.0)*R_17; R_3 = 4.0*R_16; R_3 = (-1.0)+R_3; R_0 = R_0*R_3;
    R_3 = R_7*R_3; R_10 = R_16+R_10; R_10 = 4.0*R_10; R_10 = (-3.0)+R_10;
    R_6 = R_6*R_10; R_1 = R_6+R_1; R_6 = R_3+R_6; R_17 = R_6+R_17;
    R_10 = R_9*R_10; R_0 = R_10+R_0; R_14 = R_0+R_14; R_11 = R_10+R_11;
    R_8 = R_16+R_8; R_8 = (-1.0)+R_8; R_5 = R_5*R_8; R_4 = R_5+R_4;
    R_4 = (-4.0)*R_4; R_4 = R_1+R_4; R_14 = R_4*R_14; R_14 = (-1.0)*R_14;
    R_8 = R_12*R_8; R_13 = R_16*R_13; R_8 = R_13+R_8; R_8 = (-4.0)*R_8;
    R_11 = R_8+R_11; R_17 = R_11*R_17; R_14 = R_17+R_14; res := R_14;
    return res
#
def inv_jac_mat( var_inter, pos_nodes )
    res := Mat[ type_promote(var_inter[0],pos_nodes[0][0],mul), Gen[ 2, 2 ] ]()
    R_0 := pos_nodes[2][0]; R_1 := pos_nodes[1][1]; R_2 := pos_nodes[5][1]; R_3 := pos_nodes[4][1];
    R_3 = (-1.0)*R_3; R_4 := R_2+R_3; R_5 := pos_nodes[3][1]; R_3 = R_5+R_3;
    R_6 := pos_nodes[0][1]; R_7 := pos_nodes[2][1]; R_8 := pos_nodes[1][0]; R_9 := pos_nodes[0][0];
    R_10 := var_inter[0]; R_3 = R_10*R_3; R_11 := 4.0*R_10; R_11 = (-1.0)+R_11;
    R_1 = R_1*R_11; R_11 = R_8*R_11; R_8 = 2.0*R_10; R_12 := pos_nodes[3][0];
    R_13 := pos_nodes[4][0]; R_13 = (-1.0)*R_13; R_14 := R_12+R_13; R_14 = R_10*R_14;
    R_15 := pos_nodes[5][0]; R_13 = R_15+R_13; R_16 := var_inter[1]; R_4 = R_16*R_4;
    R_17 := 2.0*R_16; R_17 = R_10+R_17; R_17 = (-1.0)+R_17; R_15 = R_15*R_17;
    R_14 = R_15+R_14; R_14 = (-4.0)*R_14; R_17 = R_2*R_17; R_17 = R_3+R_17;
    R_17 = (-4.0)*R_17; R_3 = 4.0*R_16; R_3 = (-1.0)+R_3; R_0 = R_0*R_3;
    R_3 = R_7*R_3; R_10 = R_16+R_10; R_10 = 4.0*R_10; R_10 = (-3.0)+R_10;
    R_6 = R_6*R_10; R_1 = R_6+R_1; R_6 = R_3+R_6; R_17 = R_6+R_17;
    R_10 = R_9*R_10; R_0 = R_10+R_0; R_14 = R_0+R_14; R_11 = R_10+R_11;
    R_8 = R_16+R_8; R_8 = (-1.0)+R_8; R_5 = R_5*R_8; R_4 = R_5+R_4;
    R_4 = (-4.0)*R_4; R_4 = R_1+R_4; R_1 = R_4*R_14; R_1 = (-1.0)*R_1;
    R_8 = R_12*R_8; R_13 = R_16*R_13; R_8 = R_13+R_8; R_8 = (-4.0)*R_8;
    R_11 = R_8+R_11; R_8 = R_11*R_17; R_1 = R_8+R_1; R_1 = 1/R_1;
    R_11 = R_11*R_1; res(1,1) = R_11; R_14 = R_1*R_14; R_14 = (-1.0)*R_14;
    res(1,0) = R_14; R_4 = R_1*R_4; R_4 = (-1.0)*R_4; res(0,1) = R_4;
    R_17 = R_1*R_17; res(0,0) = R_17; 
    return res
#
def measure( var_inter, pos_nodes )
    R_0 := pos_nodes[2][0]; R_1 := pos_nodes[0][0]; R_2 := (-1.0)*R_1; R_3 := R_0+R_2;
    R_3 = (-2.0)*R_3; R_0 = R_1+R_0; R_0 = 4.0*R_0; R_4 := pos_nodes[5][1];
    R_5 := (-8.0)*R_4; R_6 := pos_nodes[1][1]; R_7 := 4.0*R_6; R_8 := pos_nodes[2][1];
    R_9 := (-1.0)*R_8; R_10 := pos_nodes[0][1]; R_8 = R_10+R_8; R_8 = 4.0*R_8;
    R_8 = R_5+R_8; R_5 = R_10+R_4; R_9 = R_10+R_9; R_9 = 2.0*R_9;
    R_11 := pos_nodes[4][1]; R_11 = (-1.0)*R_11; R_12 := R_4+R_11; R_5 = R_5+R_11;
    R_5 = 2.0*R_5; R_13 := pos_nodes[3][1]; R_12 = R_13+R_12; R_12 = (-1.0)*R_12;
    R_12 = R_10+R_12; R_4 = R_13+R_4; R_4 = R_4+R_11; R_4 = (-1.0)*R_4;
    R_4 = R_6+R_4; R_6 = (-6.0)*R_13; R_7 = R_6+R_7; R_5 = R_7+R_5;
    R_11 = R_13+R_11; R_13 = (-4.0)*R_11; R_9 = R_13+R_9; R_13 = pos_nodes[5][0];
    R_1 = R_1+R_13; R_7 = (-8.0)*R_13; R_7 = R_0+R_7; R_12 = R_7*R_12;
    R_12 = (-1.0/12.0)*R_12; R_7 = pos_nodes[3][0]; R_0 = (-6.0)*R_7; R_13 = R_7+R_13;
    R_6 = pos_nodes[4][0]; R_6 = (-1.0)*R_6; R_1 = R_6+R_1; R_1 = 2.0*R_1;
    R_7 = R_7+R_6; R_10 = (-4.0)*R_7; R_3 = R_10+R_3; R_10 = R_4*R_3;
    R_10 = (1.0/12.0)*R_10; R_3 = R_3*R_5; R_3 = (-1.0/24.0)*R_3; R_4 = R_4*R_7;
    R_7 = R_5*R_7; R_7 = (-1.0/6.0)*R_7; R_13 = R_6+R_13; R_2 = R_2+R_13;
    R_2 = R_8*R_2; R_2 = (-1.0/12.0)*R_2; R_2 = R_12+R_2; R_2 = R_4+R_2;
    R_13 = (-1.0)*R_13; R_4 = pos_nodes[1][0]; R_12 = 4.0*R_4; R_0 = R_12+R_0;
    R_1 = R_0+R_1; R_0 = R_1*R_11; R_0 = (1.0/6.0)*R_0; R_1 = R_9*R_1;
    R_1 = (1.0/24.0)*R_1; R_13 = R_4+R_13; R_11 = R_13*R_11; R_11 = (-1.0)*R_11;
    R_2 = R_11+R_2; R_3 = R_2+R_3; R_1 = R_3+R_1; R_10 = R_1+R_10;
    R_10 = R_7+R_10; R_9 = R_13*R_9; R_9 = (-1.0/12.0)*R_9; R_10 = R_9+R_10;
    R_0 = R_10+R_0; res := R_0; 
    return res
#
def barycenter( var_inter, pos_nodes )
    res := Vec[ type_promote(var_inter[0],pos_nodes[0][0],mul), 2 ]()
    R_0 := pos_nodes[2][0]; R_1 := (-1.0)*R_0; R_2 := pos_nodes[1][1]; R_3 := (-1.0/270.0)*R_2;
    R_4 := 2.0*R_2; R_5 := (1.0/9.0)*R_2; R_6 := (-4.0)*R_2; R_7 := 4.0*R_2;
    R_8 := pos_nodes[1][0]; R_9 := (-1.0/216.0)*R_8; R_10 := (1.0/9.0)*R_8; R_11 := (-1.0)*R_8;
    R_12 := 4.0*R_8; R_13 := pos_nodes[5][1]; R_14 := (1.0/36.0)*R_13; R_15 := (13.0/1440.0)*R_13;
    R_16 := (-4.0)*R_13; R_17 := 0.5*R_13; R_18 := (-7.0/36.0)*R_13; R_19 := 4.0*R_13;
    R_20 := (-1.0)*R_13; R_20 = R_2+R_20; R_21 := 8.0*R_13; R_22 := (-8.0)*R_13;
    R_23 := pos_nodes[2][1]; R_24 := -0.5*R_23; R_25 := (-1.0)*R_23; R_26 := pos_nodes[0][1];
    R_27 := 0.5*R_26; R_27 = R_4+R_27; R_4 = R_26+R_2; R_4 = R_23+R_4;
    R_4 = (-1.0/9.0)*R_4; R_28 := (-1.0)*R_26; R_29 := R_23+R_28; R_29 = (-1.0/48.0)*R_29;
    R_30 := R_26+R_13; R_23 = R_26+R_23; R_31 := (1.0/72.0)*R_23; R_32 := (23.0/2880.0)*R_23;
    R_33 := (-11.0/540.0)*R_23; R_34 := 2.0*R_23; R_16 = R_34+R_16; R_34 = (-1.0/72.0)*R_23;
    R_5 = R_34+R_5; R_18 = R_5+R_18; R_5 = (-2.0)*R_23; R_5 = R_19+R_5;
    R_19 = (-4.0)*R_23; R_21 = R_19+R_21; R_23 = 4.0*R_23; R_23 = R_22+R_23;
    R_25 = R_26+R_25; R_22 = (1.0/320.0)*R_25; R_25 = 2.0*R_25; R_19 = pos_nodes[4][1];
    R_34 = (-1.0)*R_19; R_35 := R_2+R_34; R_36 := R_13+R_34; R_30 = R_30+R_34;
    R_37 := (-2.0)*R_30; R_30 = 2.0*R_30; R_38 := pos_nodes[3][1]; R_39 := (-1.0)*R_38;
    R_35 = R_39+R_35; R_35 = (1.0/18.0)*R_35; R_35 = R_14+R_35; R_31 = R_35+R_31;
    R_35 = R_34+R_39; R_35 = R_17+R_35; R_35 = (-2.0)*R_35; R_24 = R_35+R_24;
    R_24 = (-1.0)*R_24; R_27 = R_24+R_27; R_39 = R_19+R_39; R_24 = 4.0*R_39;
    R_24 = R_25+R_24; R_35 = (-1.0/12.0)*R_39; R_29 = R_35+R_29; R_19 = R_38+R_19;
    R_35 = (-1.0/80.0)*R_19; R_15 = R_35+R_15; R_32 = R_15+R_32; R_15 = (1.0/18.0)*R_19;
    R_15 = R_18+R_15; R_19 = R_13+R_19; R_18 = (2.0/135.0)*R_19; R_18 = R_3+R_18;
    R_33 = R_18+R_33; R_19 = (4.0/9.0)*R_19; R_4 = R_19+R_4; R_19 = 6.0*R_38;
    R_6 = R_19+R_6; R_6 = R_37+R_6; R_13 = R_38+R_13; R_13 = R_13+R_34;
    R_28 = R_13+R_28; R_13 = (-1.0)*R_13; R_13 = R_2+R_13; R_36 = R_38+R_36;
    R_36 = (-1.0)*R_36; R_36 = R_26+R_36; R_26 = (-6.0)*R_38; R_7 = R_26+R_7;
    R_30 = R_7+R_30; R_34 = R_38+R_34; R_38 = (-1.0/240.0)*R_34; R_38 = R_22+R_38;
    R_22 = (-4.0)*R_34; R_25 = R_22+R_25; R_22 = pos_nodes[5][0]; R_7 = 8.0*R_22;
    R_26 = (31.0/2160.0)*R_22; R_26 = R_9+R_26; R_9 = (-7.0/36.0)*R_22; R_9 = R_10+R_9;
    R_10 = -0.5*R_22; R_2 = (-4.0)*R_22; R_37 = (-1.0)*R_22; R_37 = R_8+R_37;
    R_19 = (-8.0)*R_22; R_18 = pos_nodes[0][0]; R_1 = R_18+R_1; R_1 = (-2.0)*R_1;
    R_3 = R_18+R_8; R_3 = R_0+R_3; R_3 = (-1.0/9.0)*R_3; R_35 = R_18+R_0;
    R_17 = (-4.0)*R_35; R_17 = R_7+R_17; R_17 = R_17*R_28; R_7 = (-11.0/4320.0)*R_35;
    R_14 = (-1.0/72.0)*R_35; R_40 := R_9+R_14; R_41 := 0.5*R_35; R_42 := 2.0*R_35;
    R_2 = R_42+R_2; R_35 = 4.0*R_35; R_19 = R_35+R_19; R_35 = R_19*R_28;
    R_42 = R_19*R_36; R_43 := R_13*R_19; R_19 = R_30*R_19; R_44 := R_18+R_22;
    R_18 = (-1.0)*R_18; R_0 = R_0+R_18; R_45 := 2.0*R_0; R_0 = (-2.0)*R_0;
    R_46 := pos_nodes[4][0]; R_47 := (-1.0)*R_46; R_44 = R_47+R_44; R_44 = 2.0*R_44;
    R_48 := pos_nodes[3][0]; R_49 := (-1.0)*R_48; R_49 = R_46+R_49; R_49 = (-4.0)*R_49;
    R_49 = R_45+R_49; R_49 = R_30*R_49; R_46 = R_48+R_46; R_50 := R_22+R_46;
    R_50 = (4.0/9.0)*R_50; R_50 = R_3+R_50; R_3 = (-1.0/432.0)*R_46; R_3 = R_26+R_3;
    R_7 = R_3+R_7; R_3 = (1.0/18.0)*R_46; R_9 = R_9+R_3; R_14 = R_9+R_14;
    R_40 = R_3+R_40; R_10 = R_46+R_10; R_11 = R_10+R_11; R_11 = (-2.0)*R_11;
    R_41 = R_11+R_41; R_11 = (-6.0)*R_48; R_11 = R_12+R_11; R_44 = R_11+R_44;
    R_11 = R_25*R_44; R_49 = R_11+R_49; R_49 = (-1.0/24.0)*R_49; R_12 = R_44*R_34;
    R_10 = (-2.0)*R_12; R_44 = R_23*R_44; R_22 = R_48+R_22; R_22 = R_47+R_22;
    R_46 = (-1.0)*R_22; R_46 = R_8+R_46; R_8 = R_46*R_34; R_3 = R_46*R_25;
    R_9 = (-1.0)*R_3; R_26 = R_3+R_10; R_46 = R_23*R_46; R_22 = R_18+R_22;
    R_21 = R_22*R_21; R_23 = R_23*R_22; R_17 = R_23+R_17; R_33 = R_17*R_33;
    R_42 = R_23+R_42; R_7 = R_42*R_7; R_14 = R_42*R_14; R_3 = R_42+R_3;
    R_10 = R_10+R_3; R_23 = R_2*R_42; R_23 = -0.125*R_23; R_17 = R_42*R_41;
    R_17 = (-4.0)*R_17; R_42 = R_42*R_37; R_42 = (-4.0)*R_42; R_34 = R_22*R_34;
    R_34 = 8.0*R_34; R_46 = R_34+R_46; R_25 = R_22*R_25; R_25 = (-4.0)*R_25;
    R_44 = R_25+R_44; R_47 = R_48+R_47; R_48 = R_47*R_28; R_48 = 8.0*R_48;
    R_48 = R_43+R_48; R_48 = (-1.0)*R_48; R_48 = R_46+R_48; R_24 = R_48*R_24;
    R_39 = R_48*R_39; R_48 = 4.0*R_47; R_1 = R_48+R_1; R_1 = R_30*R_1;
    R_1 = R_11+R_1; R_1 = (-1.0/24.0)*R_1; R_45 = R_48+R_45; R_45 = R_30*R_45;
    R_45 = R_11+R_45; R_45 = (-1.0/24.0)*R_45; R_6 = R_47*R_6; R_6 = R_12+R_6;
    R_6 = (-1.0/6.0)*R_6; R_12 = R_13*R_47; R_12 = (-1.0)*R_12; R_12 = R_8+R_12;
    R_31 = R_12*R_31; R_8 = R_12*R_27; R_8 = (-1.0)*R_8; R_5 = R_12*R_5;
    R_5 = R_39+R_5; R_39 = R_12+R_6; R_48 = R_12*R_40; R_48 = (-1.0)*R_48;
    R_48 = R_7+R_48; R_7 = R_2*R_12; R_25 = R_41*R_12; R_25 = (-2.0)*R_25;
    R_22 = -0.25*R_12; R_34 = R_37*R_12; R_34 = (-2.0)*R_34; R_18 = R_30*R_47;
    R_18 = (-2.0)*R_18; R_51 := R_36*R_47; R_51 = (-8.0)*R_51; R_51 = R_43+R_51;
    R_51 = (-1.0)*R_51; R_51 = R_46+R_51; R_46 = R_47*R_51; R_7 = R_46+R_7;
    R_7 = (-1.0/48.0)*R_7; R_48 = R_7+R_48; R_7 = (-1.0/16.0)*R_51; R_46 = -0.25*R_51;
    R_43 = (-4.0)*R_47; R_0 = R_43+R_0; R_28 = R_0*R_28; R_28 = (-4.0)*R_28;
    R_28 = R_19+R_28; R_28 = (-1.0)*R_28; R_28 = R_44+R_28; R_29 = R_29*R_28;
    R_28 = R_38*R_28; R_30 = R_0*R_30; R_30 = (-1.0)*R_30; R_11 = R_30+R_11;
    R_32 = R_32*R_11; R_31 = R_32+R_31; R_31 = R_33+R_31; R_33 = R_11*R_15;
    R_33 = R_5+R_33; R_5 = R_11*R_40; R_32 = (1.0/96.0)*R_11; R_22 = R_32+R_22;
    R_32 = R_11*R_37; R_30 = R_11*R_41; R_30 = 0.5*R_30; R_11 = R_2*R_11;
    R_13 = R_13*R_0; R_35 = R_13+R_35; R_9 = R_35+R_9; R_21 = R_9+R_21;
    R_21 = (-1.0/12.0)*R_21; R_21 = R_39+R_21; R_49 = R_21+R_49; R_49 = 1/R_49;
    R_21 = R_45+R_21; R_4 = R_21*R_4; R_21 = (-1.0)*R_13; R_21 = R_3+R_21;
    R_21 = (1.0/12.0)*R_21; R_21 = R_12+R_21; R_21 = R_6+R_21; R_1 = R_21+R_1;
    R_1 = 1/R_1; R_45 = R_21+R_45; R_50 = R_45*R_50; R_13 = R_18+R_13;
    R_13 = (-1.0)*R_13; R_10 = R_10+R_13; R_10 = (-1.0/16.0)*R_10; R_10 = R_22+R_10;
    R_10 = R_2*R_10; R_13 = R_26+R_13; R_27 = R_13*R_27; R_27 = (-1.0/80.0)*R_27;
    R_31 = R_27+R_31; R_16 = R_16*R_13; R_16 = R_24+R_16; R_16 = (-1.0/160.0)*R_16;
    R_31 = R_16+R_31; R_15 = R_13*R_15; R_15 = (-1.0)*R_15; R_15 = R_8+R_15;
    R_15 = R_29+R_15; R_15 = (1.0/12.0)*R_15; R_31 = R_15+R_31; R_20 = R_13*R_20;
    R_33 = R_20+R_33; R_33 = (1.0/24.0)*R_33; R_31 = R_33+R_31; R_31 = R_28+R_31;
    R_31 = (-1.0)*R_31; R_31 = R_4+R_31; R_49 = R_31*R_49; res[1] = R_49;
    R_37 = R_37*R_13; R_25 = R_37+R_25; R_5 = R_25+R_5; R_5 = 0.5*R_5;
    R_40 = R_13*R_40; R_40 = R_34+R_40; R_40 = (-1.0)*R_40; R_41 = R_41*R_13;
    R_32 = R_41+R_32; R_32 = (-1.0)*R_32; R_32 = R_30+R_32; R_13 = R_2*R_13;
    R_51 = R_0*R_51; R_36 = R_0*R_36; R_36 = 4.0*R_36; R_36 = R_19+R_36;
    R_36 = (-1.0)*R_36; R_36 = R_44+R_36; R_44 = (1.0/96.0)*R_36; R_7 = R_44+R_7;
    R_7 = R_7*R_0; R_14 = R_7+R_14; R_14 = R_10+R_14; R_5 = R_14+R_5;
    R_5 = R_40+R_5; R_40 = 0.125*R_36; R_46 = R_40+R_46; R_46 = R_47*R_46;
    R_5 = R_46+R_5; R_5 = (1.0/12.0)*R_5; R_48 = R_5+R_48; R_0 = R_0*R_36;
    R_17 = R_0+R_17; R_11 = R_17+R_11; R_11 = 1.5*R_11; R_36 = R_47*R_36;
    R_36 = (-2.0)*R_36; R_51 = R_36+R_51; R_42 = R_51+R_42; R_13 = R_42+R_13;
    R_13 = (-1.0)*R_13; R_11 = R_13+R_11; R_11 = (1.0/12.0)*R_11; R_32 = R_11+R_32;
    R_23 = R_32+R_23; R_23 = (1.0/80.0)*R_23; R_48 = R_23+R_48; R_48 = (-1.0)*R_48;
    R_50 = R_48+R_50; R_1 = R_50*R_1; res[0] = R_1; 
    return res
#
def inertia_operator_for_barycenter( var_inter, pos_nodes )
    R_0 := pos_nodes[1][1]; R_1 := (-1.0/270.0)*R_0; R_2 := 2.0*R_0; R_3 := (1.0/9.0)*R_0;
    R_4 := (-4.0)*R_0; R_5 := 4.0*R_0; R_6 := pos_nodes[1][0]; R_7 := (-1.0/216.0)*R_6;
    R_8 := (1.0/9.0)*R_6; R_9 := (-1.0)*R_6; R_10 := 4.0*R_6; R_11 := 2.0*R_6;
    R_12 := pos_nodes[4][1]; R_13 := (-1.0)*R_12; R_14 := R_0+R_13; R_15 := pos_nodes[3][1];
    R_16 := R_15+R_12; R_17 := 0.5*R_16; R_18 := (-1.0/80.0)*R_16; R_19 := (1.0/18.0)*R_16;
    R_20 := 6.0*R_15; R_4 = R_20+R_4; R_20 = R_15+R_13; R_21 := 4.0*R_20;
    R_22 := 3.0*R_20; R_23 := (-1.0/240.0)*R_20; R_24 := (-4.0)*R_20; R_25 := (-6.0)*R_15;
    R_5 = R_25+R_5; R_25 = (-1.0)*R_15; R_14 = R_25+R_14; R_14 = (1.0/18.0)*R_14;
    R_26 := R_13+R_25; R_27 := R_12+R_25; R_28 := pow(R_27,2); R_29 := (-1.0/12.0)*R_27;
    R_30 := 4.0*R_27; R_31 := pos_nodes[2][0]; R_32 := (-1.0)*R_31; R_33 := -0.25*R_31;
    R_34 := -0.5*R_31; R_35 := pos_nodes[5][0]; R_36 := 4.0*R_35; R_37 := 8.0*R_35;
    R_38 := (31.0/2160.0)*R_35; R_38 = R_7+R_38; R_7 = (-7.0/36.0)*R_35; R_7 = R_8+R_7;
    R_8 = -0.5*R_35; R_39 := 0.5*R_35; R_40 := (-4.0)*R_35; R_41 := (-1.0)*R_35;
    R_42 := R_6+R_41; R_43 := pow(R_42,2); R_44 := (-8.0)*R_35; R_45 := pos_nodes[3][0];
    R_46 := (-1.0)*R_45; R_47 := (-6.0)*R_45; R_47 = R_10+R_47; R_10 = R_45+R_35;
    R_48 := pos_nodes[4][0]; R_46 = R_48+R_46; R_49 := (-3.0)*R_46; R_50 := R_42*R_46;
    R_51 := pow(R_46,2); R_52 := R_51+R_28; R_53 := (1.0/12.0)*R_52; R_54 := (1.0/24.0)*R_52;
    R_55 := -0.25*R_52; R_52 = 4.0*R_52; R_56 := (-4.0)*R_46; R_57 := 4.0*R_46;
    R_58 := R_45+R_48; R_59 := R_35+R_58; R_59 = (4.0/9.0)*R_59; R_60 := (-1.0/432.0)*R_58;
    R_60 = R_38+R_60; R_38 = (1.0/18.0)*R_58; R_61 := R_7+R_38; R_8 = R_58+R_8;
    R_9 = R_8+R_9; R_9 = (-2.0)*R_9; R_33 = R_58+R_33; R_33 = R_39+R_33;
    R_33 = 0.5*R_33; R_58 = 2.0*R_58; R_34 = R_58+R_34; R_34 = R_41+R_34;
    R_34 = (-1.0)*R_34; R_48 = (-1.0)*R_48; R_45 = R_45+R_48; R_41 = 4.0*R_45;
    R_58 = (-4.0)*R_45; R_10 = R_48+R_10; R_39 = (-1.0)*R_10; R_39 = R_6+R_39;
    R_8 = R_39*R_20; R_62 := (-1.0)*R_8; R_63 := pos_nodes[0][0]; R_64 := -0.125*R_63;
    R_32 = R_63+R_32; R_32 = (-2.0)*R_32; R_49 = R_32+R_49; R_49 = R_46*R_49;
    R_32 = R_41+R_32; R_6 = R_63+R_6; R_6 = R_31+R_6; R_6 = (-1.0/9.0)*R_6;
    R_59 = R_6+R_59; R_35 = R_63+R_35; R_35 = R_48+R_35; R_35 = 2.0*R_35;
    R_35 = R_47+R_35; R_47 = R_35*R_20; R_48 = (-2.0)*R_47; R_6 = 0.5*R_63;
    R_6 = R_11+R_6; R_6 = R_34+R_6; R_34 = R_42*R_6; R_11 = R_46*R_6;
    R_65 := pow(R_6,2); R_66 := R_63+R_31; R_67 := (-2.0)*R_66; R_67 = R_36+R_67;
    R_67 = R_42*R_67; R_36 = (-4.0)*R_66; R_36 = R_37+R_36; R_37 = (-11.0/4320.0)*R_66;
    R_37 = R_60+R_37; R_60 = (-1.0/72.0)*R_66; R_61 = R_61+R_60; R_60 = R_7+R_60;
    R_60 = R_38+R_60; R_38 = 0.5*R_66; R_38 = R_9+R_38; R_9 = 2.0*R_66;
    R_40 = R_9+R_40; R_9 = R_40*R_46; R_7 = pow(R_40,2); R_68 := R_40*R_42;
    R_69 := R_40*R_6; R_66 = 4.0*R_66; R_44 = R_66+R_44; R_63 = (-1.0)*R_63;
    R_31 = R_31+R_63; R_66 = 2.0*R_31; R_56 = R_66+R_56; R_66 = R_41+R_66;
    R_31 = (-2.0)*R_31; R_57 = R_31+R_57; R_41 = R_40*R_57; R_70 := R_42*R_57;
    R_71 := R_46*R_57; R_72 := (-1.0)*R_71; R_73 := R_57*R_6; R_74 := pow(R_57,2);
    R_31 = R_58+R_31; R_10 = R_63+R_10; R_20 = R_10*R_20; R_20 = 8.0*R_20;
    R_63 = pos_nodes[2][1]; R_58 = -0.5*R_63; R_75 := (-1.0)*R_63; R_76 := pos_nodes[0][1];
    R_77 := 0.5*R_76; R_77 = R_2+R_77; R_2 = R_76+R_0; R_2 = R_63+R_2;
    R_2 = (-1.0/9.0)*R_2; R_78 := (-1.0)*R_76; R_79 := R_63+R_78; R_79 = (-1.0/48.0)*R_79;
    R_79 = R_29+R_79; R_75 = R_76+R_75; R_29 = (-2.0)*R_75; R_21 = R_29+R_21;
    R_21 = R_27*R_21; R_22 = R_29+R_22; R_22 = R_27*R_22; R_49 = R_22+R_49;
    R_49 = 4.0*R_49; R_22 = (1.0/320.0)*R_75; R_23 = R_22+R_23; R_75 = 2.0*R_75;
    R_30 = R_75+R_30; R_22 = R_30*R_27; R_22 = R_71+R_22; R_71 = (1.0/16.0)*R_22;
    R_29 = (1.0/24.0)*R_22; R_22 = 4.0*R_22; R_80 := pow(R_30,2); R_80 = R_74+R_80;
    R_75 = R_24+R_75; R_24 = R_39*R_75; R_74 = (-1.0)*R_24; R_81 := R_24+R_48;
    R_82 := R_10*R_75; R_82 = (-4.0)*R_82; R_75 = R_75*R_35; R_63 = R_76+R_63;
    R_83 := -0.125*R_63; R_84 := (1.0/72.0)*R_63; R_85 := (23.0/2880.0)*R_63; R_86 := (-11.0/540.0)*R_63;
    R_87 := (-1.0/72.0)*R_63; R_3 = R_87+R_3; R_87 = (-2.0)*R_63; R_88 := (-4.0)*R_63;
    R_89 := 2.0*R_63; R_90 := 0.5*R_63; R_63 = 4.0*R_63; R_91 := pos_nodes[5][1];
    R_92 := 0.25*R_91; R_93 := (1.0/36.0)*R_91; R_14 = R_93+R_14; R_84 = R_14+R_84;
    R_14 = (13.0/1440.0)*R_91; R_14 = R_18+R_14; R_85 = R_14+R_85; R_14 = (-7.0/36.0)*R_91;
    R_14 = R_3+R_14; R_19 = R_14+R_19; R_14 = 4.0*R_91; R_87 = R_14+R_87;
    R_16 = R_91+R_16; R_14 = (2.0/135.0)*R_16; R_14 = R_1+R_14; R_86 = R_14+R_86;
    R_16 = (4.0/9.0)*R_16; R_2 = R_16+R_2; R_16 = 8.0*R_91; R_16 = R_88+R_16;
    R_16 = R_10*R_16; R_88 = (-1.0)*R_91; R_88 = R_0+R_88; R_14 = R_88*R_87;
    R_1 = R_30*R_88; R_1 = R_70+R_1; R_70 = R_27*R_88; R_70 = R_50+R_70;
    R_70 = 2.0*R_70; R_50 = pow(R_88,2); R_50 = R_43+R_50; R_43 = R_15+R_91;
    R_43 = R_43+R_13; R_78 = R_43+R_78; R_36 = R_36*R_78; R_3 = R_45*R_78;
    R_3 = 8.0*R_3; R_18 = R_31*R_78; R_18 = (-4.0)*R_18; R_78 = R_44*R_78;
    R_43 = (-1.0)*R_43; R_43 = R_0+R_43; R_93 = R_43*R_45; R_62 = R_93+R_62;
    R_94 := (1.0/16.0)*R_62; R_93 = (-1.0)*R_93; R_93 = R_8+R_93; R_84 = R_93*R_84;
    R_87 = R_93*R_87; R_8 = R_93*R_60; R_8 = (-1.0)*R_8; R_95 := R_40*R_93;
    R_96 := R_38*R_93; R_96 = (-2.0)*R_96; R_97 := -0.25*R_93; R_98 := R_42*R_93;
    R_98 = (-2.0)*R_98; R_99 := R_43*R_44; R_3 = R_99+R_3; R_3 = (-1.0)*R_3;
    R_43 = R_43*R_31; R_78 = R_43+R_78; R_74 = R_78+R_74; R_16 = R_74+R_16;
    R_16 = (-1.0/12.0)*R_16; R_74 = (-1.0)*R_43; R_78 = (-4.0)*R_91; R_78 = R_89+R_78;
    R_89 = R_30*R_78; R_41 = R_89+R_41; R_89 = (-1.0/128.0)*R_41; R_100 := (1.0/1280.0)*R_41;
    R_101 := R_78*R_27; R_9 = R_101+R_9; R_101 = (1.0/16.0)*R_9; R_102 := (-1.0/64.0)*R_9;
    R_103 := pow(R_78,2); R_103 = R_7+R_103; R_7 = (1.0/1280.0)*R_103; R_104 := (1.0/2560.0)*R_103;
    R_104 = R_54+R_104; R_54 = (1.0/32.0)*R_103; R_51 = R_54+R_51; R_51 = R_28+R_51;
    R_28 = (-1.0/256.0)*R_103; R_29 = R_28+R_29; R_29 = R_29+R_55; R_28 = R_78*R_88;
    R_68 = R_28+R_68; R_28 = -0.25*R_68; R_54 = (1.0/32.0)*R_68; R_54 = R_71+R_54;
    R_71 = (1.0/48.0)*R_68; R_68 = 2.0*R_68; R_22 = R_68+R_22; R_68 = R_62*R_22;
    R_105 := R_76+R_91; R_105 = R_105+R_13; R_106 := (-2.0)*R_105; R_4 = R_106+R_4;
    R_4 = R_45*R_4; R_4 = R_47+R_4; R_4 = (-1.0/6.0)*R_4; R_47 = R_93+R_4;
    R_16 = R_47+R_16; R_105 = 2.0*R_105; R_105 = R_5+R_105; R_56 = R_105*R_56;
    R_56 = R_75+R_56; R_56 = (-1.0/24.0)*R_56; R_56 = R_16+R_56; R_56 = 1/R_56;
    R_32 = R_105*R_32; R_32 = R_75+R_32; R_32 = (-1.0/24.0)*R_32; R_66 = R_105*R_66;
    R_66 = R_75+R_66; R_66 = (-1.0/24.0)*R_66; R_16 = R_66+R_16; R_2 = R_16*R_2;
    R_16 = R_105*R_45; R_16 = (-2.0)*R_16; R_43 = R_16+R_43; R_43 = (-1.0)*R_43;
    R_81 = R_81+R_43; R_16 = (-1.0/32.0)*R_81; R_5 = R_78*R_81; R_47 = R_81*R_19;
    R_47 = (-1.0)*R_47; R_106 = R_81*R_88; R_107 := R_42*R_81; R_96 = R_107+R_96;
    R_107 = R_81*R_60; R_107 = R_98+R_107; R_107 = (-1.0)*R_107; R_98 = R_38*R_81;
    R_108 := R_40*R_81; R_109 := R_81*R_22; R_110 := R_105*R_44; R_18 = R_110+R_18;
    R_18 = (-1.0)*R_18; R_105 = R_31*R_105; R_105 = (-1.0)*R_105; R_75 = R_105+R_75;
    R_105 = (1.0/64.0)*R_75; R_94 = R_105+R_94; R_94 = R_16+R_94; R_103 = R_94*R_103;
    R_22 = R_75*R_22; R_85 = R_85*R_75; R_84 = R_85+R_84; R_19 = R_75*R_19;
    R_60 = R_75*R_60; R_60 = R_96+R_60; R_60 = 0.5*R_60; R_96 = (1.0/96.0)*R_75;
    R_97 = R_96+R_97; R_96 = R_75*R_42; R_96 = R_98+R_96; R_96 = (-1.0)*R_96;
    R_98 = R_75*R_38; R_98 = 0.5*R_98; R_96 = R_98+R_96; R_98 = R_40*R_75;
    R_85 = 0.5*R_91; R_26 = R_85+R_26; R_26 = (-2.0)*R_26; R_58 = R_26+R_58;
    R_58 = (-1.0)*R_58; R_77 = R_58+R_77; R_58 = R_81*R_77; R_58 = (-1.0/80.0)*R_58;
    R_77 = R_93*R_77; R_77 = (-1.0)*R_77; R_47 = R_77+R_47; R_85 = R_25+R_85;
    R_85 = (-1.0)*R_85; R_85 = R_12+R_85; R_85 = (-1.0)*R_85; R_85 = R_0+R_85;
    R_85 = 2.0*R_85; R_90 = R_85+R_90; R_85 = R_88*R_90; R_85 = R_34+R_85;
    R_34 = R_81*R_85; R_0 = R_62*R_85; R_0 = 4.0*R_0; R_12 = R_27*R_90;
    R_12 = R_11+R_12; R_12 = 2.0*R_12; R_12 = R_1+R_12; R_1 = (1.0/48.0)*R_12;
    R_11 = R_30*R_90; R_11 = R_73+R_11; R_73 = R_78*R_90; R_69 = R_73+R_69;
    R_69 = 2.0*R_69; R_69 = R_80+R_69; R_80 = (1.0/48.0)*R_69; R_73 = (-1.0/640.0)*R_69;
    R_25 = R_81*R_69; R_25 = R_22+R_25; R_22 = R_62*R_69; R_77 = R_75*R_69;
    R_26 = pow(R_90,2); R_26 = R_65+R_26; R_65 = R_62*R_26; R_34 = R_65+R_34;
    R_34 = 2.0*R_34; R_13 = R_91+R_13; R_13 = R_15+R_13; R_13 = (-1.0)*R_13;
    R_13 = R_76+R_13; R_76 = R_13*R_45; R_76 = (-8.0)*R_76; R_76 = R_99+R_76;
    R_76 = (-1.0)*R_76; R_99 = R_31*R_13; R_99 = 4.0*R_99; R_99 = R_110+R_99;
    R_99 = (-1.0)*R_99; R_13 = R_44*R_13; R_91 = (-8.0)*R_91; R_63 = R_91+R_63;
    R_39 = R_63*R_39; R_39 = R_20+R_39; R_3 = R_39+R_3; R_20 = R_3*R_30;
    R_5 = R_20+R_5; R_5 = (-1.0/160.0)*R_5; R_3 = R_3*R_27; R_87 = R_3+R_87;
    R_19 = R_87+R_19; R_19 = R_106+R_19; R_19 = (1.0/24.0)*R_19; R_76 = R_39+R_76;
    R_39 = R_76*R_9; R_39 = (-1.0)*R_39; R_106 = R_76*R_41; R_87 = (-1.0)*R_76;
    R_3 = R_76*R_11; R_20 = R_76*R_12; R_20 = R_22+R_20; R_22 = R_45*R_76;
    R_95 = R_22+R_95; R_95 = (-1.0/48.0)*R_95; R_22 = (-1.0/16.0)*R_76; R_91 = -0.25*R_76;
    R_44 = R_31*R_76; R_35 = R_63*R_35; R_35 = R_82+R_35; R_18 = R_35+R_18;
    R_79 = R_79*R_18; R_47 = R_79+R_47; R_47 = (1.0/12.0)*R_47; R_18 = R_23*R_18;
    R_99 = R_35+R_99; R_41 = R_99*R_41; R_41 = (1.0/32.0)*R_41; R_87 = R_99+R_87;
    R_9 = R_87*R_9; R_12 = R_99*R_12; R_12 = R_3+R_12; R_12 = 2.0*R_12;
    R_12 = R_25+R_12; R_25 = (1.0/96.0)*R_99; R_22 = R_25+R_22; R_22 = R_22*R_31;
    R_25 = 0.125*R_99; R_91 = R_25+R_91; R_91 = R_45*R_91; R_31 = R_31*R_99;
    R_45 = R_45*R_99; R_45 = (-2.0)*R_45; R_44 = R_45+R_44; R_11 = R_99*R_11;
    R_11 = 2.0*R_11; R_11 = R_77+R_11; R_10 = R_63*R_10; R_36 = R_10+R_36;
    R_86 = R_36*R_86; R_84 = R_86+R_84; R_84 = R_58+R_84; R_84 = R_5+R_84;
    R_84 = R_47+R_84; R_84 = R_19+R_84; R_84 = R_18+R_84; R_84 = (-1.0)*R_84;
    R_84 = R_2+R_84; R_56 = R_84*R_56; R_56 = (-1.0)*R_56; R_92 = R_56+R_92;
    R_17 = R_92+R_17; R_83 = R_17+R_83; R_17 = pow(R_83,2); R_27 = R_27*R_83;
    R_88 = R_88*R_83; R_30 = R_30*R_83; R_78 = R_78*R_83; R_83 = R_90*R_83;
    R_13 = R_10+R_13; R_69 = R_13*R_69; R_106 = R_69+R_106; R_106 = (-1.0/16.0)*R_106;
    R_85 = R_13*R_85; R_85 = (-8.0)*R_85; R_12 = R_85+R_12; R_12 = -0.75*R_12;
    R_37 = R_13*R_37; R_8 = R_37+R_8; R_8 = R_95+R_8; R_61 = R_13*R_61;
    R_61 = R_22+R_61; R_24 = R_13+R_24; R_74 = R_24+R_74; R_74 = (1.0/12.0)*R_74;
    R_74 = R_93+R_74; R_74 = R_4+R_74; R_32 = R_74+R_32; R_32 = 1/R_32;
    R_66 = R_74+R_66; R_59 = R_66*R_59; R_24 = R_48+R_24; R_43 = R_24+R_43;
    R_43 = (-1.0/16.0)*R_43; R_43 = R_97+R_43; R_43 = R_40*R_43; R_61 = R_43+R_61;
    R_60 = R_61+R_60; R_60 = R_107+R_60; R_60 = R_91+R_60; R_60 = (1.0/12.0)*R_60;
    R_8 = R_60+R_8; R_60 = R_40*R_13; R_60 = -0.125*R_60; R_38 = R_13*R_38;
    R_38 = (-4.0)*R_38; R_38 = R_31+R_38; R_98 = R_38+R_98; R_98 = 1.5*R_98;
    R_38 = R_13*R_42; R_38 = (-4.0)*R_38; R_38 = R_44+R_38; R_108 = R_38+R_108;
    R_108 = (-1.0)*R_108; R_98 = R_108+R_98; R_98 = (1.0/12.0)*R_98; R_96 = R_98+R_96;
    R_60 = R_96+R_60; R_60 = (1.0/80.0)*R_60; R_8 = R_60+R_8; R_8 = (-1.0)*R_8;
    R_59 = R_8+R_59; R_32 = R_59*R_32; R_32 = (-1.0)*R_32; R_64 = R_32+R_64;
    R_64 = R_33+R_64; R_33 = pow(R_64,2); R_32 = R_33+R_17; R_59 = R_13*R_32;
    R_53 = R_32+R_53; R_7 = R_53+R_7; R_53 = R_75*R_32; R_32 = R_81*R_32;
    R_46 = R_46*R_64; R_27 = R_46+R_27; R_46 = R_76*R_27; R_46 = (-1.0)*R_46;
    R_46 = R_59+R_46; R_46 = (-1.0/24.0)*R_46; R_59 = 0.5*R_27; R_59 = R_1+R_59;
    R_59 = R_101+R_59; R_101 = -0.25*R_27; R_27 = R_99*R_27; R_27 = 2.0*R_27;
    R_42 = R_42*R_64; R_88 = R_42+R_88; R_42 = R_81*R_88; R_1 = R_62*R_88;
    R_1 = 4.0*R_1; R_32 = R_1+R_32; R_32 = (-1.0)*R_32; R_1 = (-1.0)*R_88;
    R_33 = R_1+R_33; R_17 = R_33+R_17; R_17 = -0.5*R_17; R_33 = R_75*R_88;
    R_33 = 2.0*R_33; R_88 = R_13*R_88; R_88 = (-8.0)*R_88; R_57 = R_57*R_64;
    R_30 = R_57+R_30; R_70 = R_30+R_70; R_30 = -0.125*R_70; R_59 = R_30+R_59;
    R_89 = R_59+R_89; R_89 = R_76*R_89; R_59 = (1.0/48.0)*R_70; R_100 = R_59+R_100;
    R_102 = R_100+R_102; R_101 = R_102+R_101; R_101 = R_99*R_101; R_76 = R_76*R_70;
    R_76 = R_68+R_76; R_76 = R_27+R_76; R_76 = 2.0*R_76; R_70 = R_99*R_70;
    R_20 = R_70+R_20; R_20 = 2.0*R_20; R_40 = R_40*R_64; R_40 = R_78+R_40;
    R_78 = (1.0/24.0)*R_40; R_7 = R_78+R_7; R_7 = R_62*R_7; R_78 = (1.0/48.0)*R_40;
    R_104 = R_78+R_104; R_104 = R_75*R_104; R_21 = R_40+R_21; R_72 = R_21+R_72;
    R_72 = 0.5*R_72; R_51 = R_72+R_51; R_80 = R_51+R_80; R_28 = R_80+R_28;
    R_28 = R_62*R_28; R_80 = -0.125*R_40; R_54 = R_54+R_80; R_80 = R_29+R_80;
    R_71 = R_80+R_71; R_71 = R_81*R_71; R_67 = R_40+R_67; R_14 = R_67+R_14;
    R_14 = 2.0*R_14; R_49 = R_14+R_49; R_49 = R_13*R_49; R_49 = R_9+R_49;
    R_49 = -0.125*R_49; R_41 = R_49+R_41; R_41 = R_103+R_41; R_40 = 2.0*R_40;
    R_52 = R_40+R_52; R_40 = R_13*R_52; R_40 = R_39+R_40; R_40 = (-1.0/640.0)*R_40;
    R_40 = R_7+R_40; R_46 = R_40+R_46; R_40 = R_81*R_52; R_40 = R_88+R_40;
    R_76 = R_40+R_76; R_76 = (-1.0)*R_76; R_52 = R_75*R_52; R_64 = R_6*R_64;
    R_83 = R_64+R_83; R_83 = 2.0*R_83; R_83 = R_50+R_83; R_62 = R_62*R_83;
    R_42 = R_62+R_42; R_42 = 2.0*R_42; R_42 = R_53+R_42; R_42 = 0.5*R_42;
    R_53 = (-1.0/24.0)*R_83; R_53 = R_54+R_53; R_73 = R_53+R_73; R_17 = R_73+R_17;
    R_55 = R_17+R_55; R_55 = R_13*R_55; R_55 = R_71+R_55; R_28 = R_55+R_28;
    R_28 = R_89+R_28; R_28 = R_101+R_28; R_32 = R_28+R_32; R_42 = R_32+R_42;
    R_104 = R_42+R_104; R_104 = (1.0/12.0)*R_104; R_46 = R_104+R_46; R_75 = R_75*R_83;
    R_34 = R_75+R_34; R_34 = 0.5*R_34; R_81 = R_81*R_83; R_81 = R_0+R_81;
    R_33 = R_81+R_33; R_33 = (-1.0)*R_33; R_83 = R_13*R_83; R_83 = (-4.0)*R_83;
    R_52 = R_83+R_52; R_52 = R_109+R_52; R_20 = R_52+R_20; R_20 = 1.5*R_20;
    R_76 = R_20+R_76; R_12 = R_76+R_12; R_26 = R_13*R_26; R_26 = (-4.0)*R_26;
    R_11 = R_26+R_11; R_11 = 0.125*R_11; R_12 = R_11+R_12; R_12 = (1.0/12.0)*R_12;
    R_41 = R_12+R_41; R_33 = R_41+R_33; R_34 = R_33+R_34; R_106 = R_34+R_106;
    R_106 = (1.0/80.0)*R_106; R_46 = R_106+R_46; res := R_46; 
    return res
