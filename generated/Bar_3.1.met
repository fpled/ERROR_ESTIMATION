static const nvi := 1
static const nb_nodes := 3
static const nb_vertex_nodes := 2
static const center_of_var_inter := [ 1.0/2.0 ]
#
def interpolation( var_inter, val, interpolation_base )
    if interpolation_base == "lagrange"
        return 4*val[2]*var_inter[0]*(1-var_inter[0])+val[1]*var_inter[0]*(2*var_inter[0]-1)+val[0]*(1+var_inter[0]*(2*var_inter[0]-3))
    else if interpolation_base == "hierarchical"
        return 4*val[2]*var_inter[0]*(1-var_inter[0])+var_inter[0]*val[1]+val[0]*(1-var_inter[0])

#
def generic_interpolation( var_inter, val, interpolation_base, deg ) when deg == 2
    if interpolation_base == "lagrange"
        return (1+var_inter[0]*(2*var_inter[0]-3))*val[0]+4*var_inter[0]*(1-var_inter[0])*val[1]+var_inter[0]*(2*var_inter[0]-1)*val[2]
    else if interpolation_base == "hierarchical"
        return 4*var_inter[0]*(1-var_inter[0])*val[1]+(1-var_inter[0])*val[0]+var_inter[0]*val[2]

#
def generic_interpolation( var_inter, val, interpolation_base, deg ) when deg == 3
    if interpolation_base == "lagrange"
        return val[1]*var_inter[0]*(9+var_inter[0]*(27.0/2.0*var_inter[0]-45.0/2.0))+(1+var_inter[0]*(var_inter[0]*(9-9.0/2.0*var_inter[0])-11.0/2.0))*val[0]+val[2]*var_inter[0]*(var_inter[0]*(18-27.0/2.0*var_inter[0])-9.0/2.0)+val[3]*var_inter[0]*(1-9.0/2.0*var_inter[0]*(1-var_inter[0]))
    else if interpolation_base == "hierarchical"
        return val[1]*var_inter[0]*(9+var_inter[0]*(27.0/2.0*var_inter[0]-45.0/2.0))+(1-var_inter[0])*val[0]+val[2]*var_inter[0]*(var_inter[0]*(18-27.0/2.0*var_inter[0])-9.0/2.0)+var_inter[0]*val[3]

#
def generic_interpolation( var_inter, val, interpolation_base, deg ) when deg == 4
    if interpolation_base == "lagrange"
        return val[3]*var_inter[0]*(16.0/3.0+var_inter[0]*(var_inter[0]*(224.0/3.0-128.0/3.0*var_inter[0])-112.0/3.0))+val[1]*var_inter[0]*(16+var_inter[0]*(var_inter[0]*(96-128.0/3.0*var_inter[0])-208.0/3.0))+val[0]*(1+var_inter[0]*(var_inter[0]*(70.0/3.0+var_inter[0]*(32.0/3.0*var_inter[0]-80.0/3.0))-25.0/3.0))+val[2]*var_inter[0]*(var_inter[0]*(76+var_inter[0]*(64*var_inter[0]-128))-12)+val[4]*var_inter[0]*(var_inter[0]*(22.0/3.0+var_inter[0]*(32.0/3.0*var_inter[0]-16))-1)
    else if interpolation_base == "hierarchical"
        return val[3]*var_inter[0]*(16.0/3.0+var_inter[0]*(var_inter[0]*(224.0/3.0-128.0/3.0*var_inter[0])-112.0/3.0))+val[1]*var_inter[0]*(16+var_inter[0]*(var_inter[0]*(96-128.0/3.0*var_inter[0])-208.0/3.0))+(1-var_inter[0])*val[0]+val[2]*var_inter[0]*(var_inter[0]*(76+var_inter[0]*(64*var_inter[0]-128))-12)+var_inter[0]*val[4]

#
def generic_interpolation( var_inter, val, interpolation_base, deg ) when deg == 5
    if interpolation_base == "lagrange"
        return val[5]*var_inter[0]*(1+var_inter[0]*(var_inter[0]*(875.0/24.0+var_inter[0]*(625.0/24.0*var_inter[0]-625.0/12.0))-125.0/12.0))+val[2]*var_inter[0]*(var_inter[0]*(2675.0/12.0+var_inter[0]*(var_inter[0]*(8125.0/12.0-3125.0/12.0*var_inter[0])-7375.0/12.0))-25)+val[0]*(1+var_inter[0]*(var_inter[0]*(375.0/8.0+var_inter[0]*(var_inter[0]*(625.0/8.0-625.0/24.0*var_inter[0])-2125.0/24.0))-137.0/12.0))+val[1]*var_inter[0]*(25+var_inter[0]*(var_inter[0]*(8875.0/24.0+var_inter[0]*(3125.0/24.0*var_inter[0]-4375.0/12.0))-1925.0/12.0))+val[3]*var_inter[0]*(50.0/3.0+var_inter[0]*(var_inter[0]*(6125.0/12.0+var_inter[0]*(3125.0/12.0*var_inter[0]-625))-325.0/2.0))+var_inter[0]*(var_inter[0]*(1525.0/24.0+var_inter[0]*(var_inter[0]*(6875.0/24.0-3125.0/24.0*var_inter[0])-5125.0/24.0))-25.0/4.0)*val[4]
    else if interpolation_base == "hierarchical"
        return var_inter[0]*(var_inter[0]*(1525.0/24.0+var_inter[0]*(var_inter[0]*(6875.0/24.0-3125.0/24.0*var_inter[0])-5125.0/24.0))-25.0/4.0)*val[4]+val[2]*var_inter[0]*(var_inter[0]*(2675.0/12.0+var_inter[0]*(var_inter[0]*(8125.0/12.0-3125.0/12.0*var_inter[0])-7375.0/12.0))-25)+(1-var_inter[0])*val[0]+val[1]*var_inter[0]*(25+var_inter[0]*(var_inter[0]*(8875.0/24.0+var_inter[0]*(3125.0/24.0*var_inter[0]-4375.0/12.0))-1925.0/12.0))+val[3]*var_inter[0]*(50.0/3.0+var_inter[0]*(var_inter[0]*(6125.0/12.0+var_inter[0]*(3125.0/12.0*var_inter[0]-625))-325.0/2.0))+var_inter[0]*val[5]

#
def interpolation_vertex( var_inter, val_vertex )
    return var_inter[0]*val_vertex[1]+val_vertex[0]*(1-var_inter[0])
#
def nb_children( sub_nvi ) when sub_nvi==0
    return 1
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==0
    return child_var_inter
def type_child( sub_nvi, num_child ) when sub_nvi==0
    return Bar_3
def node_number_child( sub_nvi, num_child ) when sub_nvi==0
    return 0 .. 3
#
def nb_children( sub_nvi ) when sub_nvi==1
    return 2
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==0
    return [0]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return [0]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==1
    return [1/2]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return [2]
def normal( var_inter, pos_nodes )
    assert( 0, "normal is defined only for nb_dim == nvi + 1" )
#
def jac_mat( var_inter, pos_nodes )
    res := Mat[ type_promote(var_inter[0],pos_nodes[0][0],mul), Gen[ 1, 1 ] ]()
    R_0 := pos_nodes[2][0]; R_1 := pos_nodes[0][0]; R_2 := var_inter[0]; R_3 := (-2.0)*R_2;
    R_3 = 1.0+R_3; R_3 = R_0*R_3; R_3 = 4.0*R_3; R_2 = 4.0*R_2;
    R_0 = (-3.0)+R_2; R_0 = R_1*R_0; R_2 = (-1.0)+R_2; R_1 = pos_nodes[1][0];
    R_2 = R_1*R_2; R_0 = R_2+R_0; R_3 = R_0+R_3; res(0,0) = R_3;
    return res
#
def jac( var_inter, pos_nodes )
    R_0 := pos_nodes[2][0]; R_1 := pos_nodes[0][0]; R_2 := var_inter[0]; R_3 := (-2.0)*R_2;
    R_3 = 1.0+R_3; R_3 = R_0*R_3; R_3 = 4.0*R_3; R_2 = 4.0*R_2;
    R_0 = (-3.0)+R_2; R_0 = R_1*R_0; R_2 = (-1.0)+R_2; R_1 = pos_nodes[1][0];
    R_2 = R_1*R_2; R_0 = R_2+R_0; R_3 = R_0+R_3; res := R_3;
    return res
#
def inv_jac_mat( var_inter, pos_nodes )
    res := Mat[ type_promote(var_inter[0],pos_nodes[0][0],mul), Gen[ 1, 1 ] ]()
    R_0 := pos_nodes[2][0]; R_1 := pos_nodes[0][0]; R_2 := var_inter[0]; R_3 := (-2.0)*R_2;
    R_3 = 1.0+R_3; R_3 = R_0*R_3; R_3 = 4.0*R_3; R_2 = 4.0*R_2;
    R_0 = (-3.0)+R_2; R_0 = R_1*R_0; R_2 = (-1.0)+R_2; R_1 = pos_nodes[1][0];
    R_2 = R_1*R_2; R_0 = R_2+R_0; R_3 = R_0+R_3; R_3 = 1/R_3;
    res(0,0) = R_3; 
    return res
#
def measure( var_inter, pos_nodes )
    R_0 := pos_nodes[0][0]; R_0 = (-1.0)*R_0; R_1 := pos_nodes[1][0]; R_0 = R_1+R_0;
    res := R_0; 
    return res
#
def barycenter( var_inter, pos_nodes )
    res := Vec[ type_promote(var_inter[0],pos_nodes[0][0],mul), 1 ]()
    R_0 := pos_nodes[1][0]; R_1 := pos_nodes[0][0]; R_0 = R_1+R_0; R_0 = 0.5*R_0;
    res[0] = R_0; 
    return res
#
def inertia_operator_for_barycenter( var_inter, pos_nodes )
    R_0 := pos_nodes[2][0]; R_1 := (-20.0)*R_0; R_2 := (-4.0)*R_0; R_3 := (-24.0)*R_0;
    R_4 := pos_nodes[0][0]; R_5 := (-1.0)*R_4; R_6 := pos_nodes[1][0]; R_4 = R_4+R_6;
    R_7 := 10.0*R_4; R_1 = R_7+R_1; R_7 = 2.0*R_4; R_7 = R_2+R_7;
    R_1 = R_7*R_1; R_7 = -0.5*R_4; R_7 = R_0+R_7; R_0 = pow(R_7,2);
    R_4 = 12.0*R_4; R_4 = R_3+R_4; R_7 = R_4*R_7; R_5 = R_6+R_5;
    R_1 = R_5*R_1; R_1 = (1.0/80.0)*R_1; R_0 = R_5*R_0; R_6 = pow(R_5,2);
    R_6 = R_7+R_6; R_6 = R_5*R_6; R_6 = (1.0/12.0)*R_6; R_0 = R_6+R_0;
    R_1 = R_0+R_1; res := R_1; 
    return res
