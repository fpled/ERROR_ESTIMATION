static const nvi := 2
static const nb_nodes := 3
static const nb_vertex_nodes := 3
static const center_of_var_inter := [ 1.0/3.0, 1.0/3.0 ]
#
def interpolation( var_inter, val, interpolation_base )
    if interpolation_base == "lagrange"
        return val[0]*(1-var_inter[1]-var_inter[0])+var_inter[0]*val[1]+var_inter[1]*val[2]
    else if interpolation_base == "hierarchical"
        return val[0]*(1-var_inter[1]-var_inter[0])+var_inter[0]*val[1]+var_inter[1]*val[2]

#
def generic_interpolation( var_inter, val, interpolation_base, deg ) when deg == 1
    if interpolation_base == "lagrange"
        return var_inter[0]*val[1]+(1-var_inter[1]-var_inter[0])*val[0]+var_inter[1]*val[2]
    else if interpolation_base == "hierarchical"
        return var_inter[0]*val[1]+(1-var_inter[1]-var_inter[0])*val[0]+var_inter[1]*val[2]

#
def generic_interpolation( var_inter, val, interpolation_base, deg ) when deg == 2
    if interpolation_base == "lagrange"
        return val[0]*(1+var_inter[0]*(4*var_inter[1]+2*var_inter[0]-3)+var_inter[1]*(2*var_inter[1]-3))+var_inter[0]*(2*var_inter[0]-1)*val[2]+4*var_inter[1]*var_inter[0]*val[4]+var_inter[1]*(2*var_inter[1]-1)*val[5]-4*var_inter[1]*(var_inter[1]+var_inter[0]-1)*val[3]-4*val[1]*var_inter[0]*(var_inter[1]+var_inter[0]-1)
    else if interpolation_base == "hierarchical"
        return 4*var_inter[1]*var_inter[0]*val[4]+(1-var_inter[1]-var_inter[0])*val[0]+var_inter[0]*val[2]+var_inter[1]*val[5]-4*var_inter[1]*(var_inter[1]+var_inter[0]-1)*val[3]-4*val[1]*var_inter[0]*(var_inter[1]+var_inter[0]-1)

#
def generic_interpolation( var_inter, val, interpolation_base, deg ) when deg == 3
    if interpolation_base == "lagrange"
        return val[9]*var_inter[1]*(1-9.0/2.0*var_inter[1]*(1-var_inter[1]))+val[7]*var_inter[1]*(var_inter[1]*(18-27.0/2.0*(var_inter[1]+var_inter[0]))-9.0/2.0*(1-var_inter[0]))+val[6]*var_inter[1]*var_inter[0]*(27.0/2.0*var_inter[0]-9.0/2.0)+val[4]*var_inter[1]*(9+var_inter[1]*(27.0/2.0*var_inter[1]+27*var_inter[0]-45.0/2.0)+var_inter[0]*(27.0/2.0*var_inter[0]-45.0/2.0))+val[2]*var_inter[0]*(var_inter[0]*(18-27.0/2.0*(var_inter[1]+var_inter[0]))-9.0/2.0*(1-var_inter[1]))+val[0]*(1+var_inter[0]*(var_inter[0]*(9-9.0/2.0*var_inter[0])-11.0/2.0)+var_inter[1]*(var_inter[1]*(9-9.0/2.0*var_inter[1]-27.0/2.0*var_inter[0])+var_inter[0]*(18-27.0/2.0*var_inter[0])-11.0/2.0))+var_inter[0]*(9+var_inter[1]*(27.0/2.0*var_inter[1]+27*var_inter[0]-45.0/2.0)+var_inter[0]*(27.0/2.0*var_inter[0]-45.0/2.0))*val[1]+var_inter[0]*(1-9.0/2.0*var_inter[0]*(1-var_inter[0]))*val[3]+27*val[5]*var_inter[0]*var_inter[1]*(1-var_inter[1]-var_inter[0])+val[8]*var_inter[0]*var_inter[1]*(27.0/2.0*var_inter[1]-9.0/2.0)
    else if interpolation_base == "hierarchical"
        return val[8]*var_inter[1]*var_inter[0]*(9-27.0/2.0*var_inter[0])+val[2]*var_inter[0]*(var_inter[0]*(18-27.0/2.0*(var_inter[1]+var_inter[0]))-9.0/2.0*(1-var_inter[1]))+(1-var_inter[1]-var_inter[0])*val[0]+val[1]*var_inter[0]*(9*(1-var_inter[1])+var_inter[0]*(27.0/2.0*(var_inter[1]+var_inter[0])-45.0/2.0))+var_inter[0]*val[3]+val[4]*var_inter[1]*(9+var_inter[1]*(27.0/2.0*var_inter[1]-45.0/2.0)+var_inter[0]*(9.0/2.0-27.0/2.0*var_inter[0]))+27*val[5]*var_inter[0]*var_inter[1]*(1-var_inter[1]-var_inter[0])+val[6]*var_inter[1]*var_inter[0]*(27.0/2.0*var_inter[0]-9.0/2.0)+val[7]*var_inter[1]*(var_inter[1]*(18-27.0/2.0*var_inter[1])+var_inter[0]*(27.0/2.0*var_inter[0]-9)-9.0/2.0)+var_inter[1]*val[9]

#
def generic_interpolation( var_inter, val, interpolation_base, deg ) when deg == 4
    if interpolation_base == "lagrange"
        return val[14]*var_inter[1]*(var_inter[1]*(22.0/3.0+var_inter[1]*(32.0/3.0*var_inter[1]-16))-1)+val[13]*var_inter[0]*var_inter[1]*(16.0/3.0+var_inter[1]*(128.0/3.0*var_inter[1]-32))+val[10]*var_inter[0]*var_inter[1]*(var_inter[1]*(160-128*(var_inter[1]+var_inter[0]))-32*(1-var_inter[0]))+val[7]*var_inter[1]*var_inter[0]*(var_inter[0]*(160-128*(var_inter[1]+var_inter[0]))-32*(1-var_inter[1]))+val[5]*var_inter[1]*(16+var_inter[1]*(var_inter[1]*(96-128.0/3.0*var_inter[1])-208.0/3.0)+var_inter[0]*(var_inter[0]*(96-128.0/3.0*var_inter[0])+var_inter[1]*(192-128*(var_inter[1]+var_inter[0]))-208.0/3.0))+(1+var_inter[0]*(var_inter[0]*(70.0/3.0+var_inter[0]*(32.0/3.0*var_inter[0]-80.0/3.0))-25.0/3.0)+var_inter[1]*(var_inter[0]*(140.0/3.0+var_inter[1]*(64*var_inter[0]+128.0/3.0*var_inter[1]-80)+var_inter[0]*(128.0/3.0*var_inter[0]-80))+var_inter[1]*(70.0/3.0+var_inter[1]*(32.0/3.0*var_inter[1]-80.0/3.0))-25.0/3.0))*val[0]+var_inter[0]*(16+var_inter[1]*(var_inter[1]*(96-128.0/3.0*var_inter[1])-208.0/3.0)+var_inter[0]*(var_inter[0]*(96-128.0/3.0*var_inter[0])+var_inter[1]*(192-128*(var_inter[1]+var_inter[0]))-208.0/3.0))*val[1]+var_inter[0]*(var_inter[0]*(76+var_inter[0]*(64*var_inter[0]-128*(1-var_inter[1]))+var_inter[1]*(64*var_inter[1]-144))+var_inter[1]*(28-16*var_inter[1])-12)*val[2]+val[3]*var_inter[0]*(16.0/3.0*(1-var_inter[1])+var_inter[0]*(var_inter[0]*(224.0/3.0-128.0/3.0*(var_inter[1]+var_inter[0]))+32*var_inter[1]-112.0/3.0))+val[4]*var_inter[0]*(var_inter[0]*(22.0/3.0+var_inter[0]*(32.0/3.0*var_inter[0]-16))-1)+val[6]*var_inter[0]*var_inter[1]*(96+var_inter[1]*(256*var_inter[0]+128*var_inter[1]-224)+var_inter[0]*(128*var_inter[0]-224))+val[8]*var_inter[1]*var_inter[0]*(16.0/3.0+var_inter[0]*(128.0/3.0*var_inter[0]-32))+val[9]*var_inter[1]*(var_inter[0]*(28-16*var_inter[0])+var_inter[1]*(76+var_inter[1]*(64*var_inter[1]-128*(1-var_inter[0]))+var_inter[0]*(64*var_inter[0]-144))-12)+val[11]*var_inter[0]*var_inter[1]*(4+64*var_inter[1]*var_inter[0]-16*(var_inter[1]+var_inter[0]))+val[12]*var_inter[1]*(16.0/3.0*(1-var_inter[0])+var_inter[1]*(32*var_inter[0]+var_inter[1]*(224.0/3.0-128.0/3.0*(var_inter[1]+var_inter[0]))-112.0/3.0))
    else if interpolation_base == "hierarchical"
        return var_inter[1]*val[14]+val[12]*var_inter[1]*(16.0/3.0+var_inter[1]*(var_inter[1]*(224.0/3.0-128.0/3.0*var_inter[1])-112.0/3.0)+var_inter[0]*(var_inter[0]*(160.0/3.0-128.0/3.0*var_inter[0])-16))+val[10]*var_inter[0]*var_inter[1]*(var_inter[1]*(160-128*(var_inter[1]+var_inter[0]))-32*(1-var_inter[0]))+val[7]*var_inter[1]*var_inter[0]*(var_inter[0]*(160-128*(var_inter[1]+var_inter[0]))-32*(1-var_inter[1]))+var_inter[0]*val[4]+val[3]*var_inter[0]*(16.0/3.0*(1-var_inter[1])+var_inter[0]*(var_inter[0]*(224.0/3.0-128.0/3.0*(var_inter[1]+var_inter[0]))+32*var_inter[1]-112.0/3.0))+(1-var_inter[1]-var_inter[0])*val[0]+val[1]*var_inter[0]*(16*(1-var_inter[1])+var_inter[0]*(160.0/3.0*var_inter[1]+var_inter[0]*(96-128.0/3.0*(var_inter[1]+var_inter[0]))-208.0/3.0))+val[2]*var_inter[0]*(var_inter[0]*(76+var_inter[0]*(64*(var_inter[1]+var_inter[0])-128)-64*var_inter[1])-12*(1-var_inter[1]))+val[5]*var_inter[1]*(16+var_inter[1]*(var_inter[1]*(96-128.0/3.0*var_inter[1])-208.0/3.0)+var_inter[0]*(var_inter[0]*(32-128.0/3.0*var_inter[0])-16.0/3.0))+val[6]*var_inter[0]*var_inter[1]*(96+var_inter[0]*(128*var_inter[0]+256*var_inter[1]-224)+var_inter[1]*(128*var_inter[1]-224))+val[8]*var_inter[1]*var_inter[0]*(16.0/3.0+var_inter[0]*(128.0/3.0*var_inter[0]-32))+val[9]*var_inter[1]*(var_inter[1]*(76-128*var_inter[1])-64*((1-var_inter[0])*pow(var_inter[0],2)-pow(var_inter[1],3))-12*(1-var_inter[0]))+val[11]*var_inter[1]*var_inter[0]*(64*var_inter[0]*(1-var_inter[0])-12)+val[13]*var_inter[1]*var_inter[0]*(16+var_inter[0]*(128.0/3.0*var_inter[0]-160.0/3.0))

#
def interpolation_vertex( var_inter, val_vertex )
    return val_vertex[2]*var_inter[1]+val_vertex[0]*(1-var_inter[1]-var_inter[0])+var_inter[0]*val_vertex[1]
#
def nb_children( sub_nvi ) when sub_nvi==0
    return 1
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==0
    return child_var_inter
def type_child( sub_nvi, num_child ) when sub_nvi==0
    return Triangle
def node_number_child( sub_nvi, num_child ) when sub_nvi==0
    return 0 .. 3
#
def nb_children( sub_nvi ) when sub_nvi==1
    return 3
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==0
    return [child_var_inter[0],0]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return Bar
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==0
    return [0,1]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==1
    return [1-child_var_inter[0],child_var_inter[0]]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return Bar
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==1
    return [1,2]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==1 and num_child==2
    return [0,1-child_var_inter[0]]
def type_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==2
    return Bar
def node_number_child( sub_nvi, num_child ) when sub_nvi==1 and num_child==2
    return [2,0]
#
def nb_children( sub_nvi ) when sub_nvi==2
    return 3
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==2 and num_child==0
    return [0,0]
def type_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==0
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==0
    return [0]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==2 and num_child==1
    return [1,0]
def type_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==1
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==1
    return [1]
def var_inter_from_child_var_inter( sub_nvi, num_child, child_var_inter ) when sub_nvi==2 and num_child==2
    return [0,1]
def type_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==2
    return NodalElement
def node_number_child( sub_nvi, num_child ) when sub_nvi==2 and num_child==2
    return [2]
def normal( var_inter, pos_nodes )
    res := Vec[ type_promote(var_inter[0],pos_nodes[0][0],mul), 3 ]()
    R_0 := pos_nodes[1][0]; R_1 := pos_nodes[0][0]; R_1 = (-1.0)*R_1; R_0 = R_0+R_1;
    R_2 := pos_nodes[2][0]; R_1 = R_2+R_1; R_2 = pos_nodes[2][2]; R_3 := pos_nodes[1][1];
    R_4 := pos_nodes[0][1]; R_4 = (-1.0)*R_4; R_3 = R_3+R_4; R_5 := R_3*R_1;
    R_5 = (-1.0)*R_5; R_6 := pos_nodes[2][1]; R_4 = R_6+R_4; R_6 = R_0*R_4;
    R_5 = R_6+R_5; R_6 = pow(R_5,2); R_7 := pos_nodes[0][2]; R_7 = (-1.0)*R_7;
    R_2 = R_2+R_7; R_0 = R_0*R_2; R_0 = (-1.0)*R_0; R_2 = R_3*R_2;
    R_3 = pos_nodes[1][2]; R_7 = R_3+R_7; R_1 = R_1*R_7; R_0 = R_1+R_0;
    R_1 = pow(R_0,2); R_4 = R_7*R_4; R_4 = (-1.0)*R_4; R_2 = R_4+R_2;
    R_4 = pow(R_2,2); R_1 = R_4+R_1; R_6 = R_1+R_6; R_6 = rsqrt(R_6);
    R_5 = R_5*R_6; res[2] = R_5; R_0 = R_0*R_6; res[1] = R_0;
    R_6 = R_2*R_6; res[0] = R_6; 
    return res
#
def jac_mat( var_inter, pos_nodes )
    res := Mat[ type_promote(var_inter[0],pos_nodes[0][0],mul), Gen[ 2, 3 ] ]()
    R_0 := pos_nodes[2][2]; R_1 := pos_nodes[2][1]; R_2 := pos_nodes[2][0]; R_3 := pos_nodes[0][2];
    R_3 = (-1.0)*R_3; R_0 = R_0+R_3; res(1,2) = R_0; R_0 = pos_nodes[1][2];
    R_3 = R_0+R_3; res(0,2) = R_3; R_3 = pos_nodes[0][1]; R_3 = (-1.0)*R_3;
    R_1 = R_1+R_3; res(1,1) = R_1; R_1 = pos_nodes[1][1]; R_3 = R_1+R_3;
    res(0,1) = R_3; R_3 = pos_nodes[0][0]; R_3 = (-1.0)*R_3; R_2 = R_2+R_3;
    res(1,0) = R_2; R_2 = pos_nodes[1][0]; R_3 = R_2+R_3; res(0,0) = R_3;
    return res
#
def jac( var_inter, pos_nodes )
    R_0 := pos_nodes[2][1]; R_1 := pos_nodes[2][2]; R_2 := pos_nodes[2][0]; R_3 := pos_nodes[0][2];
    R_3 = (-1.0)*R_3; R_1 = R_1+R_3; R_4 := pos_nodes[1][2]; R_3 = R_4+R_3;
    R_4 = R_3*R_1; R_5 := pow(R_3,2); R_6 := pos_nodes[0][0]; R_6 = (-1.0)*R_6;
    R_2 = R_2+R_6; R_7 := pos_nodes[1][0]; R_6 = R_7+R_6; R_7 = R_6*R_2;
    R_8 := pow(R_6,2); R_9 := pos_nodes[0][1]; R_9 = (-1.0)*R_9; R_0 = R_0+R_9;
    R_10 := pos_nodes[1][1]; R_9 = R_10+R_9; R_10 = R_9*R_0; R_7 = R_10+R_7;
    R_7 = R_4+R_7; R_4 = pow(R_9,2); R_8 = R_4+R_8; R_5 = R_8+R_5;
    R_8 = 1/R_5; R_3 = R_3*R_8; R_3 = R_7*R_3; R_3 = (-1.0)*R_3;
    R_3 = R_1+R_3; R_3 = pow(R_3,2); R_9 = R_9*R_8; R_9 = R_7*R_9;
    R_9 = (-1.0)*R_9; R_9 = R_0+R_9; R_9 = pow(R_9,2); R_8 = R_6*R_8;
    R_8 = R_7*R_8; R_8 = (-1.0)*R_8; R_8 = R_2+R_8; R_8 = pow(R_8,2);
    R_9 = R_8+R_9; R_3 = R_9+R_3; R_3 = R_5*R_3; R_3 = sqrt(R_3);
    res := R_3; 
    return res
#
def inv_jac_mat( var_inter, pos_nodes )
    assert( 0, "inv_jac_mat() available only when nb var inter == dim" )
#
def measure( var_inter, pos_nodes )
    R_0 := pos_nodes[2][1]; R_1 := pos_nodes[2][2]; R_2 := pos_nodes[2][0]; R_3 := pos_nodes[0][2];
    R_3 = (-1.0)*R_3; R_1 = R_1+R_3; R_4 := pos_nodes[1][2]; R_3 = R_4+R_3;
    R_4 = R_3*R_1; R_5 := pow(R_3,2); R_6 := pos_nodes[0][0]; R_6 = (-1.0)*R_6;
    R_2 = R_2+R_6; R_7 := pos_nodes[1][0]; R_6 = R_7+R_6; R_7 = R_6*R_2;
    R_8 := pow(R_6,2); R_9 := pos_nodes[0][1]; R_9 = (-1.0)*R_9; R_0 = R_0+R_9;
    R_10 := pos_nodes[1][1]; R_9 = R_10+R_9; R_10 = R_9*R_0; R_7 = R_10+R_7;
    R_7 = R_4+R_7; R_4 = pow(R_9,2); R_8 = R_4+R_8; R_5 = R_8+R_5;
    R_8 = 1/R_5; R_3 = R_3*R_8; R_3 = R_7*R_3; R_3 = (-1.0)*R_3;
    R_3 = R_1+R_3; R_3 = pow(R_3,2); R_9 = R_9*R_8; R_9 = R_7*R_9;
    R_9 = (-1.0)*R_9; R_9 = R_0+R_9; R_9 = pow(R_9,2); R_8 = R_6*R_8;
    R_8 = R_7*R_8; R_8 = (-1.0)*R_8; R_8 = R_2+R_8; R_8 = pow(R_8,2);
    R_9 = R_8+R_9; R_3 = R_9+R_3; R_3 = R_5*R_3; R_3 = sqrt(R_3);
    R_3 = 0.5*R_3; res := R_3; 
    return res
#
def barycenter( var_inter, pos_nodes )
    res := Vec[ type_promote(var_inter[0],pos_nodes[0][0],mul), 3 ]()
    R_0 := pos_nodes[1][2]; R_1 := pos_nodes[0][2]; R_0 = R_1+R_0; R_1 = pos_nodes[2][2];
    R_0 = R_1+R_0; R_0 = (1.0/3.0)*R_0; res[2] = R_0; R_0 = pos_nodes[1][1];
    R_1 = pos_nodes[0][1]; R_0 = R_1+R_0; R_1 = pos_nodes[2][1]; R_0 = R_1+R_0;
    R_0 = (1.0/3.0)*R_0; res[1] = R_0; R_0 = pos_nodes[1][0]; R_1 = pos_nodes[0][0];
    R_0 = R_1+R_0; R_1 = pos_nodes[2][0]; R_0 = R_1+R_0; R_0 = (1.0/3.0)*R_0;
    res[0] = R_0; 
    return res
#
def inertia_operator_for_barycenter( var_inter, pos_nodes )
    R_0 := pos_nodes[2][1]; R_1 := pos_nodes[2][2]; R_2 := pos_nodes[2][0]; R_3 := pos_nodes[0][2];
    R_4 := R_3+R_1; R_5 := (-1.0/12.0)*R_4; R_4 = -0.5*R_4; R_3 = (-1.0)*R_3;
    R_1 = R_1+R_3; R_6 := pow(R_1,2); R_7 := pos_nodes[1][2]; R_8 := (1.0/6.0)*R_7;
    R_5 = R_8+R_5; R_8 = pow(R_5,2); R_4 = R_7+R_4; R_9 := pow(R_4,2);
    R_5 = R_4*R_5; R_3 = R_7+R_3; R_7 = R_3*R_1; R_4 = pow(R_3,2);
    R_10 := pos_nodes[0][0]; R_11 := R_10+R_2; R_12 := (-1.0/12.0)*R_11; R_11 = -0.5*R_11;
    R_10 = (-1.0)*R_10; R_2 = R_2+R_10; R_13 := pow(R_2,2); R_14 := pos_nodes[1][0];
    R_15 := (1.0/6.0)*R_14; R_12 = R_15+R_12; R_15 = pow(R_12,2); R_11 = R_14+R_11;
    R_16 := pow(R_11,2); R_12 = R_11*R_12; R_10 = R_14+R_10; R_14 = R_10*R_2;
    R_11 = pow(R_10,2); R_17 := pos_nodes[0][1]; R_18 := R_17+R_0; R_19 := (-1.0/12.0)*R_18;
    R_18 = -0.5*R_18; R_17 = (-1.0)*R_17; R_0 = R_0+R_17; R_20 := pow(R_0,2);
    R_20 = R_13+R_20; R_6 = R_20+R_6; R_20 = (1.0/96.0)*R_6; R_6 = 0.125*R_6;
    R_13 = pos_nodes[1][1]; R_21 := (1.0/6.0)*R_13; R_19 = R_21+R_19; R_21 = pow(R_19,2);
    R_15 = R_21+R_15; R_15 = R_8+R_15; R_15 = 0.5*R_15; R_20 = R_15+R_20;
    R_18 = R_13+R_18; R_15 = pow(R_18,2); R_16 = R_15+R_16; R_16 = R_9+R_16;
    R_16 = 0.5*R_16; R_19 = R_18*R_19; R_19 = R_5+R_19; R_19 = R_12+R_19;
    R_19 = (-2.0)*R_19; R_19 = R_6+R_19; R_16 = R_19+R_16; R_17 = R_13+R_17;
    R_13 = R_17*R_0; R_14 = R_13+R_14; R_14 = R_7+R_14; R_7 = pow(R_17,2);
    R_11 = R_7+R_11; R_4 = R_11+R_4; R_11 = 1/R_4; R_3 = R_3*R_11;
    R_3 = R_14*R_3; R_3 = (-1.0)*R_3; R_3 = R_1+R_3; R_3 = pow(R_3,2);
    R_17 = R_17*R_11; R_17 = R_14*R_17; R_17 = (-1.0)*R_17; R_17 = R_0+R_17;
    R_17 = pow(R_17,2); R_11 = R_10*R_11; R_11 = R_14*R_11; R_11 = (-1.0)*R_11;
    R_11 = R_2+R_11; R_11 = pow(R_11,2); R_17 = R_11+R_17; R_3 = R_17+R_3;
    R_3 = R_4*R_3; R_3 = sqrt(R_3); R_20 = R_3*R_20; R_16 = R_3*R_16;
    R_16 = (1.0/12.0)*R_16; R_20 = R_16+R_20; res := R_20; 
    return res
